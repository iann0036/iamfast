// Generated from grammars/GoParser.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';
import GoParserListener from './GoParserListener.js';
import GoParserVisitor from './GoParserVisitor.js';

import GoParserBase from './GoParserBase.js';

const serializedATN = [4,1,89,1013,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,1,0,1,0,1,0,1,0,1,0,5,0,212,8,0,10,0,
12,0,215,9,0,1,0,1,0,1,0,3,0,220,8,0,1,0,1,0,5,0,224,8,0,10,0,12,0,227,9,
0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,5,2,240,8,2,10,2,12,2,243,
9,2,1,2,3,2,246,8,2,1,3,3,3,249,8,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,3,5,258,
8,5,1,6,1,6,1,6,1,6,1,6,1,6,5,6,266,8,6,10,6,12,6,269,9,6,1,6,3,6,272,8,
6,1,7,1,7,3,7,276,8,7,1,7,1,7,3,7,280,8,7,1,8,1,8,1,8,5,8,285,8,8,10,8,12,
8,288,9,8,1,9,1,9,1,9,5,9,293,8,9,10,9,12,9,296,9,9,1,10,1,10,1,10,1,10,
1,10,1,10,5,10,304,8,10,10,10,12,10,307,9,10,1,10,3,10,310,8,10,1,11,1,11,
3,11,314,8,11,1,12,1,12,1,12,1,12,1,13,1,13,3,13,322,8,13,1,13,1,13,1,14,
1,14,1,14,1,14,5,14,330,8,14,10,14,12,14,333,9,14,1,14,1,14,1,15,1,15,1,
15,1,16,1,16,1,16,5,16,343,8,16,10,16,12,16,346,9,16,1,17,3,17,349,8,17,
1,17,1,17,1,18,1,18,1,18,3,18,356,8,18,1,18,1,18,3,18,360,8,18,1,19,1,19,
1,19,1,19,1,19,3,19,367,8,19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,5,21,
377,8,21,10,21,12,21,380,9,21,1,21,3,21,383,8,21,1,22,1,22,1,22,1,22,3,22,
389,8,22,1,22,1,22,3,22,393,8,22,1,23,1,23,3,23,397,8,23,1,23,1,23,1,24,
3,24,402,8,24,1,24,3,24,405,8,24,1,24,3,24,408,8,24,1,24,1,24,1,24,4,24,
413,8,24,11,24,12,24,414,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
25,1,25,1,25,1,25,1,25,1,25,3,25,432,8,25,1,26,1,26,1,26,1,26,1,26,3,26,
439,8,26,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,30,
1,31,3,31,455,8,31,1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,3,33,466,
8,33,1,34,1,34,3,34,470,8,34,1,35,1,35,3,35,474,8,35,1,36,1,36,3,36,478,
8,36,1,37,1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,
40,1,40,1,40,1,40,3,40,497,8,40,1,40,1,40,1,40,1,40,3,40,503,8,40,3,40,505,
8,40,1,41,1,41,3,41,509,8,41,1,42,1,42,3,42,513,8,42,1,42,3,42,516,8,42,
1,42,1,42,3,42,520,8,42,3,42,522,8,42,1,42,1,42,5,42,526,8,42,10,42,12,42,
529,9,42,1,42,1,42,1,43,1,43,1,43,3,43,536,8,43,1,44,1,44,1,44,3,44,541,
8,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,552,8,45,1,45,1,45,
5,45,556,8,45,10,45,12,45,559,9,45,1,45,1,45,1,46,1,46,3,46,565,8,46,1,46,
1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,3,47,576,8,47,1,48,1,48,1,48,3,48,
581,8,48,1,49,1,49,3,49,585,8,49,1,49,1,49,1,49,3,49,590,8,49,5,49,592,8,
49,10,49,12,49,595,9,49,1,50,1,50,1,50,5,50,600,8,50,10,50,12,50,603,9,50,
1,50,1,50,1,51,1,51,1,51,3,51,610,8,51,1,52,1,52,1,52,3,52,615,8,52,1,52,
3,52,618,8,52,1,53,1,53,1,53,1,53,1,53,1,53,3,53,626,8,53,1,53,1,53,1,54,
1,54,3,54,632,8,54,1,54,1,54,3,54,636,8,54,3,54,638,8,54,1,54,1,54,1,55,
3,55,643,8,55,1,55,1,55,3,55,647,8,55,1,55,1,55,3,55,651,8,55,1,56,1,56,
1,56,1,56,1,56,1,56,3,56,659,8,56,1,56,1,56,1,56,1,57,1,57,1,57,1,58,1,58,
3,58,669,8,58,1,58,1,58,1,58,1,58,1,58,3,58,676,8,58,1,59,1,59,1,59,3,59,
681,8,59,1,59,1,59,1,60,1,60,3,60,687,8,60,1,61,1,61,1,61,1,61,1,61,1,61,
1,61,1,61,3,61,697,8,61,1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,64,1,64,1,65,
1,65,1,65,1,66,1,66,1,66,1,66,3,66,715,8,66,1,66,1,66,5,66,719,8,66,10,66,
12,66,722,9,66,1,66,1,66,1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,
68,1,69,1,69,1,69,1,69,1,69,3,69,741,8,69,1,69,1,69,1,70,1,70,1,70,1,70,
1,70,1,70,3,70,751,8,70,1,71,1,71,1,71,1,72,1,72,3,72,758,8,72,1,73,1,73,
3,73,762,8,73,1,74,1,74,1,74,1,74,5,74,768,8,74,10,74,12,74,771,9,74,1,74,
3,74,774,8,74,3,74,776,8,74,1,74,1,74,1,75,3,75,781,8,75,1,75,3,75,784,8,
75,1,75,1,75,1,76,1,76,1,76,1,76,3,76,792,8,76,1,76,1,76,1,76,1,76,1,76,
1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,5,76,809,8,76,10,76,12,
76,812,9,76,1,77,1,77,1,77,1,77,3,77,818,8,77,1,77,1,77,1,77,1,77,1,77,1,
77,1,77,3,77,827,8,77,5,77,829,8,77,10,77,12,77,832,9,77,1,78,1,78,1,78,
1,78,3,78,838,8,78,1,78,1,78,1,79,1,79,1,79,3,79,845,8,79,1,79,1,79,1,79,
1,79,3,79,851,8,79,1,80,1,80,1,80,3,80,856,8,80,1,81,1,81,1,81,1,81,3,81,
862,8,81,1,82,1,82,1,83,1,83,1,84,1,84,1,84,1,84,1,85,1,85,1,85,1,86,1,86,
1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,3,86,885,8,86,3,86,887,8,86,1,87,
1,87,1,87,3,87,892,8,87,3,87,894,8,87,1,87,1,87,1,88,1,88,1,88,5,88,901,
8,88,10,88,12,88,904,9,88,1,89,1,89,1,89,3,89,909,8,89,1,89,1,89,1,90,1,
90,3,90,915,8,90,1,91,1,91,3,91,919,8,91,1,92,1,92,1,92,1,92,1,92,5,92,926,
8,92,10,92,12,92,929,9,92,1,92,1,92,1,93,1,93,1,93,1,93,3,93,937,8,93,1,
93,3,93,940,8,93,1,94,1,94,1,95,3,95,945,8,95,1,95,1,95,3,95,949,8,95,1,
96,1,96,1,96,1,96,1,97,1,97,1,97,1,97,1,98,1,98,3,98,961,8,98,1,98,1,98,
3,98,965,8,98,1,98,3,98,968,8,98,1,98,1,98,1,98,1,98,1,98,3,98,975,8,98,
1,98,1,98,1,99,1,99,1,99,1,99,1,99,1,100,1,100,1,100,1,100,1,100,3,100,989,
8,100,3,100,991,8,100,1,100,3,100,994,8,100,1,100,3,100,997,8,100,3,100,
999,8,100,1,100,1,100,1,101,1,101,1,101,1,101,1,102,1,102,1,102,1,102,3,
102,1011,8,102,1,102,0,2,152,154,103,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,
76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,
118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,
190,192,194,196,198,200,202,204,0,9,2,0,27,27,38,38,1,0,39,40,2,0,51,56,
59,63,1,0,58,64,2,0,52,56,62,63,2,0,51,51,59,61,1,0,45,50,2,0,65,68,72,73,
1,0,79,80,1078,0,206,1,0,0,0,2,230,1,0,0,0,4,233,1,0,0,0,6,248,1,0,0,0,8,
252,1,0,0,0,10,257,1,0,0,0,12,259,1,0,0,0,14,273,1,0,0,0,16,281,1,0,0,0,
18,289,1,0,0,0,20,297,1,0,0,0,22,313,1,0,0,0,24,315,1,0,0,0,26,319,1,0,0,
0,28,325,1,0,0,0,30,336,1,0,0,0,32,339,1,0,0,0,34,348,1,0,0,0,36,352,1,0,
0,0,38,361,1,0,0,0,40,368,1,0,0,0,42,370,1,0,0,0,44,384,1,0,0,0,46,394,1,
0,0,0,48,412,1,0,0,0,50,431,1,0,0,0,52,438,1,0,0,0,54,440,1,0,0,0,56,442,
1,0,0,0,58,446,1,0,0,0,60,449,1,0,0,0,62,454,1,0,0,0,64,458,1,0,0,0,66,462,
1,0,0,0,68,467,1,0,0,0,70,471,1,0,0,0,72,475,1,0,0,0,74,479,1,0,0,0,76,482,
1,0,0,0,78,484,1,0,0,0,80,487,1,0,0,0,82,508,1,0,0,0,84,510,1,0,0,0,86,532,
1,0,0,0,88,540,1,0,0,0,90,542,1,0,0,0,92,564,1,0,0,0,94,572,1,0,0,0,96,580,
1,0,0,0,98,584,1,0,0,0,100,596,1,0,0,0,102,606,1,0,0,0,104,617,1,0,0,0,106,
625,1,0,0,0,108,629,1,0,0,0,110,642,1,0,0,0,112,658,1,0,0,0,114,663,1,0,
0,0,116,675,1,0,0,0,118,677,1,0,0,0,120,686,1,0,0,0,122,696,1,0,0,0,124,
698,1,0,0,0,126,703,1,0,0,0,128,705,1,0,0,0,130,707,1,0,0,0,132,710,1,0,
0,0,134,725,1,0,0,0,136,729,1,0,0,0,138,740,1,0,0,0,140,750,1,0,0,0,142,
752,1,0,0,0,144,755,1,0,0,0,146,761,1,0,0,0,148,763,1,0,0,0,150,780,1,0,
0,0,152,791,1,0,0,0,154,817,1,0,0,0,156,833,1,0,0,0,158,850,1,0,0,0,160,
855,1,0,0,0,162,861,1,0,0,0,164,863,1,0,0,0,166,865,1,0,0,0,168,867,1,0,
0,0,170,871,1,0,0,0,172,886,1,0,0,0,174,888,1,0,0,0,176,897,1,0,0,0,178,
908,1,0,0,0,180,914,1,0,0,0,182,918,1,0,0,0,184,920,1,0,0,0,186,936,1,0,
0,0,188,941,1,0,0,0,190,944,1,0,0,0,192,950,1,0,0,0,194,954,1,0,0,0,196,
958,1,0,0,0,198,978,1,0,0,0,200,983,1,0,0,0,202,1002,1,0,0,0,204,1010,1,
0,0,0,206,207,3,2,1,0,207,213,3,204,102,0,208,209,3,4,2,0,209,210,3,204,
102,0,210,212,1,0,0,0,211,208,1,0,0,0,212,215,1,0,0,0,213,211,1,0,0,0,213,
214,1,0,0,0,214,225,1,0,0,0,215,213,1,0,0,0,216,220,3,36,18,0,217,220,3,
38,19,0,218,220,3,10,5,0,219,216,1,0,0,0,219,217,1,0,0,0,219,218,1,0,0,0,
220,221,1,0,0,0,221,222,3,204,102,0,222,224,1,0,0,0,223,219,1,0,0,0,224,
227,1,0,0,0,225,223,1,0,0,0,225,226,1,0,0,0,226,228,1,0,0,0,227,225,1,0,
0,0,228,229,5,0,0,1,229,1,1,0,0,0,230,231,5,14,0,0,231,232,5,27,0,0,232,
3,1,0,0,0,233,245,5,23,0,0,234,246,3,6,3,0,235,241,5,28,0,0,236,237,3,6,
3,0,237,238,3,204,102,0,238,240,1,0,0,0,239,236,1,0,0,0,240,243,1,0,0,0,
241,239,1,0,0,0,241,242,1,0,0,0,242,244,1,0,0,0,243,241,1,0,0,0,244,246,
5,29,0,0,245,234,1,0,0,0,245,235,1,0,0,0,246,5,1,0,0,0,247,249,7,0,0,0,248,
247,1,0,0,0,248,249,1,0,0,0,249,250,1,0,0,0,250,251,3,8,4,0,251,7,1,0,0,
0,252,253,3,188,94,0,253,9,1,0,0,0,254,258,3,12,6,0,255,258,3,20,10,0,256,
258,3,42,21,0,257,254,1,0,0,0,257,255,1,0,0,0,257,256,1,0,0,0,258,11,1,0,
0,0,259,271,5,16,0,0,260,272,3,14,7,0,261,267,5,28,0,0,262,263,3,14,7,0,
263,264,3,204,102,0,264,266,1,0,0,0,265,262,1,0,0,0,266,269,1,0,0,0,267,
265,1,0,0,0,267,268,1,0,0,0,268,270,1,0,0,0,269,267,1,0,0,0,270,272,5,29,
0,0,271,260,1,0,0,0,271,261,1,0,0,0,272,13,1,0,0,0,273,279,3,16,8,0,274,
276,3,116,58,0,275,274,1,0,0,0,275,276,1,0,0,0,276,277,1,0,0,0,277,278,5,
34,0,0,278,280,3,18,9,0,279,275,1,0,0,0,279,280,1,0,0,0,280,15,1,0,0,0,281,
286,5,27,0,0,282,283,5,35,0,0,283,285,5,27,0,0,284,282,1,0,0,0,285,288,1,
0,0,0,286,284,1,0,0,0,286,287,1,0,0,0,287,17,1,0,0,0,288,286,1,0,0,0,289,
294,3,152,76,0,290,291,5,35,0,0,291,293,3,152,76,0,292,290,1,0,0,0,293,296,
1,0,0,0,294,292,1,0,0,0,294,295,1,0,0,0,295,19,1,0,0,0,296,294,1,0,0,0,297,
309,5,20,0,0,298,310,3,22,11,0,299,305,5,28,0,0,300,301,3,22,11,0,301,302,
3,204,102,0,302,304,1,0,0,0,303,300,1,0,0,0,304,307,1,0,0,0,305,303,1,0,
0,0,305,306,1,0,0,0,306,308,1,0,0,0,307,305,1,0,0,0,308,310,5,29,0,0,309,
298,1,0,0,0,309,299,1,0,0,0,310,21,1,0,0,0,311,314,3,24,12,0,312,314,3,26,
13,0,313,311,1,0,0,0,313,312,1,0,0,0,314,23,1,0,0,0,315,316,5,27,0,0,316,
317,5,34,0,0,317,318,3,116,58,0,318,25,1,0,0,0,319,321,5,27,0,0,320,322,
3,28,14,0,321,320,1,0,0,0,321,322,1,0,0,0,322,323,1,0,0,0,323,324,3,116,
58,0,324,27,1,0,0,0,325,326,5,32,0,0,326,331,3,30,15,0,327,328,5,35,0,0,
328,330,3,30,15,0,329,327,1,0,0,0,330,333,1,0,0,0,331,329,1,0,0,0,331,332,
1,0,0,0,332,334,1,0,0,0,333,331,1,0,0,0,334,335,5,33,0,0,335,29,1,0,0,0,
336,337,3,16,8,0,337,338,3,32,16,0,338,31,1,0,0,0,339,344,3,34,17,0,340,
341,5,51,0,0,341,343,3,34,17,0,342,340,1,0,0,0,343,346,1,0,0,0,344,342,1,
0,0,0,344,345,1,0,0,0,345,33,1,0,0,0,346,344,1,0,0,0,347,349,5,57,0,0,348,
347,1,0,0,0,348,349,1,0,0,0,349,350,1,0,0,0,350,351,3,116,58,0,351,35,1,
0,0,0,352,353,5,3,0,0,353,355,5,27,0,0,354,356,3,28,14,0,355,354,1,0,0,0,
355,356,1,0,0,0,356,357,1,0,0,0,357,359,3,144,72,0,358,360,3,46,23,0,359,
358,1,0,0,0,359,360,1,0,0,0,360,37,1,0,0,0,361,362,5,3,0,0,362,363,3,40,
20,0,363,364,5,27,0,0,364,366,3,144,72,0,365,367,3,46,23,0,366,365,1,0,0,
0,366,367,1,0,0,0,367,39,1,0,0,0,368,369,3,148,74,0,369,41,1,0,0,0,370,382,
5,25,0,0,371,383,3,44,22,0,372,378,5,28,0,0,373,374,3,44,22,0,374,375,3,
204,102,0,375,377,1,0,0,0,376,373,1,0,0,0,377,380,1,0,0,0,378,376,1,0,0,
0,378,379,1,0,0,0,379,381,1,0,0,0,380,378,1,0,0,0,381,383,5,29,0,0,382,371,
1,0,0,0,382,372,1,0,0,0,383,43,1,0,0,0,384,392,3,16,8,0,385,388,3,116,58,
0,386,387,5,34,0,0,387,389,3,18,9,0,388,386,1,0,0,0,388,389,1,0,0,0,389,
393,1,0,0,0,390,391,5,34,0,0,391,393,3,18,9,0,392,385,1,0,0,0,392,390,1,
0,0,0,393,45,1,0,0,0,394,396,5,30,0,0,395,397,3,48,24,0,396,395,1,0,0,0,
396,397,1,0,0,0,397,398,1,0,0,0,398,399,5,31,0,0,399,47,1,0,0,0,400,402,
5,36,0,0,401,400,1,0,0,0,401,402,1,0,0,0,402,408,1,0,0,0,403,405,5,88,0,
0,404,403,1,0,0,0,404,405,1,0,0,0,405,408,1,0,0,0,406,408,4,24,0,0,407,401,
1,0,0,0,407,404,1,0,0,0,407,406,1,0,0,0,408,409,1,0,0,0,409,410,3,50,25,
0,410,411,3,204,102,0,411,413,1,0,0,0,412,407,1,0,0,0,413,414,1,0,0,0,414,
412,1,0,0,0,414,415,1,0,0,0,415,49,1,0,0,0,416,432,3,10,5,0,417,432,3,66,
33,0,418,432,3,52,26,0,419,432,3,114,57,0,420,432,3,68,34,0,421,432,3,70,
35,0,422,432,3,72,36,0,423,432,3,74,37,0,424,432,3,76,38,0,425,432,3,46,
23,0,426,432,3,80,40,0,427,432,3,82,41,0,428,432,3,100,50,0,429,432,3,108,
54,0,430,432,3,78,39,0,431,416,1,0,0,0,431,417,1,0,0,0,431,418,1,0,0,0,431,
419,1,0,0,0,431,420,1,0,0,0,431,421,1,0,0,0,431,422,1,0,0,0,431,423,1,0,
0,0,431,424,1,0,0,0,431,425,1,0,0,0,431,426,1,0,0,0,431,427,1,0,0,0,431,
428,1,0,0,0,431,429,1,0,0,0,431,430,1,0,0,0,432,51,1,0,0,0,433,439,3,56,
28,0,434,439,3,58,29,0,435,439,3,60,30,0,436,439,3,54,27,0,437,439,3,64,
32,0,438,433,1,0,0,0,438,434,1,0,0,0,438,435,1,0,0,0,438,436,1,0,0,0,438,
437,1,0,0,0,439,53,1,0,0,0,440,441,3,152,76,0,441,55,1,0,0,0,442,443,3,152,
76,0,443,444,5,64,0,0,444,445,3,152,76,0,445,57,1,0,0,0,446,447,3,152,76,
0,447,448,7,1,0,0,448,59,1,0,0,0,449,450,3,18,9,0,450,451,3,62,31,0,451,
452,3,18,9,0,452,61,1,0,0,0,453,455,7,2,0,0,454,453,1,0,0,0,454,455,1,0,
0,0,455,456,1,0,0,0,456,457,5,34,0,0,457,63,1,0,0,0,458,459,3,16,8,0,459,
460,5,41,0,0,460,461,3,18,9,0,461,65,1,0,0,0,462,463,5,27,0,0,463,465,5,
37,0,0,464,466,3,50,25,0,465,464,1,0,0,0,465,466,1,0,0,0,466,67,1,0,0,0,
467,469,5,24,0,0,468,470,3,18,9,0,469,468,1,0,0,0,469,470,1,0,0,0,470,69,
1,0,0,0,471,473,5,1,0,0,472,474,5,27,0,0,473,472,1,0,0,0,473,474,1,0,0,0,
474,71,1,0,0,0,475,477,5,21,0,0,476,478,5,27,0,0,477,476,1,0,0,0,477,478,
1,0,0,0,478,73,1,0,0,0,479,480,5,13,0,0,480,481,5,27,0,0,481,75,1,0,0,0,
482,483,5,17,0,0,483,77,1,0,0,0,484,485,5,7,0,0,485,486,3,152,76,0,486,79,
1,0,0,0,487,496,5,18,0,0,488,497,3,152,76,0,489,490,3,204,102,0,490,491,
3,152,76,0,491,497,1,0,0,0,492,493,3,52,26,0,493,494,3,204,102,0,494,495,
3,152,76,0,495,497,1,0,0,0,496,488,1,0,0,0,496,489,1,0,0,0,496,492,1,0,0,
0,497,498,1,0,0,0,498,504,3,46,23,0,499,502,5,12,0,0,500,503,3,80,40,0,501,
503,3,46,23,0,502,500,1,0,0,0,502,501,1,0,0,0,503,505,1,0,0,0,504,499,1,
0,0,0,504,505,1,0,0,0,505,81,1,0,0,0,506,509,3,84,42,0,507,509,3,90,45,0,
508,506,1,0,0,0,508,507,1,0,0,0,509,83,1,0,0,0,510,521,5,15,0,0,511,513,
3,152,76,0,512,511,1,0,0,0,512,513,1,0,0,0,513,522,1,0,0,0,514,516,3,52,
26,0,515,514,1,0,0,0,515,516,1,0,0,0,516,517,1,0,0,0,517,519,3,204,102,0,
518,520,3,152,76,0,519,518,1,0,0,0,519,520,1,0,0,0,520,522,1,0,0,0,521,512,
1,0,0,0,521,515,1,0,0,0,522,523,1,0,0,0,523,527,5,30,0,0,524,526,3,86,43,
0,525,524,1,0,0,0,526,529,1,0,0,0,527,525,1,0,0,0,527,528,1,0,0,0,528,530,
1,0,0,0,529,527,1,0,0,0,530,531,5,31,0,0,531,85,1,0,0,0,532,533,3,88,44,
0,533,535,5,37,0,0,534,536,3,48,24,0,535,534,1,0,0,0,535,536,1,0,0,0,536,
87,1,0,0,0,537,538,5,6,0,0,538,541,3,18,9,0,539,541,5,2,0,0,540,537,1,0,
0,0,540,539,1,0,0,0,541,89,1,0,0,0,542,551,5,15,0,0,543,552,3,92,46,0,544,
545,3,204,102,0,545,546,3,92,46,0,546,552,1,0,0,0,547,548,3,52,26,0,548,
549,3,204,102,0,549,550,3,92,46,0,550,552,1,0,0,0,551,543,1,0,0,0,551,544,
1,0,0,0,551,547,1,0,0,0,552,553,1,0,0,0,553,557,5,30,0,0,554,556,3,94,47,
0,555,554,1,0,0,0,556,559,1,0,0,0,557,555,1,0,0,0,557,558,1,0,0,0,558,560,
1,0,0,0,559,557,1,0,0,0,560,561,5,31,0,0,561,91,1,0,0,0,562,563,5,27,0,0,
563,565,5,41,0,0,564,562,1,0,0,0,564,565,1,0,0,0,565,566,1,0,0,0,566,567,
3,154,77,0,567,568,5,38,0,0,568,569,5,28,0,0,569,570,5,20,0,0,570,571,5,
29,0,0,571,93,1,0,0,0,572,573,3,96,48,0,573,575,5,37,0,0,574,576,3,48,24,
0,575,574,1,0,0,0,575,576,1,0,0,0,576,95,1,0,0,0,577,578,5,6,0,0,578,581,
3,98,49,0,579,581,5,2,0,0,580,577,1,0,0,0,580,579,1,0,0,0,581,97,1,0,0,0,
582,585,3,116,58,0,583,585,5,26,0,0,584,582,1,0,0,0,584,583,1,0,0,0,585,
593,1,0,0,0,586,589,5,35,0,0,587,590,3,116,58,0,588,590,5,26,0,0,589,587,
1,0,0,0,589,588,1,0,0,0,590,592,1,0,0,0,591,586,1,0,0,0,592,595,1,0,0,0,
593,591,1,0,0,0,593,594,1,0,0,0,594,99,1,0,0,0,595,593,1,0,0,0,596,597,5,
5,0,0,597,601,5,30,0,0,598,600,3,102,51,0,599,598,1,0,0,0,600,603,1,0,0,
0,601,599,1,0,0,0,601,602,1,0,0,0,602,604,1,0,0,0,603,601,1,0,0,0,604,605,
5,31,0,0,605,101,1,0,0,0,606,607,3,104,52,0,607,609,5,37,0,0,608,610,3,48,
24,0,609,608,1,0,0,0,609,610,1,0,0,0,610,103,1,0,0,0,611,614,5,6,0,0,612,
615,3,56,28,0,613,615,3,106,53,0,614,612,1,0,0,0,614,613,1,0,0,0,615,618,
1,0,0,0,616,618,5,2,0,0,617,611,1,0,0,0,617,616,1,0,0,0,618,105,1,0,0,0,
619,620,3,18,9,0,620,621,5,34,0,0,621,626,1,0,0,0,622,623,3,16,8,0,623,624,
5,41,0,0,624,626,1,0,0,0,625,619,1,0,0,0,625,622,1,0,0,0,625,626,1,0,0,0,
626,627,1,0,0,0,627,628,3,152,76,0,628,107,1,0,0,0,629,637,5,22,0,0,630,
632,3,152,76,0,631,630,1,0,0,0,631,632,1,0,0,0,632,638,1,0,0,0,633,638,3,
110,55,0,634,636,3,112,56,0,635,634,1,0,0,0,635,636,1,0,0,0,636,638,1,0,
0,0,637,631,1,0,0,0,637,633,1,0,0,0,637,635,1,0,0,0,638,639,1,0,0,0,639,
640,3,46,23,0,640,109,1,0,0,0,641,643,3,52,26,0,642,641,1,0,0,0,642,643,
1,0,0,0,643,644,1,0,0,0,644,646,3,204,102,0,645,647,3,152,76,0,646,645,1,
0,0,0,646,647,1,0,0,0,647,648,1,0,0,0,648,650,3,204,102,0,649,651,3,52,26,
0,650,649,1,0,0,0,650,651,1,0,0,0,651,111,1,0,0,0,652,653,3,18,9,0,653,654,
5,34,0,0,654,659,1,0,0,0,655,656,3,16,8,0,656,657,5,41,0,0,657,659,1,0,0,
0,658,652,1,0,0,0,658,655,1,0,0,0,658,659,1,0,0,0,659,660,1,0,0,0,660,661,
5,19,0,0,661,662,3,152,76,0,662,113,1,0,0,0,663,664,5,8,0,0,664,665,3,152,
76,0,665,115,1,0,0,0,666,668,3,120,60,0,667,669,3,118,59,0,668,667,1,0,0,
0,668,669,1,0,0,0,669,676,1,0,0,0,670,676,3,122,61,0,671,672,5,28,0,0,672,
673,3,116,58,0,673,674,5,29,0,0,674,676,1,0,0,0,675,666,1,0,0,0,675,670,
1,0,0,0,675,671,1,0,0,0,676,117,1,0,0,0,677,678,5,32,0,0,678,680,3,98,49,
0,679,681,5,35,0,0,680,679,1,0,0,0,680,681,1,0,0,0,681,682,1,0,0,0,682,683,
5,33,0,0,683,119,1,0,0,0,684,687,3,168,84,0,685,687,5,27,0,0,686,684,1,0,
0,0,686,685,1,0,0,0,687,121,1,0,0,0,688,697,3,124,62,0,689,697,3,184,92,
0,690,697,3,130,65,0,691,697,3,142,71,0,692,697,3,132,66,0,693,697,3,134,
67,0,694,697,3,136,68,0,695,697,3,138,69,0,696,688,1,0,0,0,696,689,1,0,0,
0,696,690,1,0,0,0,696,691,1,0,0,0,696,692,1,0,0,0,696,693,1,0,0,0,696,694,
1,0,0,0,696,695,1,0,0,0,697,123,1,0,0,0,698,699,5,32,0,0,699,700,3,126,63,
0,700,701,5,33,0,0,701,702,3,128,64,0,702,125,1,0,0,0,703,704,3,152,76,0,
704,127,1,0,0,0,705,706,3,116,58,0,706,129,1,0,0,0,707,708,5,62,0,0,708,
709,3,116,58,0,709,131,1,0,0,0,710,711,5,4,0,0,711,720,5,30,0,0,712,715,
3,140,70,0,713,715,3,32,16,0,714,712,1,0,0,0,714,713,1,0,0,0,715,716,1,0,
0,0,716,717,3,204,102,0,717,719,1,0,0,0,718,714,1,0,0,0,719,722,1,0,0,0,
720,718,1,0,0,0,720,721,1,0,0,0,721,723,1,0,0,0,722,720,1,0,0,0,723,724,
5,31,0,0,724,133,1,0,0,0,725,726,5,32,0,0,726,727,5,33,0,0,727,728,3,128,
64,0,728,135,1,0,0,0,729,730,5,9,0,0,730,731,5,32,0,0,731,732,3,116,58,0,
732,733,5,33,0,0,733,734,3,128,64,0,734,137,1,0,0,0,735,741,5,11,0,0,736,
737,5,11,0,0,737,741,5,64,0,0,738,739,5,64,0,0,739,741,5,11,0,0,740,735,
1,0,0,0,740,736,1,0,0,0,740,738,1,0,0,0,741,742,1,0,0,0,742,743,3,128,64,
0,743,139,1,0,0,0,744,745,5,27,0,0,745,746,3,148,74,0,746,747,3,146,73,0,
747,751,1,0,0,0,748,749,5,27,0,0,749,751,3,148,74,0,750,744,1,0,0,0,750,
748,1,0,0,0,751,141,1,0,0,0,752,753,5,3,0,0,753,754,3,144,72,0,754,143,1,
0,0,0,755,757,3,148,74,0,756,758,3,146,73,0,757,756,1,0,0,0,757,758,1,0,
0,0,758,145,1,0,0,0,759,762,3,148,74,0,760,762,3,116,58,0,761,759,1,0,0,
0,761,760,1,0,0,0,762,147,1,0,0,0,763,775,5,28,0,0,764,769,3,150,75,0,765,
766,5,35,0,0,766,768,3,150,75,0,767,765,1,0,0,0,768,771,1,0,0,0,769,767,
1,0,0,0,769,770,1,0,0,0,770,773,1,0,0,0,771,769,1,0,0,0,772,774,5,35,0,0,
773,772,1,0,0,0,773,774,1,0,0,0,774,776,1,0,0,0,775,764,1,0,0,0,775,776,
1,0,0,0,776,777,1,0,0,0,777,778,5,29,0,0,778,149,1,0,0,0,779,781,3,16,8,
0,780,779,1,0,0,0,780,781,1,0,0,0,781,783,1,0,0,0,782,784,5,42,0,0,783,782,
1,0,0,0,783,784,1,0,0,0,784,785,1,0,0,0,785,786,3,116,58,0,786,151,1,0,0,
0,787,788,6,76,-1,0,788,792,3,154,77,0,789,790,7,3,0,0,790,792,3,152,76,
6,791,787,1,0,0,0,791,789,1,0,0,0,792,810,1,0,0,0,793,794,10,5,0,0,794,795,
7,4,0,0,795,809,3,152,76,6,796,797,10,4,0,0,797,798,7,5,0,0,798,809,3,152,
76,5,799,800,10,3,0,0,800,801,7,6,0,0,801,809,3,152,76,4,802,803,10,2,0,
0,803,804,5,44,0,0,804,809,3,152,76,3,805,806,10,1,0,0,806,807,5,43,0,0,
807,809,3,152,76,2,808,793,1,0,0,0,808,796,1,0,0,0,808,799,1,0,0,0,808,802,
1,0,0,0,808,805,1,0,0,0,809,812,1,0,0,0,810,808,1,0,0,0,810,811,1,0,0,0,
811,153,1,0,0,0,812,810,1,0,0,0,813,814,6,77,-1,0,814,818,3,158,79,0,815,
818,3,156,78,0,816,818,3,202,101,0,817,813,1,0,0,0,817,815,1,0,0,0,817,816,
1,0,0,0,818,830,1,0,0,0,819,826,10,1,0,0,820,821,5,38,0,0,821,827,5,27,0,
0,822,827,3,194,97,0,823,827,3,196,98,0,824,827,3,198,99,0,825,827,3,200,
100,0,826,820,1,0,0,0,826,822,1,0,0,0,826,823,1,0,0,0,826,824,1,0,0,0,826,
825,1,0,0,0,827,829,1,0,0,0,828,819,1,0,0,0,829,832,1,0,0,0,830,828,1,0,
0,0,830,831,1,0,0,0,831,155,1,0,0,0,832,830,1,0,0,0,833,834,3,116,58,0,834,
835,5,28,0,0,835,837,3,152,76,0,836,838,5,35,0,0,837,836,1,0,0,0,837,838,
1,0,0,0,838,839,1,0,0,0,839,840,5,29,0,0,840,157,1,0,0,0,841,851,3,160,80,
0,842,844,3,166,83,0,843,845,3,118,59,0,844,843,1,0,0,0,844,845,1,0,0,0,
845,851,1,0,0,0,846,847,5,28,0,0,847,848,3,152,76,0,848,849,5,29,0,0,849,
851,1,0,0,0,850,841,1,0,0,0,850,842,1,0,0,0,850,846,1,0,0,0,851,159,1,0,
0,0,852,856,3,162,81,0,853,856,3,170,85,0,854,856,3,192,96,0,855,852,1,0,
0,0,855,853,1,0,0,0,855,854,1,0,0,0,856,161,1,0,0,0,857,862,5,26,0,0,858,
862,3,164,82,0,859,862,3,188,94,0,860,862,5,69,0,0,861,857,1,0,0,0,861,858,
1,0,0,0,861,859,1,0,0,0,861,860,1,0,0,0,862,163,1,0,0,0,863,864,7,7,0,0,
864,165,1,0,0,0,865,866,5,27,0,0,866,167,1,0,0,0,867,868,5,27,0,0,868,869,
5,38,0,0,869,870,5,27,0,0,870,169,1,0,0,0,871,872,3,172,86,0,872,873,3,174,
87,0,873,171,1,0,0,0,874,887,3,184,92,0,875,887,3,124,62,0,876,877,5,32,
0,0,877,878,5,42,0,0,878,879,5,33,0,0,879,887,3,128,64,0,880,887,3,134,67,
0,881,887,3,136,68,0,882,884,3,120,60,0,883,885,3,118,59,0,884,883,1,0,0,
0,884,885,1,0,0,0,885,887,1,0,0,0,886,874,1,0,0,0,886,875,1,0,0,0,886,876,
1,0,0,0,886,880,1,0,0,0,886,881,1,0,0,0,886,882,1,0,0,0,887,173,1,0,0,0,
888,893,5,30,0,0,889,891,3,176,88,0,890,892,5,35,0,0,891,890,1,0,0,0,891,
892,1,0,0,0,892,894,1,0,0,0,893,889,1,0,0,0,893,894,1,0,0,0,894,895,1,0,
0,0,895,896,5,31,0,0,896,175,1,0,0,0,897,902,3,178,89,0,898,899,5,35,0,0,
899,901,3,178,89,0,900,898,1,0,0,0,901,904,1,0,0,0,902,900,1,0,0,0,902,903,
1,0,0,0,903,177,1,0,0,0,904,902,1,0,0,0,905,906,3,180,90,0,906,907,5,37,
0,0,907,909,1,0,0,0,908,905,1,0,0,0,908,909,1,0,0,0,909,910,1,0,0,0,910,
911,3,182,91,0,911,179,1,0,0,0,912,915,3,152,76,0,913,915,3,174,87,0,914,
912,1,0,0,0,914,913,1,0,0,0,915,181,1,0,0,0,916,919,3,152,76,0,917,919,3,
174,87,0,918,916,1,0,0,0,918,917,1,0,0,0,919,183,1,0,0,0,920,921,5,10,0,
0,921,927,5,30,0,0,922,923,3,186,93,0,923,924,3,204,102,0,924,926,1,0,0,
0,925,922,1,0,0,0,926,929,1,0,0,0,927,925,1,0,0,0,927,928,1,0,0,0,928,930,
1,0,0,0,929,927,1,0,0,0,930,931,5,31,0,0,931,185,1,0,0,0,932,933,3,16,8,
0,933,934,3,116,58,0,934,937,1,0,0,0,935,937,3,190,95,0,936,932,1,0,0,0,
936,935,1,0,0,0,937,939,1,0,0,0,938,940,3,188,94,0,939,938,1,0,0,0,939,940,
1,0,0,0,940,187,1,0,0,0,941,942,7,8,0,0,942,189,1,0,0,0,943,945,5,62,0,0,
944,943,1,0,0,0,944,945,1,0,0,0,945,946,1,0,0,0,946,948,3,120,60,0,947,949,
3,118,59,0,948,947,1,0,0,0,948,949,1,0,0,0,949,191,1,0,0,0,950,951,5,3,0,
0,951,952,3,144,72,0,952,953,3,46,23,0,953,193,1,0,0,0,954,955,5,32,0,0,
955,956,3,152,76,0,956,957,5,33,0,0,957,195,1,0,0,0,958,974,5,32,0,0,959,
961,3,152,76,0,960,959,1,0,0,0,960,961,1,0,0,0,961,962,1,0,0,0,962,964,5,
37,0,0,963,965,3,152,76,0,964,963,1,0,0,0,964,965,1,0,0,0,965,975,1,0,0,
0,966,968,3,152,76,0,967,966,1,0,0,0,967,968,1,0,0,0,968,969,1,0,0,0,969,
970,5,37,0,0,970,971,3,152,76,0,971,972,5,37,0,0,972,973,3,152,76,0,973,
975,1,0,0,0,974,960,1,0,0,0,974,967,1,0,0,0,975,976,1,0,0,0,976,977,5,33,
0,0,977,197,1,0,0,0,978,979,5,38,0,0,979,980,5,28,0,0,980,981,3,116,58,0,
981,982,5,29,0,0,982,199,1,0,0,0,983,998,5,28,0,0,984,991,3,18,9,0,985,988,
3,116,58,0,986,987,5,35,0,0,987,989,3,18,9,0,988,986,1,0,0,0,988,989,1,0,
0,0,989,991,1,0,0,0,990,984,1,0,0,0,990,985,1,0,0,0,991,993,1,0,0,0,992,
994,5,42,0,0,993,992,1,0,0,0,993,994,1,0,0,0,994,996,1,0,0,0,995,997,5,35,
0,0,996,995,1,0,0,0,996,997,1,0,0,0,997,999,1,0,0,0,998,990,1,0,0,0,998,
999,1,0,0,0,999,1000,1,0,0,0,1000,1001,5,29,0,0,1001,201,1,0,0,0,1002,1003,
3,116,58,0,1003,1004,5,38,0,0,1004,1005,5,27,0,0,1005,203,1,0,0,0,1006,1011,
5,36,0,0,1007,1011,5,0,0,1,1008,1011,5,88,0,0,1009,1011,4,102,7,0,1010,1006,
1,0,0,0,1010,1007,1,0,0,0,1010,1008,1,0,0,0,1010,1009,1,0,0,0,1011,205,1,
0,0,0,120,213,219,225,241,245,248,257,267,271,275,279,286,294,305,309,313,
321,331,344,348,355,359,366,378,382,388,392,396,401,404,407,414,431,438,
454,465,469,473,477,496,502,504,508,512,515,519,521,527,535,540,551,557,
564,575,580,584,589,593,601,609,614,617,625,631,635,637,642,646,650,658,
668,675,680,686,696,714,720,740,750,757,761,769,773,775,780,783,791,808,
810,817,826,830,837,844,850,855,861,884,886,891,893,902,908,914,918,927,
936,939,944,948,960,964,967,974,988,990,993,996,998,1010];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class GoParser extends GoParserBase {

    static grammarFileName = "GoParser.g4";
    static literalNames = [ null, "'break'", "'default'", "'func'", "'interface'", 
                            "'select'", "'case'", "'defer'", "'go'", "'map'", 
                            "'struct'", "'chan'", "'else'", "'goto'", "'package'", 
                            "'switch'", "'const'", "'fallthrough'", "'if'", 
                            "'range'", "'type'", "'continue'", "'for'", 
                            "'import'", "'return'", "'var'", "'nil'", null, 
                            "'('", "')'", "'{'", "'}'", "'['", "']'", "'='", 
                            "','", "';'", "':'", "'.'", "'++'", "'--'", 
                            "':='", "'...'", "'||'", "'&&'", "'=='", "'!='", 
                            "'<'", "'<='", "'>'", "'>='", "'|'", "'/'", 
                            "'%'", "'<<'", "'>>'", "'&^'", "'~'", "'!'", 
                            "'+'", "'-'", "'^'", "'*'", "'&'", "'<-'" ];
    static symbolicNames = [ null, "BREAK", "DEFAULT", "FUNC", "INTERFACE", 
                             "SELECT", "CASE", "DEFER", "GO", "MAP", "STRUCT", 
                             "CHAN", "ELSE", "GOTO", "PACKAGE", "SWITCH", 
                             "CONST", "FALLTHROUGH", "IF", "RANGE", "TYPE", 
                             "CONTINUE", "FOR", "IMPORT", "RETURN", "VAR", 
                             "NIL_LIT", "IDENTIFIER", "L_PAREN", "R_PAREN", 
                             "L_CURLY", "R_CURLY", "L_BRACKET", "R_BRACKET", 
                             "ASSIGN", "COMMA", "SEMI", "COLON", "DOT", 
                             "PLUS_PLUS", "MINUS_MINUS", "DECLARE_ASSIGN", 
                             "ELLIPSIS", "LOGICAL_OR", "LOGICAL_AND", "EQUALS", 
                             "NOT_EQUALS", "LESS", "LESS_OR_EQUALS", "GREATER", 
                             "GREATER_OR_EQUALS", "OR", "DIV", "MOD", "LSHIFT", 
                             "RSHIFT", "BIT_CLEAR", "UNDERLYING", "EXCLAMATION", 
                             "PLUS", "MINUS", "CARET", "STAR", "AMPERSAND", 
                             "RECEIVE", "DECIMAL_LIT", "BINARY_LIT", "OCTAL_LIT", 
                             "HEX_LIT", "FLOAT_LIT", "DECIMAL_FLOAT_LIT", 
                             "HEX_FLOAT_LIT", "IMAGINARY_LIT", "RUNE_LIT", 
                             "BYTE_VALUE", "OCTAL_BYTE_VALUE", "HEX_BYTE_VALUE", 
                             "LITTLE_U_VALUE", "BIG_U_VALUE", "RAW_STRING_LIT", 
                             "INTERPRETED_STRING_LIT", "WS", "COMMENT", 
                             "TERMINATOR", "LINE_COMMENT", "WS_NLSEMI", 
                             "COMMENT_NLSEMI", "LINE_COMMENT_NLSEMI", "EOS", 
                             "OTHER" ];
    static ruleNames = [ "sourceFile", "packageClause", "importDecl", "importSpec", 
                         "importPath", "declaration", "constDecl", "constSpec", 
                         "identifierList", "expressionList", "typeDecl", 
                         "typeSpec", "aliasDecl", "typeDef", "typeParameters", 
                         "typeParameterDecl", "typeElement", "typeTerm", 
                         "functionDecl", "methodDecl", "receiver", "varDecl", 
                         "varSpec", "block", "statementList", "statement", 
                         "simpleStmt", "expressionStmt", "sendStmt", "incDecStmt", 
                         "assignment", "assign_op", "shortVarDecl", "labeledStmt", 
                         "returnStmt", "breakStmt", "continueStmt", "gotoStmt", 
                         "fallthroughStmt", "deferStmt", "ifStmt", "switchStmt", 
                         "exprSwitchStmt", "exprCaseClause", "exprSwitchCase", 
                         "typeSwitchStmt", "typeSwitchGuard", "typeCaseClause", 
                         "typeSwitchCase", "typeList", "selectStmt", "commClause", 
                         "commCase", "recvStmt", "forStmt", "forClause", 
                         "rangeClause", "goStmt", "type_", "typeArgs", "typeName", 
                         "typeLit", "arrayType", "arrayLength", "elementType", 
                         "pointerType", "interfaceType", "sliceType", "mapType", 
                         "channelType", "methodSpec", "functionType", "signature", 
                         "result", "parameters", "parameterDecl", "expression", 
                         "primaryExpr", "conversion", "operand", "literal", 
                         "basicLit", "integer", "operandName", "qualifiedIdent", 
                         "compositeLit", "literalType", "literalValue", 
                         "elementList", "keyedElement", "key", "element", 
                         "structType", "fieldDecl", "string_", "embeddedField", 
                         "functionLit", "index", "slice_", "typeAssertion", 
                         "arguments", "methodExpr", "eos" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = GoParser.ruleNames;
        this.literalNames = GoParser.literalNames;
        this.symbolicNames = GoParser.symbolicNames;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 24:
    	    		return this.statementList_sempred(localctx, predIndex);
    	case 76:
    	    		return this.expression_sempred(localctx, predIndex);
    	case 77:
    	    		return this.primaryExpr_sempred(localctx, predIndex);
    	case 102:
    	    		return this.eos_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    statementList_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.closingBracket();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 5);
    		case 2:
    			return this.precpred(this._ctx, 4);
    		case 3:
    			return this.precpred(this._ctx, 3);
    		case 4:
    			return this.precpred(this._ctx, 2);
    		case 5:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    primaryExpr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 6:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    eos_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 7:
    			return this.closingBracket();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	sourceFile() {
	    let localctx = new SourceFileContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, GoParser.RULE_sourceFile);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 206;
	        this.packageClause();
	        this.state = 207;
	        this.eos();
	        this.state = 213;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23) {
	            this.state = 208;
	            this.importDecl();
	            this.state = 209;
	            this.eos();
	            this.state = 215;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 225;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 34668552) !== 0)) {
	            this.state = 219;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 216;
	                this.functionDecl();
	                break;

	            case 2:
	                this.state = 217;
	                this.methodDecl();
	                break;

	            case 3:
	                this.state = 218;
	                this.declaration();
	                break;

	            }
	            this.state = 221;
	            this.eos();
	            this.state = 227;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 228;
	        this.match(GoParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	packageClause() {
	    let localctx = new PackageClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, GoParser.RULE_packageClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 230;
	        this.match(GoParser.PACKAGE);
	        this.state = 231;
	        localctx.packageName = this.match(GoParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importDecl() {
	    let localctx = new ImportDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, GoParser.RULE_importDecl);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 233;
	        this.match(GoParser.IMPORT);
	        this.state = 245;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 27:
	        case 38:
	        case 79:
	        case 80:
	            this.state = 234;
	            this.importSpec();
	            break;
	        case 28:
	            this.state = 235;
	            this.match(GoParser.L_PAREN);
	            this.state = 241;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===27 || _la===38 || _la===79 || _la===80) {
	                this.state = 236;
	                this.importSpec();
	                this.state = 237;
	                this.eos();
	                this.state = 243;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 244;
	            this.match(GoParser.R_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importSpec() {
	    let localctx = new ImportSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, GoParser.RULE_importSpec);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 248;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===27 || _la===38) {
	            this.state = 247;
	            localctx.alias = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===27 || _la===38)) {
	                localctx.alias = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 250;
	        this.importPath();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importPath() {
	    let localctx = new ImportPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, GoParser.RULE_importPath);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 252;
	        this.string_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaration() {
	    let localctx = new DeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, GoParser.RULE_declaration);
	    try {
	        this.state = 257;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 16:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 254;
	            this.constDecl();
	            break;
	        case 20:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 255;
	            this.typeDecl();
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 256;
	            this.varDecl();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constDecl() {
	    let localctx = new ConstDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, GoParser.RULE_constDecl);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 259;
	        this.match(GoParser.CONST);
	        this.state = 271;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 27:
	            this.state = 260;
	            this.constSpec();
	            break;
	        case 28:
	            this.state = 261;
	            this.match(GoParser.L_PAREN);
	            this.state = 267;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===27) {
	                this.state = 262;
	                this.constSpec();
	                this.state = 263;
	                this.eos();
	                this.state = 269;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 270;
	            this.match(GoParser.R_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constSpec() {
	    let localctx = new ConstSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, GoParser.RULE_constSpec);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 273;
	        this.identifierList();
	        this.state = 279;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
	        if(la_===1) {
	            this.state = 275;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 3)) & ~0x1f) === 0 && ((1 << (_la - 3)) & 587203011) !== 0) || _la===62 || _la===64) {
	                this.state = 274;
	                this.type_();
	            }

	            this.state = 277;
	            this.match(GoParser.ASSIGN);
	            this.state = 278;
	            this.expressionList();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierList() {
	    let localctx = new IdentifierListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, GoParser.RULE_identifierList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 281;
	        this.match(GoParser.IDENTIFIER);
	        this.state = 286;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,11,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 282;
	                this.match(GoParser.COMMA);
	                this.state = 283;
	                this.match(GoParser.IDENTIFIER); 
	            }
	            this.state = 288;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,11,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionList() {
	    let localctx = new ExpressionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, GoParser.RULE_expressionList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 289;
	        this.expression(0);
	        this.state = 294;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,12,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 290;
	                this.match(GoParser.COMMA);
	                this.state = 291;
	                this.expression(0); 
	            }
	            this.state = 296;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,12,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeDecl() {
	    let localctx = new TypeDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, GoParser.RULE_typeDecl);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 297;
	        this.match(GoParser.TYPE);
	        this.state = 309;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 27:
	            this.state = 298;
	            this.typeSpec();
	            break;
	        case 28:
	            this.state = 299;
	            this.match(GoParser.L_PAREN);
	            this.state = 305;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===27) {
	                this.state = 300;
	                this.typeSpec();
	                this.state = 301;
	                this.eos();
	                this.state = 307;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 308;
	            this.match(GoParser.R_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeSpec() {
	    let localctx = new TypeSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, GoParser.RULE_typeSpec);
	    try {
	        this.state = 313;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 311;
	            this.aliasDecl();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 312;
	            this.typeDef();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aliasDecl() {
	    let localctx = new AliasDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, GoParser.RULE_aliasDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 315;
	        this.match(GoParser.IDENTIFIER);
	        this.state = 316;
	        this.match(GoParser.ASSIGN);
	        this.state = 317;
	        this.type_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeDef() {
	    let localctx = new TypeDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, GoParser.RULE_typeDef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 319;
	        this.match(GoParser.IDENTIFIER);
	        this.state = 321;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	        if(la_===1) {
	            this.state = 320;
	            this.typeParameters();

	        }
	        this.state = 323;
	        this.type_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameters() {
	    let localctx = new TypeParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, GoParser.RULE_typeParameters);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 325;
	        this.match(GoParser.L_BRACKET);
	        this.state = 326;
	        this.typeParameterDecl();
	        this.state = 331;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===35) {
	            this.state = 327;
	            this.match(GoParser.COMMA);
	            this.state = 328;
	            this.typeParameterDecl();
	            this.state = 333;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 334;
	        this.match(GoParser.R_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameterDecl() {
	    let localctx = new TypeParameterDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, GoParser.RULE_typeParameterDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 336;
	        this.identifierList();
	        this.state = 337;
	        this.typeElement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeElement() {
	    let localctx = new TypeElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, GoParser.RULE_typeElement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 339;
	        this.typeTerm();
	        this.state = 344;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,18,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 340;
	                this.match(GoParser.OR);
	                this.state = 341;
	                this.typeTerm(); 
	            }
	            this.state = 346;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,18,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeTerm() {
	    let localctx = new TypeTermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, GoParser.RULE_typeTerm);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 348;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===57) {
	            this.state = 347;
	            this.match(GoParser.UNDERLYING);
	        }

	        this.state = 350;
	        this.type_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionDecl() {
	    let localctx = new FunctionDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, GoParser.RULE_functionDecl);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 352;
	        this.match(GoParser.FUNC);
	        this.state = 353;
	        this.match(GoParser.IDENTIFIER);
	        this.state = 355;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===32) {
	            this.state = 354;
	            this.typeParameters();
	        }

	        this.state = 357;
	        this.signature();
	        this.state = 359;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
	        if(la_===1) {
	            this.state = 358;
	            this.block();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodDecl() {
	    let localctx = new MethodDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, GoParser.RULE_methodDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 361;
	        this.match(GoParser.FUNC);
	        this.state = 362;
	        this.receiver();
	        this.state = 363;
	        this.match(GoParser.IDENTIFIER);
	        this.state = 364;
	        this.signature();
	        this.state = 366;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	        if(la_===1) {
	            this.state = 365;
	            this.block();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	receiver() {
	    let localctx = new ReceiverContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, GoParser.RULE_receiver);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 368;
	        this.parameters();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varDecl() {
	    let localctx = new VarDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, GoParser.RULE_varDecl);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 370;
	        this.match(GoParser.VAR);
	        this.state = 382;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 27:
	            this.state = 371;
	            this.varSpec();
	            break;
	        case 28:
	            this.state = 372;
	            this.match(GoParser.L_PAREN);
	            this.state = 378;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===27) {
	                this.state = 373;
	                this.varSpec();
	                this.state = 374;
	                this.eos();
	                this.state = 380;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 381;
	            this.match(GoParser.R_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varSpec() {
	    let localctx = new VarSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, GoParser.RULE_varSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 384;
	        this.identifierList();
	        this.state = 392;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 4:
	        case 9:
	        case 10:
	        case 11:
	        case 27:
	        case 28:
	        case 32:
	        case 62:
	        case 64:
	            this.state = 385;
	            this.type_();
	            this.state = 388;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
	            if(la_===1) {
	                this.state = 386;
	                this.match(GoParser.ASSIGN);
	                this.state = 387;
	                this.expressionList();

	            }
	            break;
	        case 34:
	            this.state = 390;
	            this.match(GoParser.ASSIGN);
	            this.state = 391;
	            this.expressionList();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block() {
	    let localctx = new BlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, GoParser.RULE_block);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 394;
	        this.match(GoParser.L_CURLY);
	        this.state = 396;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
	        if(la_===1) {
	            this.state = 395;
	            this.statementList();

	        }
	        this.state = 398;
	        this.match(GoParser.R_CURLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementList() {
	    let localctx = new StatementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, GoParser.RULE_statementList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 412; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 407;
	        		this._errHandler.sync(this);
	        		var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	        		switch(la_) {
	        		case 1:
	        		    this.state = 401;
	        		    this._errHandler.sync(this);
	        		    _la = this._input.LA(1);
	        		    if(_la===36) {
	        		        this.state = 400;
	        		        this.match(GoParser.SEMI);
	        		    }

	        		    break;

	        		case 2:
	        		    this.state = 404;
	        		    this._errHandler.sync(this);
	        		    _la = this._input.LA(1);
	        		    if(_la===88) {
	        		        this.state = 403;
	        		        this.match(GoParser.EOS);
	        		    }

	        		    break;

	        		case 3:
	        		    this.state = 406;
	        		    if (!( this.closingBracket())) {
	        		        throw new antlr4.error.FailedPredicateException(this, "this.closingBracket()");
	        		    }
	        		    break;

	        		}
	        		this.state = 409;
	        		this.statement();
	        		this.state = 410;
	        		this.eos();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 414; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,31, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, GoParser.RULE_statement);
	    try {
	        this.state = 431;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 416;
	            this.declaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 417;
	            this.labeledStmt();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 418;
	            this.simpleStmt();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 419;
	            this.goStmt();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 420;
	            this.returnStmt();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 421;
	            this.breakStmt();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 422;
	            this.continueStmt();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 423;
	            this.gotoStmt();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 424;
	            this.fallthroughStmt();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 425;
	            this.block();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 426;
	            this.ifStmt();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 427;
	            this.switchStmt();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 428;
	            this.selectStmt();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 429;
	            this.forStmt();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 430;
	            this.deferStmt();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleStmt() {
	    let localctx = new SimpleStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, GoParser.RULE_simpleStmt);
	    try {
	        this.state = 438;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 433;
	            this.sendStmt();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 434;
	            this.incDecStmt();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 435;
	            this.assignment();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 436;
	            this.expressionStmt();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 437;
	            this.shortVarDecl();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionStmt() {
	    let localctx = new ExpressionStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, GoParser.RULE_expressionStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 440;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sendStmt() {
	    let localctx = new SendStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, GoParser.RULE_sendStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 442;
	        localctx.channel = this.expression(0);
	        this.state = 443;
	        this.match(GoParser.RECEIVE);
	        this.state = 444;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	incDecStmt() {
	    let localctx = new IncDecStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, GoParser.RULE_incDecStmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 446;
	        this.expression(0);
	        this.state = 447;
	        _la = this._input.LA(1);
	        if(!(_la===39 || _la===40)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignment() {
	    let localctx = new AssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, GoParser.RULE_assignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 449;
	        this.expressionList();
	        this.state = 450;
	        this.assign_op();
	        this.state = 451;
	        this.expressionList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assign_op() {
	    let localctx = new Assign_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, GoParser.RULE_assign_op);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 454;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 51)) & ~0x1f) === 0 && ((1 << (_la - 51)) & 7999) !== 0)) {
	            this.state = 453;
	            _la = this._input.LA(1);
	            if(!(((((_la - 51)) & ~0x1f) === 0 && ((1 << (_la - 51)) & 7999) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 456;
	        this.match(GoParser.ASSIGN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shortVarDecl() {
	    let localctx = new ShortVarDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, GoParser.RULE_shortVarDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 458;
	        this.identifierList();
	        this.state = 459;
	        this.match(GoParser.DECLARE_ASSIGN);
	        this.state = 460;
	        this.expressionList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labeledStmt() {
	    let localctx = new LabeledStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, GoParser.RULE_labeledStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 462;
	        this.match(GoParser.IDENTIFIER);
	        this.state = 463;
	        this.match(GoParser.COLON);
	        this.state = 465;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	        if(la_===1) {
	            this.state = 464;
	            this.statement();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStmt() {
	    let localctx = new ReturnStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, GoParser.RULE_returnStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 467;
	        this.match(GoParser.RETURN);
	        this.state = 469;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	        if(la_===1) {
	            this.state = 468;
	            this.expressionList();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	breakStmt() {
	    let localctx = new BreakStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, GoParser.RULE_breakStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 471;
	        this.match(GoParser.BREAK);
	        this.state = 473;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	        if(la_===1) {
	            this.state = 472;
	            this.match(GoParser.IDENTIFIER);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	continueStmt() {
	    let localctx = new ContinueStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, GoParser.RULE_continueStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 475;
	        this.match(GoParser.CONTINUE);
	        this.state = 477;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	        if(la_===1) {
	            this.state = 476;
	            this.match(GoParser.IDENTIFIER);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gotoStmt() {
	    let localctx = new GotoStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, GoParser.RULE_gotoStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 479;
	        this.match(GoParser.GOTO);
	        this.state = 480;
	        this.match(GoParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fallthroughStmt() {
	    let localctx = new FallthroughStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, GoParser.RULE_fallthroughStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 482;
	        this.match(GoParser.FALLTHROUGH);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deferStmt() {
	    let localctx = new DeferStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, GoParser.RULE_deferStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 484;
	        this.match(GoParser.DEFER);
	        this.state = 485;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifStmt() {
	    let localctx = new IfStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, GoParser.RULE_ifStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 487;
	        this.match(GoParser.IF);
	        this.state = 496;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 488;
	            this.expression(0);
	            break;

	        case 2:
	            this.state = 489;
	            this.eos();
	            this.state = 490;
	            this.expression(0);
	            break;

	        case 3:
	            this.state = 492;
	            this.simpleStmt();
	            this.state = 493;
	            this.eos();
	            this.state = 494;
	            this.expression(0);
	            break;

	        }
	        this.state = 498;
	        this.block();
	        this.state = 504;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
	        if(la_===1) {
	            this.state = 499;
	            this.match(GoParser.ELSE);
	            this.state = 502;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 18:
	                this.state = 500;
	                this.ifStmt();
	                break;
	            case 30:
	                this.state = 501;
	                this.block();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchStmt() {
	    let localctx = new SwitchStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, GoParser.RULE_switchStmt);
	    try {
	        this.state = 508;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 506;
	            this.exprSwitchStmt();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 507;
	            this.typeSwitchStmt();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exprSwitchStmt() {
	    let localctx = new ExprSwitchStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, GoParser.RULE_exprSwitchStmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 510;
	        this.match(GoParser.SWITCH);
	        this.state = 521;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 512;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 3)) & ~0x1f) === 0 && ((1 << (_la - 3)) & 595591619) !== 0) || ((((_la - 58)) & ~0x1f) === 0 && ((1 << (_la - 58)) & 6344703) !== 0)) {
	                this.state = 511;
	                this.expression(0);
	            }

	            break;

	        case 2:
	            this.state = 515;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
	            if(la_===1) {
	                this.state = 514;
	                this.simpleStmt();

	            }
	            this.state = 517;
	            this.eos();
	            this.state = 519;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 3)) & ~0x1f) === 0 && ((1 << (_la - 3)) & 595591619) !== 0) || ((((_la - 58)) & ~0x1f) === 0 && ((1 << (_la - 58)) & 6344703) !== 0)) {
	                this.state = 518;
	                this.expression(0);
	            }

	            break;

	        }
	        this.state = 523;
	        this.match(GoParser.L_CURLY);
	        this.state = 527;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===2 || _la===6) {
	            this.state = 524;
	            this.exprCaseClause();
	            this.state = 529;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 530;
	        this.match(GoParser.R_CURLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exprCaseClause() {
	    let localctx = new ExprCaseClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, GoParser.RULE_exprCaseClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 532;
	        this.exprSwitchCase();
	        this.state = 533;
	        this.match(GoParser.COLON);
	        this.state = 535;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
	        if(la_===1) {
	            this.state = 534;
	            this.statementList();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exprSwitchCase() {
	    let localctx = new ExprSwitchCaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, GoParser.RULE_exprSwitchCase);
	    try {
	        this.state = 540;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 6:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 537;
	            this.match(GoParser.CASE);
	            this.state = 538;
	            this.expressionList();
	            break;
	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 539;
	            this.match(GoParser.DEFAULT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeSwitchStmt() {
	    let localctx = new TypeSwitchStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, GoParser.RULE_typeSwitchStmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 542;
	        this.match(GoParser.SWITCH);
	        this.state = 551;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 543;
	            this.typeSwitchGuard();
	            break;

	        case 2:
	            this.state = 544;
	            this.eos();
	            this.state = 545;
	            this.typeSwitchGuard();
	            break;

	        case 3:
	            this.state = 547;
	            this.simpleStmt();
	            this.state = 548;
	            this.eos();
	            this.state = 549;
	            this.typeSwitchGuard();
	            break;

	        }
	        this.state = 553;
	        this.match(GoParser.L_CURLY);
	        this.state = 557;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===2 || _la===6) {
	            this.state = 554;
	            this.typeCaseClause();
	            this.state = 559;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 560;
	        this.match(GoParser.R_CURLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeSwitchGuard() {
	    let localctx = new TypeSwitchGuardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, GoParser.RULE_typeSwitchGuard);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 564;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
	        if(la_===1) {
	            this.state = 562;
	            this.match(GoParser.IDENTIFIER);
	            this.state = 563;
	            this.match(GoParser.DECLARE_ASSIGN);

	        }
	        this.state = 566;
	        this.primaryExpr(0);
	        this.state = 567;
	        this.match(GoParser.DOT);
	        this.state = 568;
	        this.match(GoParser.L_PAREN);
	        this.state = 569;
	        this.match(GoParser.TYPE);
	        this.state = 570;
	        this.match(GoParser.R_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeCaseClause() {
	    let localctx = new TypeCaseClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, GoParser.RULE_typeCaseClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 572;
	        this.typeSwitchCase();
	        this.state = 573;
	        this.match(GoParser.COLON);
	        this.state = 575;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
	        if(la_===1) {
	            this.state = 574;
	            this.statementList();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeSwitchCase() {
	    let localctx = new TypeSwitchCaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, GoParser.RULE_typeSwitchCase);
	    try {
	        this.state = 580;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 6:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 577;
	            this.match(GoParser.CASE);
	            this.state = 578;
	            this.typeList();
	            break;
	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 579;
	            this.match(GoParser.DEFAULT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeList() {
	    let localctx = new TypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, GoParser.RULE_typeList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 584;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 4:
	        case 9:
	        case 10:
	        case 11:
	        case 27:
	        case 28:
	        case 32:
	        case 62:
	        case 64:
	            this.state = 582;
	            this.type_();
	            break;
	        case 26:
	            this.state = 583;
	            this.match(GoParser.NIL_LIT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 593;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,57,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 586;
	                this.match(GoParser.COMMA);
	                this.state = 589;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 3:
	                case 4:
	                case 9:
	                case 10:
	                case 11:
	                case 27:
	                case 28:
	                case 32:
	                case 62:
	                case 64:
	                    this.state = 587;
	                    this.type_();
	                    break;
	                case 26:
	                    this.state = 588;
	                    this.match(GoParser.NIL_LIT);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 595;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,57,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectStmt() {
	    let localctx = new SelectStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, GoParser.RULE_selectStmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 596;
	        this.match(GoParser.SELECT);
	        this.state = 597;
	        this.match(GoParser.L_CURLY);
	        this.state = 601;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===2 || _la===6) {
	            this.state = 598;
	            this.commClause();
	            this.state = 603;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 604;
	        this.match(GoParser.R_CURLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commClause() {
	    let localctx = new CommClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, GoParser.RULE_commClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 606;
	        this.commCase();
	        this.state = 607;
	        this.match(GoParser.COLON);
	        this.state = 609;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	        if(la_===1) {
	            this.state = 608;
	            this.statementList();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commCase() {
	    let localctx = new CommCaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, GoParser.RULE_commCase);
	    try {
	        this.state = 617;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 6:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 611;
	            this.match(GoParser.CASE);
	            this.state = 614;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 612;
	                this.sendStmt();
	                break;

	            case 2:
	                this.state = 613;
	                this.recvStmt();
	                break;

	            }
	            break;
	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 616;
	            this.match(GoParser.DEFAULT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recvStmt() {
	    let localctx = new RecvStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, GoParser.RULE_recvStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 625;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
	        if(la_===1) {
	            this.state = 619;
	            this.expressionList();
	            this.state = 620;
	            this.match(GoParser.ASSIGN);

	        } else if(la_===2) {
	            this.state = 622;
	            this.identifierList();
	            this.state = 623;
	            this.match(GoParser.DECLARE_ASSIGN);

	        }
	        this.state = 627;
	        localctx.recvExpr = this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forStmt() {
	    let localctx = new ForStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, GoParser.RULE_forStmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 629;
	        this.match(GoParser.FOR);
	        this.state = 637;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 631;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 3)) & ~0x1f) === 0 && ((1 << (_la - 3)) & 595591619) !== 0) || ((((_la - 58)) & ~0x1f) === 0 && ((1 << (_la - 58)) & 6344703) !== 0)) {
	                this.state = 630;
	                this.expression(0);
	            }

	            break;

	        case 2:
	            this.state = 633;
	            this.forClause();
	            break;

	        case 3:
	            this.state = 635;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 3)) & ~0x1f) === 0 && ((1 << (_la - 3)) & 595657155) !== 0) || ((((_la - 58)) & ~0x1f) === 0 && ((1 << (_la - 58)) & 6344703) !== 0)) {
	                this.state = 634;
	                this.rangeClause();
	            }

	            break;

	        }
	        this.state = 639;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forClause() {
	    let localctx = new ForClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, GoParser.RULE_forClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 642;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
	        if(la_===1) {
	            this.state = 641;
	            localctx.initStmt = this.simpleStmt();

	        }
	        this.state = 644;
	        this.eos();
	        this.state = 646;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
	        if(la_===1) {
	            this.state = 645;
	            this.expression(0);

	        }
	        this.state = 648;
	        this.eos();
	        this.state = 650;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 3)) & ~0x1f) === 0 && ((1 << (_la - 3)) & 595591619) !== 0) || ((((_la - 58)) & ~0x1f) === 0 && ((1 << (_la - 58)) & 6344703) !== 0)) {
	            this.state = 649;
	            localctx.postStmt = this.simpleStmt();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rangeClause() {
	    let localctx = new RangeClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, GoParser.RULE_rangeClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 658;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
	        if(la_===1) {
	            this.state = 652;
	            this.expressionList();
	            this.state = 653;
	            this.match(GoParser.ASSIGN);

	        } else if(la_===2) {
	            this.state = 655;
	            this.identifierList();
	            this.state = 656;
	            this.match(GoParser.DECLARE_ASSIGN);

	        }
	        this.state = 660;
	        this.match(GoParser.RANGE);
	        this.state = 661;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	goStmt() {
	    let localctx = new GoStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, GoParser.RULE_goStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 663;
	        this.match(GoParser.GO);
	        this.state = 664;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_() {
	    let localctx = new Type_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, GoParser.RULE_type_);
	    try {
	        this.state = 675;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 27:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 666;
	            this.typeName();
	            this.state = 668;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
	            if(la_===1) {
	                this.state = 667;
	                this.typeArgs();

	            }
	            break;
	        case 3:
	        case 4:
	        case 9:
	        case 10:
	        case 11:
	        case 32:
	        case 62:
	        case 64:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 670;
	            this.typeLit();
	            break;
	        case 28:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 671;
	            this.match(GoParser.L_PAREN);
	            this.state = 672;
	            this.type_();
	            this.state = 673;
	            this.match(GoParser.R_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeArgs() {
	    let localctx = new TypeArgsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, GoParser.RULE_typeArgs);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 677;
	        this.match(GoParser.L_BRACKET);
	        this.state = 678;
	        this.typeList();
	        this.state = 680;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===35) {
	            this.state = 679;
	            this.match(GoParser.COMMA);
	        }

	        this.state = 682;
	        this.match(GoParser.R_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeName() {
	    let localctx = new TypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, GoParser.RULE_typeName);
	    try {
	        this.state = 686;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 684;
	            this.qualifiedIdent();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 685;
	            this.match(GoParser.IDENTIFIER);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeLit() {
	    let localctx = new TypeLitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, GoParser.RULE_typeLit);
	    try {
	        this.state = 696;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 688;
	            this.arrayType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 689;
	            this.structType();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 690;
	            this.pointerType();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 691;
	            this.functionType();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 692;
	            this.interfaceType();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 693;
	            this.sliceType();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 694;
	            this.mapType();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 695;
	            this.channelType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayType() {
	    let localctx = new ArrayTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, GoParser.RULE_arrayType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 698;
	        this.match(GoParser.L_BRACKET);
	        this.state = 699;
	        this.arrayLength();
	        this.state = 700;
	        this.match(GoParser.R_BRACKET);
	        this.state = 701;
	        this.elementType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayLength() {
	    let localctx = new ArrayLengthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, GoParser.RULE_arrayLength);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 703;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementType() {
	    let localctx = new ElementTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, GoParser.RULE_elementType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 705;
	        this.type_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pointerType() {
	    let localctx = new PointerTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, GoParser.RULE_pointerType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 707;
	        this.match(GoParser.STAR);
	        this.state = 708;
	        this.type_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceType() {
	    let localctx = new InterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, GoParser.RULE_interfaceType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 710;
	        this.match(GoParser.INTERFACE);
	        this.state = 711;
	        this.match(GoParser.L_CURLY);
	        this.state = 720;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 3)) & ~0x1f) === 0 && ((1 << (_la - 3)) & 587203011) !== 0) || ((((_la - 57)) & ~0x1f) === 0 && ((1 << (_la - 57)) & 161) !== 0)) {
	            this.state = 714;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 712;
	                this.methodSpec();
	                break;

	            case 2:
	                this.state = 713;
	                this.typeElement();
	                break;

	            }
	            this.state = 716;
	            this.eos();
	            this.state = 722;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 723;
	        this.match(GoParser.R_CURLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sliceType() {
	    let localctx = new SliceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, GoParser.RULE_sliceType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 725;
	        this.match(GoParser.L_BRACKET);
	        this.state = 726;
	        this.match(GoParser.R_BRACKET);
	        this.state = 727;
	        this.elementType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapType() {
	    let localctx = new MapTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, GoParser.RULE_mapType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 729;
	        this.match(GoParser.MAP);
	        this.state = 730;
	        this.match(GoParser.L_BRACKET);
	        this.state = 731;
	        this.type_();
	        this.state = 732;
	        this.match(GoParser.R_BRACKET);
	        this.state = 733;
	        this.elementType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	channelType() {
	    let localctx = new ChannelTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, GoParser.RULE_channelType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 740;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 735;
	            this.match(GoParser.CHAN);
	            break;

	        case 2:
	            this.state = 736;
	            this.match(GoParser.CHAN);
	            this.state = 737;
	            this.match(GoParser.RECEIVE);
	            break;

	        case 3:
	            this.state = 738;
	            this.match(GoParser.RECEIVE);
	            this.state = 739;
	            this.match(GoParser.CHAN);
	            break;

	        }
	        this.state = 742;
	        this.elementType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodSpec() {
	    let localctx = new MethodSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, GoParser.RULE_methodSpec);
	    try {
	        this.state = 750;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 744;
	            this.match(GoParser.IDENTIFIER);
	            this.state = 745;
	            this.parameters();
	            this.state = 746;
	            this.result();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 748;
	            this.match(GoParser.IDENTIFIER);
	            this.state = 749;
	            this.parameters();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionType() {
	    let localctx = new FunctionTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, GoParser.RULE_functionType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 752;
	        this.match(GoParser.FUNC);
	        this.state = 753;
	        this.signature();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signature() {
	    let localctx = new SignatureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, GoParser.RULE_signature);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 755;
	        this.parameters();
	        this.state = 757;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
	        if(la_===1) {
	            this.state = 756;
	            this.result();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	result() {
	    let localctx = new ResultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, GoParser.RULE_result);
	    try {
	        this.state = 761;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 759;
	            this.parameters();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 760;
	            this.type_();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameters() {
	    let localctx = new ParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, GoParser.RULE_parameters);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 763;
	        this.match(GoParser.L_PAREN);
	        this.state = 775;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 3)) & ~0x1f) === 0 && ((1 << (_la - 3)) & 587203011) !== 0) || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 5242881) !== 0)) {
	            this.state = 764;
	            this.parameterDecl();
	            this.state = 769;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,81,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 765;
	                    this.match(GoParser.COMMA);
	                    this.state = 766;
	                    this.parameterDecl(); 
	                }
	                this.state = 771;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,81,this._ctx);
	            }

	            this.state = 773;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===35) {
	                this.state = 772;
	                this.match(GoParser.COMMA);
	            }

	        }

	        this.state = 777;
	        this.match(GoParser.R_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterDecl() {
	    let localctx = new ParameterDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, GoParser.RULE_parameterDecl);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 780;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
	        if(la_===1) {
	            this.state = 779;
	            this.identifierList();

	        }
	        this.state = 783;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===42) {
	            this.state = 782;
	            this.match(GoParser.ELLIPSIS);
	        }

	        this.state = 785;
	        this.type_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 152;
	    this.enterRecursionRule(localctx, 152, GoParser.RULE_expression, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 791;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 788;
	            this.primaryExpr(0);
	            break;

	        case 2:
	            this.state = 789;
	            localctx.unary_op = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 58)) & ~0x1f) === 0 && ((1 << (_la - 58)) & 127) !== 0))) {
	                localctx.unary_op = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 790;
	            this.expression(6);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 810;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,88,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 808;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GoParser.RULE_expression);
	                    this.state = 793;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 794;
	                    localctx.mul_op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 52)) & ~0x1f) === 0 && ((1 << (_la - 52)) & 3103) !== 0))) {
	                        localctx.mul_op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 795;
	                    this.expression(6);
	                    break;

	                case 2:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GoParser.RULE_expression);
	                    this.state = 796;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 797;
	                    localctx.add_op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 51)) & ~0x1f) === 0 && ((1 << (_la - 51)) & 1793) !== 0))) {
	                        localctx.add_op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 798;
	                    this.expression(5);
	                    break;

	                case 3:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GoParser.RULE_expression);
	                    this.state = 799;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 800;
	                    localctx.rel_op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 45)) & ~0x1f) === 0 && ((1 << (_la - 45)) & 63) !== 0))) {
	                        localctx.rel_op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 801;
	                    this.expression(4);
	                    break;

	                case 4:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GoParser.RULE_expression);
	                    this.state = 802;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 803;
	                    this.match(GoParser.LOGICAL_AND);
	                    this.state = 804;
	                    this.expression(3);
	                    break;

	                case 5:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, GoParser.RULE_expression);
	                    this.state = 805;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 806;
	                    this.match(GoParser.LOGICAL_OR);
	                    this.state = 807;
	                    this.expression(2);
	                    break;

	                } 
	            }
	            this.state = 812;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,88,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	primaryExpr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new PrimaryExprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 154;
	    this.enterRecursionRule(localctx, 154, GoParser.RULE_primaryExpr, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 817;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 814;
	            this.operand();
	            break;

	        case 2:
	            this.state = 815;
	            this.conversion();
	            break;

	        case 3:
	            this.state = 816;
	            this.methodExpr();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 830;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,91,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new PrimaryExprContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, GoParser.RULE_primaryExpr);
	                this.state = 819;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 826;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 820;
	                    this.match(GoParser.DOT);
	                    this.state = 821;
	                    this.match(GoParser.IDENTIFIER);
	                    break;

	                case 2:
	                    this.state = 822;
	                    this.index();
	                    break;

	                case 3:
	                    this.state = 823;
	                    this.slice_();
	                    break;

	                case 4:
	                    this.state = 824;
	                    this.typeAssertion();
	                    break;

	                case 5:
	                    this.state = 825;
	                    this.arguments();
	                    break;

	                } 
	            }
	            this.state = 832;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,91,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	conversion() {
	    let localctx = new ConversionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, GoParser.RULE_conversion);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 833;
	        this.type_();
	        this.state = 834;
	        this.match(GoParser.L_PAREN);
	        this.state = 835;
	        this.expression(0);
	        this.state = 837;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===35) {
	            this.state = 836;
	            this.match(GoParser.COMMA);
	        }

	        this.state = 839;
	        this.match(GoParser.R_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operand() {
	    let localctx = new OperandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, GoParser.RULE_operand);
	    try {
	        this.state = 850;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 841;
	            this.literal();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 842;
	            this.operandName();
	            this.state = 844;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
	            if(la_===1) {
	                this.state = 843;
	                this.typeArgs();

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 846;
	            this.match(GoParser.L_PAREN);
	            this.state = 847;
	            this.expression(0);
	            this.state = 848;
	            this.match(GoParser.R_PAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, GoParser.RULE_literal);
	    try {
	        this.state = 855;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 26:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 72:
	        case 73:
	        case 79:
	        case 80:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 852;
	            this.basicLit();
	            break;
	        case 9:
	        case 10:
	        case 27:
	        case 32:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 853;
	            this.compositeLit();
	            break;
	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 854;
	            this.functionLit();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	basicLit() {
	    let localctx = new BasicLitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, GoParser.RULE_basicLit);
	    try {
	        this.state = 861;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 26:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 857;
	            this.match(GoParser.NIL_LIT);
	            break;
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 72:
	        case 73:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 858;
	            this.integer();
	            break;
	        case 79:
	        case 80:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 859;
	            this.string_();
	            break;
	        case 69:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 860;
	            this.match(GoParser.FLOAT_LIT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integer() {
	    let localctx = new IntegerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, GoParser.RULE_integer);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 863;
	        _la = this._input.LA(1);
	        if(!(((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 399) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operandName() {
	    let localctx = new OperandNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, GoParser.RULE_operandName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 865;
	        this.match(GoParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedIdent() {
	    let localctx = new QualifiedIdentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, GoParser.RULE_qualifiedIdent);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 867;
	        this.match(GoParser.IDENTIFIER);
	        this.state = 868;
	        this.match(GoParser.DOT);
	        this.state = 869;
	        this.match(GoParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compositeLit() {
	    let localctx = new CompositeLitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, GoParser.RULE_compositeLit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 871;
	        this.literalType();
	        this.state = 872;
	        this.literalValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literalType() {
	    let localctx = new LiteralTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, GoParser.RULE_literalType);
	    var _la = 0;
	    try {
	        this.state = 886;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 874;
	            this.structType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 875;
	            this.arrayType();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 876;
	            this.match(GoParser.L_BRACKET);
	            this.state = 877;
	            this.match(GoParser.ELLIPSIS);
	            this.state = 878;
	            this.match(GoParser.R_BRACKET);
	            this.state = 879;
	            this.elementType();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 880;
	            this.sliceType();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 881;
	            this.mapType();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 882;
	            this.typeName();
	            this.state = 884;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===32) {
	                this.state = 883;
	                this.typeArgs();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literalValue() {
	    let localctx = new LiteralValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, GoParser.RULE_literalValue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 888;
	        this.match(GoParser.L_CURLY);
	        this.state = 893;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 3)) & ~0x1f) === 0 && ((1 << (_la - 3)) & 729809347) !== 0) || ((((_la - 58)) & ~0x1f) === 0 && ((1 << (_la - 58)) & 6344703) !== 0)) {
	            this.state = 889;
	            this.elementList();
	            this.state = 891;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===35) {
	                this.state = 890;
	                this.match(GoParser.COMMA);
	            }

	        }

	        this.state = 895;
	        this.match(GoParser.R_CURLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementList() {
	    let localctx = new ElementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, GoParser.RULE_elementList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 897;
	        this.keyedElement();
	        this.state = 902;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,101,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 898;
	                this.match(GoParser.COMMA);
	                this.state = 899;
	                this.keyedElement(); 
	            }
	            this.state = 904;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,101,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyedElement() {
	    let localctx = new KeyedElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, GoParser.RULE_keyedElement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 908;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
	        if(la_===1) {
	            this.state = 905;
	            this.key();
	            this.state = 906;
	            this.match(GoParser.COLON);

	        }
	        this.state = 910;
	        this.element();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	key() {
	    let localctx = new KeyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, GoParser.RULE_key);
	    try {
	        this.state = 914;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 4:
	        case 9:
	        case 10:
	        case 11:
	        case 26:
	        case 27:
	        case 28:
	        case 32:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 72:
	        case 73:
	        case 79:
	        case 80:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 912;
	            this.expression(0);
	            break;
	        case 30:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 913;
	            this.literalValue();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	element() {
	    let localctx = new ElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, GoParser.RULE_element);
	    try {
	        this.state = 918;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 4:
	        case 9:
	        case 10:
	        case 11:
	        case 26:
	        case 27:
	        case 28:
	        case 32:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 72:
	        case 73:
	        case 79:
	        case 80:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 916;
	            this.expression(0);
	            break;
	        case 30:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 917;
	            this.literalValue();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structType() {
	    let localctx = new StructTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, GoParser.RULE_structType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 920;
	        this.match(GoParser.STRUCT);
	        this.state = 921;
	        this.match(GoParser.L_CURLY);
	        this.state = 927;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===27 || _la===62) {
	            this.state = 922;
	            this.fieldDecl();
	            this.state = 923;
	            this.eos();
	            this.state = 929;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 930;
	        this.match(GoParser.R_CURLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldDecl() {
	    let localctx = new FieldDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, GoParser.RULE_fieldDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 936;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 932;
	            this.identifierList();
	            this.state = 933;
	            this.type_();
	            break;

	        case 2:
	            this.state = 935;
	            this.embeddedField();
	            break;

	        }
	        this.state = 939;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
	        if(la_===1) {
	            this.state = 938;
	            localctx.tag = this.string_();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	string_() {
	    let localctx = new String_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, GoParser.RULE_string_);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 941;
	        _la = this._input.LA(1);
	        if(!(_la===79 || _la===80)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	embeddedField() {
	    let localctx = new EmbeddedFieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, GoParser.RULE_embeddedField);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 944;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===62) {
	            this.state = 943;
	            this.match(GoParser.STAR);
	        }

	        this.state = 946;
	        this.typeName();
	        this.state = 948;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
	        if(la_===1) {
	            this.state = 947;
	            this.typeArgs();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionLit() {
	    let localctx = new FunctionLitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, GoParser.RULE_functionLit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 950;
	        this.match(GoParser.FUNC);
	        this.state = 951;
	        this.signature();
	        this.state = 952;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	index() {
	    let localctx = new IndexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, GoParser.RULE_index);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 954;
	        this.match(GoParser.L_BRACKET);
	        this.state = 955;
	        this.expression(0);
	        this.state = 956;
	        this.match(GoParser.R_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	slice_() {
	    let localctx = new Slice_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, GoParser.RULE_slice_);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 958;
	        this.match(GoParser.L_BRACKET);
	        this.state = 974;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 960;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 3)) & ~0x1f) === 0 && ((1 << (_la - 3)) & 595591619) !== 0) || ((((_la - 58)) & ~0x1f) === 0 && ((1 << (_la - 58)) & 6344703) !== 0)) {
	                this.state = 959;
	                this.expression(0);
	            }

	            this.state = 962;
	            this.match(GoParser.COLON);
	            this.state = 964;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 3)) & ~0x1f) === 0 && ((1 << (_la - 3)) & 595591619) !== 0) || ((((_la - 58)) & ~0x1f) === 0 && ((1 << (_la - 58)) & 6344703) !== 0)) {
	                this.state = 963;
	                this.expression(0);
	            }

	            break;

	        case 2:
	            this.state = 967;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 3)) & ~0x1f) === 0 && ((1 << (_la - 3)) & 595591619) !== 0) || ((((_la - 58)) & ~0x1f) === 0 && ((1 << (_la - 58)) & 6344703) !== 0)) {
	                this.state = 966;
	                this.expression(0);
	            }

	            this.state = 969;
	            this.match(GoParser.COLON);
	            this.state = 970;
	            this.expression(0);
	            this.state = 971;
	            this.match(GoParser.COLON);
	            this.state = 972;
	            this.expression(0);
	            break;

	        }
	        this.state = 976;
	        this.match(GoParser.R_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeAssertion() {
	    let localctx = new TypeAssertionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, GoParser.RULE_typeAssertion);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 978;
	        this.match(GoParser.DOT);
	        this.state = 979;
	        this.match(GoParser.L_PAREN);
	        this.state = 980;
	        this.type_();
	        this.state = 981;
	        this.match(GoParser.R_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arguments() {
	    let localctx = new ArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, GoParser.RULE_arguments);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 983;
	        this.match(GoParser.L_PAREN);
	        this.state = 998;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 3)) & ~0x1f) === 0 && ((1 << (_la - 3)) & 595591619) !== 0) || ((((_la - 58)) & ~0x1f) === 0 && ((1 << (_la - 58)) & 6344703) !== 0)) {
	            this.state = 990;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 984;
	                this.expressionList();
	                break;

	            case 2:
	                this.state = 985;
	                this.type_();
	                this.state = 988;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
	                if(la_===1) {
	                    this.state = 986;
	                    this.match(GoParser.COMMA);
	                    this.state = 987;
	                    this.expressionList();

	                }
	                break;

	            }
	            this.state = 993;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===42) {
	                this.state = 992;
	                this.match(GoParser.ELLIPSIS);
	            }

	            this.state = 996;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===35) {
	                this.state = 995;
	                this.match(GoParser.COMMA);
	            }

	        }

	        this.state = 1000;
	        this.match(GoParser.R_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodExpr() {
	    let localctx = new MethodExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, GoParser.RULE_methodExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1002;
	        this.type_();
	        this.state = 1003;
	        this.match(GoParser.DOT);
	        this.state = 1004;
	        this.match(GoParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eos() {
	    let localctx = new EosContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, GoParser.RULE_eos);
	    try {
	        this.state = 1010;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1006;
	            this.match(GoParser.SEMI);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1007;
	            this.match(GoParser.EOF);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1008;
	            this.match(GoParser.EOS);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1009;
	            if (!( this.closingBracket())) {
	                throw new antlr4.error.FailedPredicateException(this, "this.closingBracket()");
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

GoParser.EOF = antlr4.Token.EOF;
GoParser.BREAK = 1;
GoParser.DEFAULT = 2;
GoParser.FUNC = 3;
GoParser.INTERFACE = 4;
GoParser.SELECT = 5;
GoParser.CASE = 6;
GoParser.DEFER = 7;
GoParser.GO = 8;
GoParser.MAP = 9;
GoParser.STRUCT = 10;
GoParser.CHAN = 11;
GoParser.ELSE = 12;
GoParser.GOTO = 13;
GoParser.PACKAGE = 14;
GoParser.SWITCH = 15;
GoParser.CONST = 16;
GoParser.FALLTHROUGH = 17;
GoParser.IF = 18;
GoParser.RANGE = 19;
GoParser.TYPE = 20;
GoParser.CONTINUE = 21;
GoParser.FOR = 22;
GoParser.IMPORT = 23;
GoParser.RETURN = 24;
GoParser.VAR = 25;
GoParser.NIL_LIT = 26;
GoParser.IDENTIFIER = 27;
GoParser.L_PAREN = 28;
GoParser.R_PAREN = 29;
GoParser.L_CURLY = 30;
GoParser.R_CURLY = 31;
GoParser.L_BRACKET = 32;
GoParser.R_BRACKET = 33;
GoParser.ASSIGN = 34;
GoParser.COMMA = 35;
GoParser.SEMI = 36;
GoParser.COLON = 37;
GoParser.DOT = 38;
GoParser.PLUS_PLUS = 39;
GoParser.MINUS_MINUS = 40;
GoParser.DECLARE_ASSIGN = 41;
GoParser.ELLIPSIS = 42;
GoParser.LOGICAL_OR = 43;
GoParser.LOGICAL_AND = 44;
GoParser.EQUALS = 45;
GoParser.NOT_EQUALS = 46;
GoParser.LESS = 47;
GoParser.LESS_OR_EQUALS = 48;
GoParser.GREATER = 49;
GoParser.GREATER_OR_EQUALS = 50;
GoParser.OR = 51;
GoParser.DIV = 52;
GoParser.MOD = 53;
GoParser.LSHIFT = 54;
GoParser.RSHIFT = 55;
GoParser.BIT_CLEAR = 56;
GoParser.UNDERLYING = 57;
GoParser.EXCLAMATION = 58;
GoParser.PLUS = 59;
GoParser.MINUS = 60;
GoParser.CARET = 61;
GoParser.STAR = 62;
GoParser.AMPERSAND = 63;
GoParser.RECEIVE = 64;
GoParser.DECIMAL_LIT = 65;
GoParser.BINARY_LIT = 66;
GoParser.OCTAL_LIT = 67;
GoParser.HEX_LIT = 68;
GoParser.FLOAT_LIT = 69;
GoParser.DECIMAL_FLOAT_LIT = 70;
GoParser.HEX_FLOAT_LIT = 71;
GoParser.IMAGINARY_LIT = 72;
GoParser.RUNE_LIT = 73;
GoParser.BYTE_VALUE = 74;
GoParser.OCTAL_BYTE_VALUE = 75;
GoParser.HEX_BYTE_VALUE = 76;
GoParser.LITTLE_U_VALUE = 77;
GoParser.BIG_U_VALUE = 78;
GoParser.RAW_STRING_LIT = 79;
GoParser.INTERPRETED_STRING_LIT = 80;
GoParser.WS = 81;
GoParser.COMMENT = 82;
GoParser.TERMINATOR = 83;
GoParser.LINE_COMMENT = 84;
GoParser.WS_NLSEMI = 85;
GoParser.COMMENT_NLSEMI = 86;
GoParser.LINE_COMMENT_NLSEMI = 87;
GoParser.EOS = 88;
GoParser.OTHER = 89;

GoParser.RULE_sourceFile = 0;
GoParser.RULE_packageClause = 1;
GoParser.RULE_importDecl = 2;
GoParser.RULE_importSpec = 3;
GoParser.RULE_importPath = 4;
GoParser.RULE_declaration = 5;
GoParser.RULE_constDecl = 6;
GoParser.RULE_constSpec = 7;
GoParser.RULE_identifierList = 8;
GoParser.RULE_expressionList = 9;
GoParser.RULE_typeDecl = 10;
GoParser.RULE_typeSpec = 11;
GoParser.RULE_aliasDecl = 12;
GoParser.RULE_typeDef = 13;
GoParser.RULE_typeParameters = 14;
GoParser.RULE_typeParameterDecl = 15;
GoParser.RULE_typeElement = 16;
GoParser.RULE_typeTerm = 17;
GoParser.RULE_functionDecl = 18;
GoParser.RULE_methodDecl = 19;
GoParser.RULE_receiver = 20;
GoParser.RULE_varDecl = 21;
GoParser.RULE_varSpec = 22;
GoParser.RULE_block = 23;
GoParser.RULE_statementList = 24;
GoParser.RULE_statement = 25;
GoParser.RULE_simpleStmt = 26;
GoParser.RULE_expressionStmt = 27;
GoParser.RULE_sendStmt = 28;
GoParser.RULE_incDecStmt = 29;
GoParser.RULE_assignment = 30;
GoParser.RULE_assign_op = 31;
GoParser.RULE_shortVarDecl = 32;
GoParser.RULE_labeledStmt = 33;
GoParser.RULE_returnStmt = 34;
GoParser.RULE_breakStmt = 35;
GoParser.RULE_continueStmt = 36;
GoParser.RULE_gotoStmt = 37;
GoParser.RULE_fallthroughStmt = 38;
GoParser.RULE_deferStmt = 39;
GoParser.RULE_ifStmt = 40;
GoParser.RULE_switchStmt = 41;
GoParser.RULE_exprSwitchStmt = 42;
GoParser.RULE_exprCaseClause = 43;
GoParser.RULE_exprSwitchCase = 44;
GoParser.RULE_typeSwitchStmt = 45;
GoParser.RULE_typeSwitchGuard = 46;
GoParser.RULE_typeCaseClause = 47;
GoParser.RULE_typeSwitchCase = 48;
GoParser.RULE_typeList = 49;
GoParser.RULE_selectStmt = 50;
GoParser.RULE_commClause = 51;
GoParser.RULE_commCase = 52;
GoParser.RULE_recvStmt = 53;
GoParser.RULE_forStmt = 54;
GoParser.RULE_forClause = 55;
GoParser.RULE_rangeClause = 56;
GoParser.RULE_goStmt = 57;
GoParser.RULE_type_ = 58;
GoParser.RULE_typeArgs = 59;
GoParser.RULE_typeName = 60;
GoParser.RULE_typeLit = 61;
GoParser.RULE_arrayType = 62;
GoParser.RULE_arrayLength = 63;
GoParser.RULE_elementType = 64;
GoParser.RULE_pointerType = 65;
GoParser.RULE_interfaceType = 66;
GoParser.RULE_sliceType = 67;
GoParser.RULE_mapType = 68;
GoParser.RULE_channelType = 69;
GoParser.RULE_methodSpec = 70;
GoParser.RULE_functionType = 71;
GoParser.RULE_signature = 72;
GoParser.RULE_result = 73;
GoParser.RULE_parameters = 74;
GoParser.RULE_parameterDecl = 75;
GoParser.RULE_expression = 76;
GoParser.RULE_primaryExpr = 77;
GoParser.RULE_conversion = 78;
GoParser.RULE_operand = 79;
GoParser.RULE_literal = 80;
GoParser.RULE_basicLit = 81;
GoParser.RULE_integer = 82;
GoParser.RULE_operandName = 83;
GoParser.RULE_qualifiedIdent = 84;
GoParser.RULE_compositeLit = 85;
GoParser.RULE_literalType = 86;
GoParser.RULE_literalValue = 87;
GoParser.RULE_elementList = 88;
GoParser.RULE_keyedElement = 89;
GoParser.RULE_key = 90;
GoParser.RULE_element = 91;
GoParser.RULE_structType = 92;
GoParser.RULE_fieldDecl = 93;
GoParser.RULE_string_ = 94;
GoParser.RULE_embeddedField = 95;
GoParser.RULE_functionLit = 96;
GoParser.RULE_index = 97;
GoParser.RULE_slice_ = 98;
GoParser.RULE_typeAssertion = 99;
GoParser.RULE_arguments = 100;
GoParser.RULE_methodExpr = 101;
GoParser.RULE_eos = 102;

class SourceFileContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_sourceFile;
    }

	packageClause() {
	    return this.getTypedRuleContext(PackageClauseContext,0);
	};

	eos = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EosContext);
	    } else {
	        return this.getTypedRuleContext(EosContext,i);
	    }
	};

	EOF() {
	    return this.getToken(GoParser.EOF, 0);
	};

	importDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ImportDeclContext);
	    } else {
	        return this.getTypedRuleContext(ImportDeclContext,i);
	    }
	};

	functionDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionDeclContext);
	    } else {
	        return this.getTypedRuleContext(FunctionDeclContext,i);
	    }
	};

	methodDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MethodDeclContext);
	    } else {
	        return this.getTypedRuleContext(MethodDeclContext,i);
	    }
	};

	declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclarationContext);
	    } else {
	        return this.getTypedRuleContext(DeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterSourceFile(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitSourceFile(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitSourceFile(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PackageClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_packageClause;
        this.packageName = null;
    }

	PACKAGE() {
	    return this.getToken(GoParser.PACKAGE, 0);
	};

	IDENTIFIER() {
	    return this.getToken(GoParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterPackageClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitPackageClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitPackageClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_importDecl;
    }

	IMPORT() {
	    return this.getToken(GoParser.IMPORT, 0);
	};

	importSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ImportSpecContext);
	    } else {
	        return this.getTypedRuleContext(ImportSpecContext,i);
	    }
	};

	L_PAREN() {
	    return this.getToken(GoParser.L_PAREN, 0);
	};

	R_PAREN() {
	    return this.getToken(GoParser.R_PAREN, 0);
	};

	eos = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EosContext);
	    } else {
	        return this.getTypedRuleContext(EosContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterImportDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitImportDecl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitImportDecl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_importSpec;
        this.alias = null;
    }

	importPath() {
	    return this.getTypedRuleContext(ImportPathContext,0);
	};

	DOT() {
	    return this.getToken(GoParser.DOT, 0);
	};

	IDENTIFIER() {
	    return this.getToken(GoParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterImportSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitImportSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitImportSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_importPath;
    }

	string_() {
	    return this.getTypedRuleContext(String_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterImportPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitImportPath(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitImportPath(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_declaration;
    }

	constDecl() {
	    return this.getTypedRuleContext(ConstDeclContext,0);
	};

	typeDecl() {
	    return this.getTypedRuleContext(TypeDeclContext,0);
	};

	varDecl() {
	    return this.getTypedRuleContext(VarDeclContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_constDecl;
    }

	CONST() {
	    return this.getToken(GoParser.CONST, 0);
	};

	constSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstSpecContext);
	    } else {
	        return this.getTypedRuleContext(ConstSpecContext,i);
	    }
	};

	L_PAREN() {
	    return this.getToken(GoParser.L_PAREN, 0);
	};

	R_PAREN() {
	    return this.getToken(GoParser.R_PAREN, 0);
	};

	eos = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EosContext);
	    } else {
	        return this.getTypedRuleContext(EosContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterConstDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitConstDecl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitConstDecl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_constSpec;
    }

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	ASSIGN() {
	    return this.getToken(GoParser.ASSIGN, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterConstSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitConstSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitConstSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_identifierList;
    }

	IDENTIFIER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GoParser.IDENTIFIER);
	    } else {
	        return this.getToken(GoParser.IDENTIFIER, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GoParser.COMMA);
	    } else {
	        return this.getToken(GoParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterIdentifierList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitIdentifierList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitIdentifierList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_expressionList;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GoParser.COMMA);
	    } else {
	        return this.getToken(GoParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterExpressionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitExpressionList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitExpressionList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_typeDecl;
    }

	TYPE() {
	    return this.getToken(GoParser.TYPE, 0);
	};

	typeSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeSpecContext);
	    } else {
	        return this.getTypedRuleContext(TypeSpecContext,i);
	    }
	};

	L_PAREN() {
	    return this.getToken(GoParser.L_PAREN, 0);
	};

	R_PAREN() {
	    return this.getToken(GoParser.R_PAREN, 0);
	};

	eos = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EosContext);
	    } else {
	        return this.getTypedRuleContext(EosContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterTypeDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitTypeDecl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitTypeDecl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_typeSpec;
    }

	aliasDecl() {
	    return this.getTypedRuleContext(AliasDeclContext,0);
	};

	typeDef() {
	    return this.getTypedRuleContext(TypeDefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterTypeSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitTypeSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitTypeSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AliasDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_aliasDecl;
    }

	IDENTIFIER() {
	    return this.getToken(GoParser.IDENTIFIER, 0);
	};

	ASSIGN() {
	    return this.getToken(GoParser.ASSIGN, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterAliasDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitAliasDecl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitAliasDecl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_typeDef;
    }

	IDENTIFIER() {
	    return this.getToken(GoParser.IDENTIFIER, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterTypeDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitTypeDef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitTypeDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_typeParameters;
    }

	L_BRACKET() {
	    return this.getToken(GoParser.L_BRACKET, 0);
	};

	typeParameterDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeParameterDeclContext);
	    } else {
	        return this.getTypedRuleContext(TypeParameterDeclContext,i);
	    }
	};

	R_BRACKET() {
	    return this.getToken(GoParser.R_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GoParser.COMMA);
	    } else {
	        return this.getToken(GoParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterTypeParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitTypeParameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitTypeParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeParameterDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_typeParameterDecl;
    }

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	typeElement() {
	    return this.getTypedRuleContext(TypeElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterTypeParameterDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitTypeParameterDecl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitTypeParameterDecl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_typeElement;
    }

	typeTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeTermContext);
	    } else {
	        return this.getTypedRuleContext(TypeTermContext,i);
	    }
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GoParser.OR);
	    } else {
	        return this.getToken(GoParser.OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterTypeElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitTypeElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitTypeElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_typeTerm;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	UNDERLYING() {
	    return this.getToken(GoParser.UNDERLYING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterTypeTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitTypeTerm(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitTypeTerm(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_functionDecl;
    }

	FUNC() {
	    return this.getToken(GoParser.FUNC, 0);
	};

	IDENTIFIER() {
	    return this.getToken(GoParser.IDENTIFIER, 0);
	};

	signature() {
	    return this.getTypedRuleContext(SignatureContext,0);
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterFunctionDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitFunctionDecl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitFunctionDecl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_methodDecl;
    }

	FUNC() {
	    return this.getToken(GoParser.FUNC, 0);
	};

	receiver() {
	    return this.getTypedRuleContext(ReceiverContext,0);
	};

	IDENTIFIER() {
	    return this.getToken(GoParser.IDENTIFIER, 0);
	};

	signature() {
	    return this.getTypedRuleContext(SignatureContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterMethodDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitMethodDecl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitMethodDecl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReceiverContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_receiver;
    }

	parameters() {
	    return this.getTypedRuleContext(ParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterReceiver(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitReceiver(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitReceiver(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VarDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_varDecl;
    }

	VAR() {
	    return this.getToken(GoParser.VAR, 0);
	};

	varSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VarSpecContext);
	    } else {
	        return this.getTypedRuleContext(VarSpecContext,i);
	    }
	};

	L_PAREN() {
	    return this.getToken(GoParser.L_PAREN, 0);
	};

	R_PAREN() {
	    return this.getToken(GoParser.R_PAREN, 0);
	};

	eos = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EosContext);
	    } else {
	        return this.getTypedRuleContext(EosContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterVarDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitVarDecl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitVarDecl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VarSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_varSpec;
    }

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	ASSIGN() {
	    return this.getToken(GoParser.ASSIGN, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterVarSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitVarSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitVarSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_block;
    }

	L_CURLY() {
	    return this.getToken(GoParser.L_CURLY, 0);
	};

	R_CURLY() {
	    return this.getToken(GoParser.R_CURLY, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_statementList;
    }

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	eos = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EosContext);
	    } else {
	        return this.getTypedRuleContext(EosContext,i);
	    }
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GoParser.SEMI);
	    } else {
	        return this.getToken(GoParser.SEMI, i);
	    }
	};


	EOS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GoParser.EOS);
	    } else {
	        return this.getToken(GoParser.EOS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterStatementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitStatementList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitStatementList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_statement;
    }

	declaration() {
	    return this.getTypedRuleContext(DeclarationContext,0);
	};

	labeledStmt() {
	    return this.getTypedRuleContext(LabeledStmtContext,0);
	};

	simpleStmt() {
	    return this.getTypedRuleContext(SimpleStmtContext,0);
	};

	goStmt() {
	    return this.getTypedRuleContext(GoStmtContext,0);
	};

	returnStmt() {
	    return this.getTypedRuleContext(ReturnStmtContext,0);
	};

	breakStmt() {
	    return this.getTypedRuleContext(BreakStmtContext,0);
	};

	continueStmt() {
	    return this.getTypedRuleContext(ContinueStmtContext,0);
	};

	gotoStmt() {
	    return this.getTypedRuleContext(GotoStmtContext,0);
	};

	fallthroughStmt() {
	    return this.getTypedRuleContext(FallthroughStmtContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	ifStmt() {
	    return this.getTypedRuleContext(IfStmtContext,0);
	};

	switchStmt() {
	    return this.getTypedRuleContext(SwitchStmtContext,0);
	};

	selectStmt() {
	    return this.getTypedRuleContext(SelectStmtContext,0);
	};

	forStmt() {
	    return this.getTypedRuleContext(ForStmtContext,0);
	};

	deferStmt() {
	    return this.getTypedRuleContext(DeferStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_simpleStmt;
    }

	sendStmt() {
	    return this.getTypedRuleContext(SendStmtContext,0);
	};

	incDecStmt() {
	    return this.getTypedRuleContext(IncDecStmtContext,0);
	};

	assignment() {
	    return this.getTypedRuleContext(AssignmentContext,0);
	};

	expressionStmt() {
	    return this.getTypedRuleContext(ExpressionStmtContext,0);
	};

	shortVarDecl() {
	    return this.getTypedRuleContext(ShortVarDeclContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterSimpleStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitSimpleStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitSimpleStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_expressionStmt;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterExpressionStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitExpressionStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitExpressionStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SendStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_sendStmt;
        this.channel = null;
    }

	RECEIVE() {
	    return this.getToken(GoParser.RECEIVE, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterSendStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitSendStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitSendStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IncDecStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_incDecStmt;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	PLUS_PLUS() {
	    return this.getToken(GoParser.PLUS_PLUS, 0);
	};

	MINUS_MINUS() {
	    return this.getToken(GoParser.MINUS_MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterIncDecStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitIncDecStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitIncDecStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_assignment;
    }

	expressionList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionListContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionListContext,i);
	    }
	};

	assign_op() {
	    return this.getTypedRuleContext(Assign_opContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterAssignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitAssignment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitAssignment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Assign_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_assign_op;
    }

	ASSIGN() {
	    return this.getToken(GoParser.ASSIGN, 0);
	};

	PLUS() {
	    return this.getToken(GoParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(GoParser.MINUS, 0);
	};

	OR() {
	    return this.getToken(GoParser.OR, 0);
	};

	CARET() {
	    return this.getToken(GoParser.CARET, 0);
	};

	STAR() {
	    return this.getToken(GoParser.STAR, 0);
	};

	DIV() {
	    return this.getToken(GoParser.DIV, 0);
	};

	MOD() {
	    return this.getToken(GoParser.MOD, 0);
	};

	LSHIFT() {
	    return this.getToken(GoParser.LSHIFT, 0);
	};

	RSHIFT() {
	    return this.getToken(GoParser.RSHIFT, 0);
	};

	AMPERSAND() {
	    return this.getToken(GoParser.AMPERSAND, 0);
	};

	BIT_CLEAR() {
	    return this.getToken(GoParser.BIT_CLEAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterAssign_op(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitAssign_op(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitAssign_op(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShortVarDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_shortVarDecl;
    }

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	DECLARE_ASSIGN() {
	    return this.getToken(GoParser.DECLARE_ASSIGN, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterShortVarDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitShortVarDecl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitShortVarDecl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabeledStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_labeledStmt;
    }

	IDENTIFIER() {
	    return this.getToken(GoParser.IDENTIFIER, 0);
	};

	COLON() {
	    return this.getToken(GoParser.COLON, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterLabeledStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitLabeledStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitLabeledStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReturnStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_returnStmt;
    }

	RETURN() {
	    return this.getToken(GoParser.RETURN, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterReturnStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitReturnStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitReturnStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BreakStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_breakStmt;
    }

	BREAK() {
	    return this.getToken(GoParser.BREAK, 0);
	};

	IDENTIFIER() {
	    return this.getToken(GoParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterBreakStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitBreakStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitBreakStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ContinueStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_continueStmt;
    }

	CONTINUE() {
	    return this.getToken(GoParser.CONTINUE, 0);
	};

	IDENTIFIER() {
	    return this.getToken(GoParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterContinueStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitContinueStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitContinueStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GotoStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_gotoStmt;
    }

	GOTO() {
	    return this.getToken(GoParser.GOTO, 0);
	};

	IDENTIFIER() {
	    return this.getToken(GoParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterGotoStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitGotoStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitGotoStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FallthroughStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_fallthroughStmt;
    }

	FALLTHROUGH() {
	    return this.getToken(GoParser.FALLTHROUGH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterFallthroughStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitFallthroughStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitFallthroughStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeferStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_deferStmt;
    }

	DEFER() {
	    return this.getToken(GoParser.DEFER, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterDeferStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitDeferStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitDeferStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IfStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_ifStmt;
    }

	IF() {
	    return this.getToken(GoParser.IF, 0);
	};

	block = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockContext);
	    } else {
	        return this.getTypedRuleContext(BlockContext,i);
	    }
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	simpleStmt() {
	    return this.getTypedRuleContext(SimpleStmtContext,0);
	};

	ELSE() {
	    return this.getToken(GoParser.ELSE, 0);
	};

	ifStmt() {
	    return this.getTypedRuleContext(IfStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterIfStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitIfStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitIfStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SwitchStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_switchStmt;
    }

	exprSwitchStmt() {
	    return this.getTypedRuleContext(ExprSwitchStmtContext,0);
	};

	typeSwitchStmt() {
	    return this.getTypedRuleContext(TypeSwitchStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterSwitchStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitSwitchStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitSwitchStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExprSwitchStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_exprSwitchStmt;
    }

	SWITCH() {
	    return this.getToken(GoParser.SWITCH, 0);
	};

	L_CURLY() {
	    return this.getToken(GoParser.L_CURLY, 0);
	};

	R_CURLY() {
	    return this.getToken(GoParser.R_CURLY, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	exprCaseClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprCaseClauseContext);
	    } else {
	        return this.getTypedRuleContext(ExprCaseClauseContext,i);
	    }
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	simpleStmt() {
	    return this.getTypedRuleContext(SimpleStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterExprSwitchStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitExprSwitchStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitExprSwitchStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExprCaseClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_exprCaseClause;
    }

	exprSwitchCase() {
	    return this.getTypedRuleContext(ExprSwitchCaseContext,0);
	};

	COLON() {
	    return this.getToken(GoParser.COLON, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterExprCaseClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitExprCaseClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitExprCaseClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExprSwitchCaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_exprSwitchCase;
    }

	CASE() {
	    return this.getToken(GoParser.CASE, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	DEFAULT() {
	    return this.getToken(GoParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterExprSwitchCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitExprSwitchCase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitExprSwitchCase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeSwitchStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_typeSwitchStmt;
    }

	SWITCH() {
	    return this.getToken(GoParser.SWITCH, 0);
	};

	L_CURLY() {
	    return this.getToken(GoParser.L_CURLY, 0);
	};

	R_CURLY() {
	    return this.getToken(GoParser.R_CURLY, 0);
	};

	typeSwitchGuard() {
	    return this.getTypedRuleContext(TypeSwitchGuardContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	simpleStmt() {
	    return this.getTypedRuleContext(SimpleStmtContext,0);
	};

	typeCaseClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeCaseClauseContext);
	    } else {
	        return this.getTypedRuleContext(TypeCaseClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterTypeSwitchStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitTypeSwitchStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitTypeSwitchStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeSwitchGuardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_typeSwitchGuard;
    }

	primaryExpr() {
	    return this.getTypedRuleContext(PrimaryExprContext,0);
	};

	DOT() {
	    return this.getToken(GoParser.DOT, 0);
	};

	L_PAREN() {
	    return this.getToken(GoParser.L_PAREN, 0);
	};

	TYPE() {
	    return this.getToken(GoParser.TYPE, 0);
	};

	R_PAREN() {
	    return this.getToken(GoParser.R_PAREN, 0);
	};

	IDENTIFIER() {
	    return this.getToken(GoParser.IDENTIFIER, 0);
	};

	DECLARE_ASSIGN() {
	    return this.getToken(GoParser.DECLARE_ASSIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterTypeSwitchGuard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitTypeSwitchGuard(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitTypeSwitchGuard(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeCaseClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_typeCaseClause;
    }

	typeSwitchCase() {
	    return this.getTypedRuleContext(TypeSwitchCaseContext,0);
	};

	COLON() {
	    return this.getToken(GoParser.COLON, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterTypeCaseClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitTypeCaseClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitTypeCaseClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeSwitchCaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_typeSwitchCase;
    }

	CASE() {
	    return this.getToken(GoParser.CASE, 0);
	};

	typeList() {
	    return this.getTypedRuleContext(TypeListContext,0);
	};

	DEFAULT() {
	    return this.getToken(GoParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterTypeSwitchCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitTypeSwitchCase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitTypeSwitchCase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_typeList;
    }

	type_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_Context);
	    } else {
	        return this.getTypedRuleContext(Type_Context,i);
	    }
	};

	NIL_LIT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GoParser.NIL_LIT);
	    } else {
	        return this.getToken(GoParser.NIL_LIT, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GoParser.COMMA);
	    } else {
	        return this.getToken(GoParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterTypeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitTypeList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitTypeList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_selectStmt;
    }

	SELECT() {
	    return this.getToken(GoParser.SELECT, 0);
	};

	L_CURLY() {
	    return this.getToken(GoParser.L_CURLY, 0);
	};

	R_CURLY() {
	    return this.getToken(GoParser.R_CURLY, 0);
	};

	commClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CommClauseContext);
	    } else {
	        return this.getTypedRuleContext(CommClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterSelectStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitSelectStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitSelectStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CommClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_commClause;
    }

	commCase() {
	    return this.getTypedRuleContext(CommCaseContext,0);
	};

	COLON() {
	    return this.getToken(GoParser.COLON, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterCommClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitCommClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitCommClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CommCaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_commCase;
    }

	CASE() {
	    return this.getToken(GoParser.CASE, 0);
	};

	sendStmt() {
	    return this.getTypedRuleContext(SendStmtContext,0);
	};

	recvStmt() {
	    return this.getTypedRuleContext(RecvStmtContext,0);
	};

	DEFAULT() {
	    return this.getToken(GoParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterCommCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitCommCase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitCommCase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RecvStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_recvStmt;
        this.recvExpr = null;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	ASSIGN() {
	    return this.getToken(GoParser.ASSIGN, 0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	DECLARE_ASSIGN() {
	    return this.getToken(GoParser.DECLARE_ASSIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterRecvStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitRecvStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitRecvStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_forStmt;
    }

	FOR() {
	    return this.getToken(GoParser.FOR, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	forClause() {
	    return this.getTypedRuleContext(ForClauseContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	rangeClause() {
	    return this.getTypedRuleContext(RangeClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterForStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitForStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitForStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_forClause;
        this.initStmt = null;
        this.postStmt = null;
    }

	eos = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EosContext);
	    } else {
	        return this.getTypedRuleContext(EosContext,i);
	    }
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	simpleStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleStmtContext);
	    } else {
	        return this.getTypedRuleContext(SimpleStmtContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterForClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitForClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitForClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RangeClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_rangeClause;
    }

	RANGE() {
	    return this.getToken(GoParser.RANGE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	ASSIGN() {
	    return this.getToken(GoParser.ASSIGN, 0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	DECLARE_ASSIGN() {
	    return this.getToken(GoParser.DECLARE_ASSIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterRangeClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitRangeClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitRangeClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GoStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_goStmt;
    }

	GO() {
	    return this.getToken(GoParser.GO, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterGoStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitGoStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitGoStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Type_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_type_;
    }

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	typeArgs() {
	    return this.getTypedRuleContext(TypeArgsContext,0);
	};

	typeLit() {
	    return this.getTypedRuleContext(TypeLitContext,0);
	};

	L_PAREN() {
	    return this.getToken(GoParser.L_PAREN, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	R_PAREN() {
	    return this.getToken(GoParser.R_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterType_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitType_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitType_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeArgsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_typeArgs;
    }

	L_BRACKET() {
	    return this.getToken(GoParser.L_BRACKET, 0);
	};

	typeList() {
	    return this.getTypedRuleContext(TypeListContext,0);
	};

	R_BRACKET() {
	    return this.getToken(GoParser.R_BRACKET, 0);
	};

	COMMA() {
	    return this.getToken(GoParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterTypeArgs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitTypeArgs(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitTypeArgs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_typeName;
    }

	qualifiedIdent() {
	    return this.getTypedRuleContext(QualifiedIdentContext,0);
	};

	IDENTIFIER() {
	    return this.getToken(GoParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitTypeName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitTypeName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeLitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_typeLit;
    }

	arrayType() {
	    return this.getTypedRuleContext(ArrayTypeContext,0);
	};

	structType() {
	    return this.getTypedRuleContext(StructTypeContext,0);
	};

	pointerType() {
	    return this.getTypedRuleContext(PointerTypeContext,0);
	};

	functionType() {
	    return this.getTypedRuleContext(FunctionTypeContext,0);
	};

	interfaceType() {
	    return this.getTypedRuleContext(InterfaceTypeContext,0);
	};

	sliceType() {
	    return this.getTypedRuleContext(SliceTypeContext,0);
	};

	mapType() {
	    return this.getTypedRuleContext(MapTypeContext,0);
	};

	channelType() {
	    return this.getTypedRuleContext(ChannelTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterTypeLit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitTypeLit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitTypeLit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_arrayType;
    }

	L_BRACKET() {
	    return this.getToken(GoParser.L_BRACKET, 0);
	};

	arrayLength() {
	    return this.getTypedRuleContext(ArrayLengthContext,0);
	};

	R_BRACKET() {
	    return this.getToken(GoParser.R_BRACKET, 0);
	};

	elementType() {
	    return this.getTypedRuleContext(ElementTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterArrayType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitArrayType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitArrayType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayLengthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_arrayLength;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterArrayLength(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitArrayLength(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitArrayLength(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_elementType;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterElementType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitElementType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitElementType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PointerTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_pointerType;
    }

	STAR() {
	    return this.getToken(GoParser.STAR, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterPointerType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitPointerType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitPointerType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_interfaceType;
    }

	INTERFACE() {
	    return this.getToken(GoParser.INTERFACE, 0);
	};

	L_CURLY() {
	    return this.getToken(GoParser.L_CURLY, 0);
	};

	R_CURLY() {
	    return this.getToken(GoParser.R_CURLY, 0);
	};

	eos = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EosContext);
	    } else {
	        return this.getTypedRuleContext(EosContext,i);
	    }
	};

	methodSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MethodSpecContext);
	    } else {
	        return this.getTypedRuleContext(MethodSpecContext,i);
	    }
	};

	typeElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeElementContext);
	    } else {
	        return this.getTypedRuleContext(TypeElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterInterfaceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitInterfaceType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitInterfaceType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SliceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_sliceType;
    }

	L_BRACKET() {
	    return this.getToken(GoParser.L_BRACKET, 0);
	};

	R_BRACKET() {
	    return this.getToken(GoParser.R_BRACKET, 0);
	};

	elementType() {
	    return this.getTypedRuleContext(ElementTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterSliceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitSliceType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitSliceType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MapTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_mapType;
    }

	MAP() {
	    return this.getToken(GoParser.MAP, 0);
	};

	L_BRACKET() {
	    return this.getToken(GoParser.L_BRACKET, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	R_BRACKET() {
	    return this.getToken(GoParser.R_BRACKET, 0);
	};

	elementType() {
	    return this.getTypedRuleContext(ElementTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterMapType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitMapType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitMapType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChannelTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_channelType;
    }

	elementType() {
	    return this.getTypedRuleContext(ElementTypeContext,0);
	};

	CHAN() {
	    return this.getToken(GoParser.CHAN, 0);
	};

	RECEIVE() {
	    return this.getToken(GoParser.RECEIVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterChannelType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitChannelType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitChannelType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_methodSpec;
    }

	IDENTIFIER() {
	    return this.getToken(GoParser.IDENTIFIER, 0);
	};

	parameters() {
	    return this.getTypedRuleContext(ParametersContext,0);
	};

	result() {
	    return this.getTypedRuleContext(ResultContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterMethodSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitMethodSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitMethodSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_functionType;
    }

	FUNC() {
	    return this.getToken(GoParser.FUNC, 0);
	};

	signature() {
	    return this.getTypedRuleContext(SignatureContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterFunctionType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitFunctionType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitFunctionType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SignatureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_signature;
    }

	parameters() {
	    return this.getTypedRuleContext(ParametersContext,0);
	};

	result() {
	    return this.getTypedRuleContext(ResultContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterSignature(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitSignature(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitSignature(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_result;
    }

	parameters() {
	    return this.getTypedRuleContext(ParametersContext,0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterResult(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitResult(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitResult(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_parameters;
    }

	L_PAREN() {
	    return this.getToken(GoParser.L_PAREN, 0);
	};

	R_PAREN() {
	    return this.getToken(GoParser.R_PAREN, 0);
	};

	parameterDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParameterDeclContext);
	    } else {
	        return this.getTypedRuleContext(ParameterDeclContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GoParser.COMMA);
	    } else {
	        return this.getToken(GoParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitParameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParameterDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_parameterDecl;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	ELLIPSIS() {
	    return this.getToken(GoParser.ELLIPSIS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterParameterDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitParameterDecl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitParameterDecl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_expression;
        this.unary_op = null;
        this.mul_op = null;
        this.add_op = null;
        this.rel_op = null;
    }

	primaryExpr() {
	    return this.getTypedRuleContext(PrimaryExprContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	PLUS() {
	    return this.getToken(GoParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(GoParser.MINUS, 0);
	};

	EXCLAMATION() {
	    return this.getToken(GoParser.EXCLAMATION, 0);
	};

	CARET() {
	    return this.getToken(GoParser.CARET, 0);
	};

	STAR() {
	    return this.getToken(GoParser.STAR, 0);
	};

	AMPERSAND() {
	    return this.getToken(GoParser.AMPERSAND, 0);
	};

	RECEIVE() {
	    return this.getToken(GoParser.RECEIVE, 0);
	};

	DIV() {
	    return this.getToken(GoParser.DIV, 0);
	};

	MOD() {
	    return this.getToken(GoParser.MOD, 0);
	};

	LSHIFT() {
	    return this.getToken(GoParser.LSHIFT, 0);
	};

	RSHIFT() {
	    return this.getToken(GoParser.RSHIFT, 0);
	};

	BIT_CLEAR() {
	    return this.getToken(GoParser.BIT_CLEAR, 0);
	};

	OR() {
	    return this.getToken(GoParser.OR, 0);
	};

	EQUALS() {
	    return this.getToken(GoParser.EQUALS, 0);
	};

	NOT_EQUALS() {
	    return this.getToken(GoParser.NOT_EQUALS, 0);
	};

	LESS() {
	    return this.getToken(GoParser.LESS, 0);
	};

	LESS_OR_EQUALS() {
	    return this.getToken(GoParser.LESS_OR_EQUALS, 0);
	};

	GREATER() {
	    return this.getToken(GoParser.GREATER, 0);
	};

	GREATER_OR_EQUALS() {
	    return this.getToken(GoParser.GREATER_OR_EQUALS, 0);
	};

	LOGICAL_AND() {
	    return this.getToken(GoParser.LOGICAL_AND, 0);
	};

	LOGICAL_OR() {
	    return this.getToken(GoParser.LOGICAL_OR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimaryExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_primaryExpr;
    }

	operand() {
	    return this.getTypedRuleContext(OperandContext,0);
	};

	conversion() {
	    return this.getTypedRuleContext(ConversionContext,0);
	};

	methodExpr() {
	    return this.getTypedRuleContext(MethodExprContext,0);
	};

	primaryExpr() {
	    return this.getTypedRuleContext(PrimaryExprContext,0);
	};

	DOT() {
	    return this.getToken(GoParser.DOT, 0);
	};

	IDENTIFIER() {
	    return this.getToken(GoParser.IDENTIFIER, 0);
	};

	index() {
	    return this.getTypedRuleContext(IndexContext,0);
	};

	slice_() {
	    return this.getTypedRuleContext(Slice_Context,0);
	};

	typeAssertion() {
	    return this.getTypedRuleContext(TypeAssertionContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterPrimaryExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitPrimaryExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitPrimaryExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConversionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_conversion;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	L_PAREN() {
	    return this.getToken(GoParser.L_PAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	R_PAREN() {
	    return this.getToken(GoParser.R_PAREN, 0);
	};

	COMMA() {
	    return this.getToken(GoParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterConversion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitConversion(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitConversion(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OperandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_operand;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	operandName() {
	    return this.getTypedRuleContext(OperandNameContext,0);
	};

	typeArgs() {
	    return this.getTypedRuleContext(TypeArgsContext,0);
	};

	L_PAREN() {
	    return this.getToken(GoParser.L_PAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	R_PAREN() {
	    return this.getToken(GoParser.R_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterOperand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitOperand(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitOperand(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_literal;
    }

	basicLit() {
	    return this.getTypedRuleContext(BasicLitContext,0);
	};

	compositeLit() {
	    return this.getTypedRuleContext(CompositeLitContext,0);
	};

	functionLit() {
	    return this.getTypedRuleContext(FunctionLitContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BasicLitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_basicLit;
    }

	NIL_LIT() {
	    return this.getToken(GoParser.NIL_LIT, 0);
	};

	integer() {
	    return this.getTypedRuleContext(IntegerContext,0);
	};

	string_() {
	    return this.getTypedRuleContext(String_Context,0);
	};

	FLOAT_LIT() {
	    return this.getToken(GoParser.FLOAT_LIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterBasicLit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitBasicLit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitBasicLit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntegerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_integer;
    }

	DECIMAL_LIT() {
	    return this.getToken(GoParser.DECIMAL_LIT, 0);
	};

	BINARY_LIT() {
	    return this.getToken(GoParser.BINARY_LIT, 0);
	};

	OCTAL_LIT() {
	    return this.getToken(GoParser.OCTAL_LIT, 0);
	};

	HEX_LIT() {
	    return this.getToken(GoParser.HEX_LIT, 0);
	};

	IMAGINARY_LIT() {
	    return this.getToken(GoParser.IMAGINARY_LIT, 0);
	};

	RUNE_LIT() {
	    return this.getToken(GoParser.RUNE_LIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterInteger(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitInteger(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitInteger(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OperandNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_operandName;
    }

	IDENTIFIER() {
	    return this.getToken(GoParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterOperandName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitOperandName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitOperandName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QualifiedIdentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_qualifiedIdent;
    }

	IDENTIFIER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GoParser.IDENTIFIER);
	    } else {
	        return this.getToken(GoParser.IDENTIFIER, i);
	    }
	};


	DOT() {
	    return this.getToken(GoParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterQualifiedIdent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitQualifiedIdent(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitQualifiedIdent(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CompositeLitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_compositeLit;
    }

	literalType() {
	    return this.getTypedRuleContext(LiteralTypeContext,0);
	};

	literalValue() {
	    return this.getTypedRuleContext(LiteralValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterCompositeLit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitCompositeLit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitCompositeLit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LiteralTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_literalType;
    }

	structType() {
	    return this.getTypedRuleContext(StructTypeContext,0);
	};

	arrayType() {
	    return this.getTypedRuleContext(ArrayTypeContext,0);
	};

	L_BRACKET() {
	    return this.getToken(GoParser.L_BRACKET, 0);
	};

	ELLIPSIS() {
	    return this.getToken(GoParser.ELLIPSIS, 0);
	};

	R_BRACKET() {
	    return this.getToken(GoParser.R_BRACKET, 0);
	};

	elementType() {
	    return this.getTypedRuleContext(ElementTypeContext,0);
	};

	sliceType() {
	    return this.getTypedRuleContext(SliceTypeContext,0);
	};

	mapType() {
	    return this.getTypedRuleContext(MapTypeContext,0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	typeArgs() {
	    return this.getTypedRuleContext(TypeArgsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterLiteralType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitLiteralType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitLiteralType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LiteralValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_literalValue;
    }

	L_CURLY() {
	    return this.getToken(GoParser.L_CURLY, 0);
	};

	R_CURLY() {
	    return this.getToken(GoParser.R_CURLY, 0);
	};

	elementList() {
	    return this.getTypedRuleContext(ElementListContext,0);
	};

	COMMA() {
	    return this.getToken(GoParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterLiteralValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitLiteralValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitLiteralValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_elementList;
    }

	keyedElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(KeyedElementContext);
	    } else {
	        return this.getTypedRuleContext(KeyedElementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GoParser.COMMA);
	    } else {
	        return this.getToken(GoParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterElementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitElementList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitElementList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeyedElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_keyedElement;
    }

	element() {
	    return this.getTypedRuleContext(ElementContext,0);
	};

	key() {
	    return this.getTypedRuleContext(KeyContext,0);
	};

	COLON() {
	    return this.getToken(GoParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterKeyedElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitKeyedElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitKeyedElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_key;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	literalValue() {
	    return this.getTypedRuleContext(LiteralValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitKey(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitKey(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_element;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	literalValue() {
	    return this.getTypedRuleContext(LiteralValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StructTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_structType;
    }

	STRUCT() {
	    return this.getToken(GoParser.STRUCT, 0);
	};

	L_CURLY() {
	    return this.getToken(GoParser.L_CURLY, 0);
	};

	R_CURLY() {
	    return this.getToken(GoParser.R_CURLY, 0);
	};

	fieldDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FieldDeclContext);
	    } else {
	        return this.getTypedRuleContext(FieldDeclContext,i);
	    }
	};

	eos = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EosContext);
	    } else {
	        return this.getTypedRuleContext(EosContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterStructType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitStructType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitStructType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_fieldDecl;
        this.tag = null;
    }

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	embeddedField() {
	    return this.getTypedRuleContext(EmbeddedFieldContext,0);
	};

	string_() {
	    return this.getTypedRuleContext(String_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterFieldDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitFieldDecl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitFieldDecl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class String_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_string_;
    }

	RAW_STRING_LIT() {
	    return this.getToken(GoParser.RAW_STRING_LIT, 0);
	};

	INTERPRETED_STRING_LIT() {
	    return this.getToken(GoParser.INTERPRETED_STRING_LIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterString_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitString_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitString_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EmbeddedFieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_embeddedField;
    }

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	STAR() {
	    return this.getToken(GoParser.STAR, 0);
	};

	typeArgs() {
	    return this.getTypedRuleContext(TypeArgsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterEmbeddedField(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitEmbeddedField(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitEmbeddedField(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionLitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_functionLit;
    }

	FUNC() {
	    return this.getToken(GoParser.FUNC, 0);
	};

	signature() {
	    return this.getTypedRuleContext(SignatureContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterFunctionLit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitFunctionLit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitFunctionLit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_index;
    }

	L_BRACKET() {
	    return this.getToken(GoParser.L_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	R_BRACKET() {
	    return this.getToken(GoParser.R_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitIndex(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitIndex(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Slice_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_slice_;
    }

	L_BRACKET() {
	    return this.getToken(GoParser.L_BRACKET, 0);
	};

	R_BRACKET() {
	    return this.getToken(GoParser.R_BRACKET, 0);
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GoParser.COLON);
	    } else {
	        return this.getToken(GoParser.COLON, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterSlice_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitSlice_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitSlice_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeAssertionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_typeAssertion;
    }

	DOT() {
	    return this.getToken(GoParser.DOT, 0);
	};

	L_PAREN() {
	    return this.getToken(GoParser.L_PAREN, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	R_PAREN() {
	    return this.getToken(GoParser.R_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterTypeAssertion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitTypeAssertion(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitTypeAssertion(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_arguments;
    }

	L_PAREN() {
	    return this.getToken(GoParser.L_PAREN, 0);
	};

	R_PAREN() {
	    return this.getToken(GoParser.R_PAREN, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	ELLIPSIS() {
	    return this.getToken(GoParser.ELLIPSIS, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GoParser.COMMA);
	    } else {
	        return this.getToken(GoParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitArguments(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitArguments(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_methodExpr;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	DOT() {
	    return this.getToken(GoParser.DOT, 0);
	};

	IDENTIFIER() {
	    return this.getToken(GoParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterMethodExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitMethodExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitMethodExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EosContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GoParser.RULE_eos;
    }

	SEMI() {
	    return this.getToken(GoParser.SEMI, 0);
	};

	EOF() {
	    return this.getToken(GoParser.EOF, 0);
	};

	EOS() {
	    return this.getToken(GoParser.EOS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.enterEos(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GoParserListener ) {
	        listener.exitEos(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof GoParserVisitor ) {
	        return visitor.visitEos(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




GoParser.SourceFileContext = SourceFileContext; 
GoParser.PackageClauseContext = PackageClauseContext; 
GoParser.ImportDeclContext = ImportDeclContext; 
GoParser.ImportSpecContext = ImportSpecContext; 
GoParser.ImportPathContext = ImportPathContext; 
GoParser.DeclarationContext = DeclarationContext; 
GoParser.ConstDeclContext = ConstDeclContext; 
GoParser.ConstSpecContext = ConstSpecContext; 
GoParser.IdentifierListContext = IdentifierListContext; 
GoParser.ExpressionListContext = ExpressionListContext; 
GoParser.TypeDeclContext = TypeDeclContext; 
GoParser.TypeSpecContext = TypeSpecContext; 
GoParser.AliasDeclContext = AliasDeclContext; 
GoParser.TypeDefContext = TypeDefContext; 
GoParser.TypeParametersContext = TypeParametersContext; 
GoParser.TypeParameterDeclContext = TypeParameterDeclContext; 
GoParser.TypeElementContext = TypeElementContext; 
GoParser.TypeTermContext = TypeTermContext; 
GoParser.FunctionDeclContext = FunctionDeclContext; 
GoParser.MethodDeclContext = MethodDeclContext; 
GoParser.ReceiverContext = ReceiverContext; 
GoParser.VarDeclContext = VarDeclContext; 
GoParser.VarSpecContext = VarSpecContext; 
GoParser.BlockContext = BlockContext; 
GoParser.StatementListContext = StatementListContext; 
GoParser.StatementContext = StatementContext; 
GoParser.SimpleStmtContext = SimpleStmtContext; 
GoParser.ExpressionStmtContext = ExpressionStmtContext; 
GoParser.SendStmtContext = SendStmtContext; 
GoParser.IncDecStmtContext = IncDecStmtContext; 
GoParser.AssignmentContext = AssignmentContext; 
GoParser.Assign_opContext = Assign_opContext; 
GoParser.ShortVarDeclContext = ShortVarDeclContext; 
GoParser.LabeledStmtContext = LabeledStmtContext; 
GoParser.ReturnStmtContext = ReturnStmtContext; 
GoParser.BreakStmtContext = BreakStmtContext; 
GoParser.ContinueStmtContext = ContinueStmtContext; 
GoParser.GotoStmtContext = GotoStmtContext; 
GoParser.FallthroughStmtContext = FallthroughStmtContext; 
GoParser.DeferStmtContext = DeferStmtContext; 
GoParser.IfStmtContext = IfStmtContext; 
GoParser.SwitchStmtContext = SwitchStmtContext; 
GoParser.ExprSwitchStmtContext = ExprSwitchStmtContext; 
GoParser.ExprCaseClauseContext = ExprCaseClauseContext; 
GoParser.ExprSwitchCaseContext = ExprSwitchCaseContext; 
GoParser.TypeSwitchStmtContext = TypeSwitchStmtContext; 
GoParser.TypeSwitchGuardContext = TypeSwitchGuardContext; 
GoParser.TypeCaseClauseContext = TypeCaseClauseContext; 
GoParser.TypeSwitchCaseContext = TypeSwitchCaseContext; 
GoParser.TypeListContext = TypeListContext; 
GoParser.SelectStmtContext = SelectStmtContext; 
GoParser.CommClauseContext = CommClauseContext; 
GoParser.CommCaseContext = CommCaseContext; 
GoParser.RecvStmtContext = RecvStmtContext; 
GoParser.ForStmtContext = ForStmtContext; 
GoParser.ForClauseContext = ForClauseContext; 
GoParser.RangeClauseContext = RangeClauseContext; 
GoParser.GoStmtContext = GoStmtContext; 
GoParser.Type_Context = Type_Context; 
GoParser.TypeArgsContext = TypeArgsContext; 
GoParser.TypeNameContext = TypeNameContext; 
GoParser.TypeLitContext = TypeLitContext; 
GoParser.ArrayTypeContext = ArrayTypeContext; 
GoParser.ArrayLengthContext = ArrayLengthContext; 
GoParser.ElementTypeContext = ElementTypeContext; 
GoParser.PointerTypeContext = PointerTypeContext; 
GoParser.InterfaceTypeContext = InterfaceTypeContext; 
GoParser.SliceTypeContext = SliceTypeContext; 
GoParser.MapTypeContext = MapTypeContext; 
GoParser.ChannelTypeContext = ChannelTypeContext; 
GoParser.MethodSpecContext = MethodSpecContext; 
GoParser.FunctionTypeContext = FunctionTypeContext; 
GoParser.SignatureContext = SignatureContext; 
GoParser.ResultContext = ResultContext; 
GoParser.ParametersContext = ParametersContext; 
GoParser.ParameterDeclContext = ParameterDeclContext; 
GoParser.ExpressionContext = ExpressionContext; 
GoParser.PrimaryExprContext = PrimaryExprContext; 
GoParser.ConversionContext = ConversionContext; 
GoParser.OperandContext = OperandContext; 
GoParser.LiteralContext = LiteralContext; 
GoParser.BasicLitContext = BasicLitContext; 
GoParser.IntegerContext = IntegerContext; 
GoParser.OperandNameContext = OperandNameContext; 
GoParser.QualifiedIdentContext = QualifiedIdentContext; 
GoParser.CompositeLitContext = CompositeLitContext; 
GoParser.LiteralTypeContext = LiteralTypeContext; 
GoParser.LiteralValueContext = LiteralValueContext; 
GoParser.ElementListContext = ElementListContext; 
GoParser.KeyedElementContext = KeyedElementContext; 
GoParser.KeyContext = KeyContext; 
GoParser.ElementContext = ElementContext; 
GoParser.StructTypeContext = StructTypeContext; 
GoParser.FieldDeclContext = FieldDeclContext; 
GoParser.String_Context = String_Context; 
GoParser.EmbeddedFieldContext = EmbeddedFieldContext; 
GoParser.FunctionLitContext = FunctionLitContext; 
GoParser.IndexContext = IndexContext; 
GoParser.Slice_Context = Slice_Context; 
GoParser.TypeAssertionContext = TypeAssertionContext; 
GoParser.ArgumentsContext = ArgumentsContext; 
GoParser.MethodExprContext = MethodExprContext; 
GoParser.EosContext = EosContext; 
