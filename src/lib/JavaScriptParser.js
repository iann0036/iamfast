// Generated from grammars/JavaScriptParser.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';
import JavaScriptParserListener from './JavaScriptParserListener.js';
import JavaScriptParserVisitor from './JavaScriptParserVisitor.js';

import JavaScriptParserBase from './JavaScriptParserBase.js';

const serializedATN = [4,1,127,1029,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,1,0,3,0,156,
8,0,1,0,3,0,159,8,0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,185,8,2,1,3,1,3,3,3,189,
8,3,1,3,1,3,1,4,4,4,194,8,4,11,4,12,4,195,1,5,1,5,1,5,1,6,3,6,202,8,6,1,
6,1,6,3,6,206,8,6,1,6,1,6,1,6,1,6,1,6,3,6,213,8,6,1,7,1,7,1,7,1,7,5,7,219,
8,7,10,7,12,7,222,9,7,1,7,1,7,3,7,226,8,7,3,7,228,8,7,1,7,1,7,1,8,1,8,1,
8,1,9,1,9,3,9,237,8,9,1,9,1,9,3,9,241,8,9,1,10,1,10,1,10,1,11,1,11,1,11,
3,11,249,8,11,1,12,1,12,1,12,3,12,254,8,12,1,12,1,12,1,12,1,12,1,12,1,12,
1,12,3,12,263,8,12,1,13,1,13,1,13,1,13,1,13,1,13,3,13,271,8,13,1,13,1,13,
3,13,275,8,13,1,14,1,14,1,14,3,14,280,8,14,1,15,1,15,1,15,1,16,1,16,1,16,
1,16,5,16,289,8,16,10,16,12,16,292,9,16,1,17,1,17,1,17,3,17,297,8,17,1,18,
1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,312,8,20,
1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
21,1,21,1,21,1,21,3,21,332,8,21,1,21,1,21,3,21,336,8,21,1,21,1,21,3,21,340,
8,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,348,8,21,1,21,1,21,1,21,1,21,1,21,
1,21,1,21,3,21,357,8,21,1,21,1,21,1,21,3,21,362,8,21,1,21,1,21,1,21,1,21,
1,21,1,21,3,21,370,8,21,1,22,1,22,1,22,3,22,375,8,22,1,23,1,23,1,23,3,23,
380,8,23,1,23,1,23,1,24,1,24,1,24,3,24,387,8,24,1,24,1,24,1,25,1,25,1,25,
3,25,394,8,25,1,25,1,25,1,26,1,26,1,26,3,26,401,8,26,1,26,1,26,1,27,1,27,
1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,3,29,419,8,29,
1,29,1,29,3,29,423,8,29,3,29,425,8,29,1,29,1,29,1,30,4,30,430,8,30,11,30,
12,30,431,1,31,1,31,1,31,1,31,3,31,438,8,31,1,32,1,32,1,32,3,32,443,8,32,
1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,3,35,458,
8,35,1,35,3,35,461,8,35,1,36,1,36,1,36,3,36,466,8,36,1,36,3,36,469,8,36,
1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,3,39,480,8,39,1,39,1,39,3,39,
484,8,39,1,39,1,39,1,39,3,39,489,8,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,
1,41,1,41,3,41,500,8,41,1,41,1,41,5,41,504,8,41,10,41,12,41,507,9,41,1,41,
1,41,1,42,1,42,1,42,1,42,5,42,515,8,42,10,42,12,42,518,9,42,1,42,1,42,1,
42,1,42,1,42,1,42,3,42,526,8,42,1,42,1,42,3,42,530,8,42,1,42,1,42,1,42,1,
42,3,42,536,8,42,1,43,3,43,539,8,43,1,43,3,43,542,8,43,1,43,1,43,1,43,3,
43,547,8,43,1,43,1,43,1,43,1,43,3,43,553,8,43,1,43,3,43,556,8,43,1,43,1,
43,1,43,1,43,1,43,1,43,3,43,564,8,43,1,43,3,43,567,8,43,1,43,1,43,1,43,3,
43,572,8,43,1,43,1,43,1,43,3,43,577,8,43,1,44,1,44,1,44,5,44,582,8,44,10,
44,12,44,585,9,44,1,44,1,44,3,44,589,8,44,1,44,3,44,592,8,44,1,45,1,45,1,
45,3,45,597,8,45,1,46,1,46,1,46,1,47,1,47,3,47,604,8,47,1,47,1,47,1,48,4,
48,609,8,48,11,48,12,48,610,1,49,1,49,1,49,1,49,1,50,5,50,618,8,50,10,50,
12,50,621,9,50,1,50,3,50,624,8,50,1,50,4,50,627,8,50,11,50,12,50,628,1,50,
5,50,632,8,50,10,50,12,50,635,9,50,1,50,5,50,638,8,50,10,50,12,50,641,9,
50,1,51,3,51,644,8,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
1,52,1,52,1,52,3,52,659,8,52,1,52,3,52,662,8,52,1,52,1,52,1,52,3,52,667,
8,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,
52,1,52,3,52,684,8,52,1,52,3,52,687,8,52,1,53,1,53,1,53,1,53,1,53,1,53,1,
53,3,53,696,8,53,1,54,1,54,1,54,1,54,5,54,702,8,54,10,54,12,54,705,9,54,
1,54,3,54,708,8,54,3,54,710,8,54,1,54,1,54,1,55,3,55,715,8,55,1,55,1,55,
3,55,719,8,55,1,56,1,56,1,56,5,56,724,8,56,10,56,12,56,727,9,56,1,57,1,57,
1,57,1,57,3,57,733,8,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,
1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,
57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,
1,57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,781,8,57,1,57,1,57,1,57,1,57,1,57,
1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,
57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,
1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,
57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,
845,8,57,1,57,1,57,3,57,849,8,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,
1,57,1,57,1,57,5,57,862,8,57,10,57,12,57,865,9,57,1,58,1,58,1,58,3,58,870,
8,58,1,59,1,59,1,59,1,59,5,59,876,8,59,10,59,12,59,879,9,59,1,59,3,59,882,
8,59,3,59,884,8,59,1,59,1,59,1,60,1,60,3,60,890,8,60,1,60,1,60,3,60,894,
8,60,1,60,1,60,3,60,898,8,60,1,60,1,60,1,60,3,60,903,8,60,1,60,1,60,1,60,
1,60,3,60,909,8,60,1,61,1,61,1,61,3,61,914,8,61,1,61,3,61,917,8,61,1,62,
1,62,3,62,921,8,62,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,932,
8,64,1,65,1,65,5,65,936,8,65,10,65,12,65,939,9,65,1,65,1,65,1,66,1,66,1,
66,1,66,1,66,3,66,948,8,66,1,67,1,67,1,68,1,68,1,69,1,69,1,69,1,69,1,70,
1,70,1,70,1,70,1,71,1,71,3,71,964,8,71,1,72,1,72,1,73,1,73,1,73,3,73,971,
8,73,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,
74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,
1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,
74,1,74,1,74,1,74,3,74,1019,8,74,1,75,1,75,1,76,1,76,1,76,1,76,3,76,1027,
8,76,1,76,0,1,114,77,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
126,128,130,132,134,136,138,140,142,144,146,148,150,152,0,10,1,0,25,27,1,
0,21,22,1,0,31,33,1,0,34,37,1,0,38,41,1,0,47,58,1,0,62,66,1,0,67,70,3,0,
106,106,110,110,118,118,1,0,109,110,1193,0,155,1,0,0,0,2,162,1,0,0,0,4,184,
1,0,0,0,6,186,1,0,0,0,8,193,1,0,0,0,10,197,1,0,0,0,12,212,1,0,0,0,14,214,
1,0,0,0,16,231,1,0,0,0,18,236,1,0,0,0,20,242,1,0,0,0,22,245,1,0,0,0,24,262,
1,0,0,0,26,274,1,0,0,0,28,279,1,0,0,0,30,281,1,0,0,0,32,284,1,0,0,0,34,293,
1,0,0,0,36,298,1,0,0,0,38,300,1,0,0,0,40,304,1,0,0,0,42,369,1,0,0,0,44,374,
1,0,0,0,46,376,1,0,0,0,48,383,1,0,0,0,50,390,1,0,0,0,52,397,1,0,0,0,54,404,
1,0,0,0,56,410,1,0,0,0,58,416,1,0,0,0,60,429,1,0,0,0,62,433,1,0,0,0,64,439,
1,0,0,0,66,444,1,0,0,0,68,448,1,0,0,0,70,453,1,0,0,0,72,462,1,0,0,0,74,472,
1,0,0,0,76,475,1,0,0,0,78,479,1,0,0,0,80,493,1,0,0,0,82,499,1,0,0,0,84,535,
1,0,0,0,86,576,1,0,0,0,88,591,1,0,0,0,90,593,1,0,0,0,92,598,1,0,0,0,94,601,
1,0,0,0,96,608,1,0,0,0,98,612,1,0,0,0,100,619,1,0,0,0,102,643,1,0,0,0,104,
686,1,0,0,0,106,695,1,0,0,0,108,697,1,0,0,0,110,714,1,0,0,0,112,720,1,0,
0,0,114,780,1,0,0,0,116,869,1,0,0,0,118,871,1,0,0,0,120,908,1,0,0,0,122,
916,1,0,0,0,124,920,1,0,0,0,126,922,1,0,0,0,128,931,1,0,0,0,130,933,1,0,
0,0,132,947,1,0,0,0,134,949,1,0,0,0,136,951,1,0,0,0,138,953,1,0,0,0,140,
957,1,0,0,0,142,963,1,0,0,0,144,965,1,0,0,0,146,970,1,0,0,0,148,1018,1,0,
0,0,150,1020,1,0,0,0,152,1026,1,0,0,0,154,156,5,1,0,0,155,154,1,0,0,0,155,
156,1,0,0,0,156,158,1,0,0,0,157,159,3,96,48,0,158,157,1,0,0,0,158,159,1,
0,0,0,159,160,1,0,0,0,160,161,5,0,0,1,161,1,1,0,0,0,162,163,3,4,2,0,163,
3,1,0,0,0,164,185,3,6,3,0,165,185,3,30,15,0,166,185,3,10,5,0,167,185,3,24,
12,0,168,185,3,36,18,0,169,185,3,80,40,0,170,185,3,38,19,0,171,185,3,40,
20,0,172,185,3,42,21,0,173,185,3,46,23,0,174,185,3,48,24,0,175,185,3,50,
25,0,176,185,3,52,26,0,177,185,3,54,27,0,178,185,3,66,33,0,179,185,3,56,
28,0,180,185,3,68,34,0,181,185,3,70,35,0,182,185,3,76,38,0,183,185,3,78,
39,0,184,164,1,0,0,0,184,165,1,0,0,0,184,166,1,0,0,0,184,167,1,0,0,0,184,
168,1,0,0,0,184,169,1,0,0,0,184,170,1,0,0,0,184,171,1,0,0,0,184,172,1,0,
0,0,184,173,1,0,0,0,184,174,1,0,0,0,184,175,1,0,0,0,184,176,1,0,0,0,184,
177,1,0,0,0,184,178,1,0,0,0,184,179,1,0,0,0,184,180,1,0,0,0,184,181,1,0,
0,0,184,182,1,0,0,0,184,183,1,0,0,0,185,5,1,0,0,0,186,188,5,9,0,0,187,189,
3,8,4,0,188,187,1,0,0,0,188,189,1,0,0,0,189,190,1,0,0,0,190,191,5,11,0,0,
191,7,1,0,0,0,192,194,3,4,2,0,193,192,1,0,0,0,194,195,1,0,0,0,195,193,1,
0,0,0,195,196,1,0,0,0,196,9,1,0,0,0,197,198,5,105,0,0,198,199,3,12,6,0,199,
11,1,0,0,0,200,202,3,16,8,0,201,200,1,0,0,0,201,202,1,0,0,0,202,205,1,0,
0,0,203,206,3,18,9,0,204,206,3,14,7,0,205,203,1,0,0,0,205,204,1,0,0,0,206,
207,1,0,0,0,207,208,3,20,10,0,208,209,3,152,76,0,209,213,1,0,0,0,210,211,
5,119,0,0,211,213,3,152,76,0,212,201,1,0,0,0,212,210,1,0,0,0,213,13,1,0,
0,0,214,220,5,9,0,0,215,216,3,22,11,0,216,217,5,13,0,0,217,219,1,0,0,0,218,
215,1,0,0,0,219,222,1,0,0,0,220,218,1,0,0,0,220,221,1,0,0,0,221,227,1,0,
0,0,222,220,1,0,0,0,223,225,3,22,11,0,224,226,5,13,0,0,225,224,1,0,0,0,225,
226,1,0,0,0,226,228,1,0,0,0,227,223,1,0,0,0,227,228,1,0,0,0,228,229,1,0,
0,0,229,230,5,11,0,0,230,15,1,0,0,0,231,232,3,22,11,0,232,233,5,13,0,0,233,
17,1,0,0,0,234,237,5,25,0,0,235,237,3,142,71,0,236,234,1,0,0,0,236,235,1,
0,0,0,237,240,1,0,0,0,238,239,5,97,0,0,239,241,3,142,71,0,240,238,1,0,0,
0,240,241,1,0,0,0,241,19,1,0,0,0,242,243,5,98,0,0,243,244,5,119,0,0,244,
21,1,0,0,0,245,248,3,142,71,0,246,247,5,97,0,0,247,249,3,142,71,0,248,246,
1,0,0,0,248,249,1,0,0,0,249,23,1,0,0,0,250,253,5,104,0,0,251,254,3,26,13,
0,252,254,3,28,14,0,253,251,1,0,0,0,253,252,1,0,0,0,254,255,1,0,0,0,255,
256,3,152,76,0,256,263,1,0,0,0,257,258,5,104,0,0,258,259,5,91,0,0,259,260,
3,114,57,0,260,261,3,152,76,0,261,263,1,0,0,0,262,250,1,0,0,0,262,257,1,
0,0,0,263,25,1,0,0,0,264,265,3,18,9,0,265,266,3,20,10,0,266,267,3,152,76,
0,267,275,1,0,0,0,268,270,3,14,7,0,269,271,3,20,10,0,270,269,1,0,0,0,270,
271,1,0,0,0,271,272,1,0,0,0,272,273,3,152,76,0,273,275,1,0,0,0,274,264,1,
0,0,0,274,268,1,0,0,0,275,27,1,0,0,0,276,280,3,30,15,0,277,280,3,80,40,0,
278,280,3,78,39,0,279,276,1,0,0,0,279,277,1,0,0,0,279,278,1,0,0,0,280,29,
1,0,0,0,281,282,3,32,16,0,282,283,3,152,76,0,283,31,1,0,0,0,284,285,3,44,
22,0,285,290,3,34,17,0,286,287,5,13,0,0,287,289,3,34,17,0,288,286,1,0,0,
0,289,292,1,0,0,0,290,288,1,0,0,0,290,291,1,0,0,0,291,33,1,0,0,0,292,290,
1,0,0,0,293,296,3,116,58,0,294,295,5,14,0,0,295,297,3,114,57,0,296,294,1,
0,0,0,296,297,1,0,0,0,297,35,1,0,0,0,298,299,5,12,0,0,299,37,1,0,0,0,300,
301,4,19,0,0,301,302,3,112,56,0,302,303,3,152,76,0,303,39,1,0,0,0,304,305,
5,92,0,0,305,306,5,7,0,0,306,307,3,112,56,0,307,308,5,8,0,0,308,311,3,4,
2,0,309,310,5,76,0,0,310,312,3,4,2,0,311,309,1,0,0,0,311,312,1,0,0,0,312,
41,1,0,0,0,313,314,5,72,0,0,314,315,3,4,2,0,315,316,5,86,0,0,316,317,5,7,
0,0,317,318,3,112,56,0,318,319,5,8,0,0,319,320,3,152,76,0,320,370,1,0,0,
0,321,322,5,86,0,0,322,323,5,7,0,0,323,324,3,112,56,0,324,325,5,8,0,0,325,
326,3,4,2,0,326,370,1,0,0,0,327,328,5,84,0,0,328,331,5,7,0,0,329,332,3,112,
56,0,330,332,3,32,16,0,331,329,1,0,0,0,331,330,1,0,0,0,331,332,1,0,0,0,332,
333,1,0,0,0,333,335,5,12,0,0,334,336,3,112,56,0,335,334,1,0,0,0,335,336,
1,0,0,0,336,337,1,0,0,0,337,339,5,12,0,0,338,340,3,112,56,0,339,338,1,0,
0,0,339,340,1,0,0,0,340,341,1,0,0,0,341,342,5,8,0,0,342,370,3,4,2,0,343,
344,5,84,0,0,344,347,5,7,0,0,345,348,3,114,57,0,346,348,3,32,16,0,347,345,
1,0,0,0,347,346,1,0,0,0,348,349,1,0,0,0,349,350,5,95,0,0,350,351,3,112,56,
0,351,352,5,8,0,0,352,353,3,4,2,0,353,370,1,0,0,0,354,356,5,84,0,0,355,357,
5,107,0,0,356,355,1,0,0,0,356,357,1,0,0,0,357,358,1,0,0,0,358,361,5,7,0,
0,359,362,3,114,57,0,360,362,3,32,16,0,361,359,1,0,0,0,361,360,1,0,0,0,362,
363,1,0,0,0,363,364,3,144,72,0,364,365,4,21,1,0,365,366,3,112,56,0,366,367,
5,8,0,0,367,368,3,4,2,0,368,370,1,0,0,0,369,313,1,0,0,0,369,321,1,0,0,0,
369,327,1,0,0,0,369,343,1,0,0,0,369,354,1,0,0,0,370,43,1,0,0,0,371,375,5,
78,0,0,372,375,3,150,75,0,373,375,5,103,0,0,374,371,1,0,0,0,374,372,1,0,
0,0,374,373,1,0,0,0,375,45,1,0,0,0,376,379,5,83,0,0,377,378,4,23,2,0,378,
380,3,144,72,0,379,377,1,0,0,0,379,380,1,0,0,0,380,381,1,0,0,0,381,382,3,
152,76,0,382,47,1,0,0,0,383,386,5,71,0,0,384,385,4,24,3,0,385,387,3,144,
72,0,386,384,1,0,0,0,386,387,1,0,0,0,387,388,1,0,0,0,388,389,3,152,76,0,
389,49,1,0,0,0,390,393,5,81,0,0,391,392,4,25,4,0,392,394,3,112,56,0,393,
391,1,0,0,0,393,394,1,0,0,0,394,395,1,0,0,0,395,396,3,152,76,0,396,51,1,
0,0,0,397,400,5,117,0,0,398,399,4,26,5,0,399,401,3,112,56,0,400,398,1,0,
0,0,400,401,1,0,0,0,401,402,1,0,0,0,402,403,3,152,76,0,403,53,1,0,0,0,404,
405,5,90,0,0,405,406,5,7,0,0,406,407,3,112,56,0,407,408,5,8,0,0,408,409,
3,4,2,0,409,55,1,0,0,0,410,411,5,85,0,0,411,412,5,7,0,0,412,413,3,112,56,
0,413,414,5,8,0,0,414,415,3,58,29,0,415,57,1,0,0,0,416,418,5,9,0,0,417,419,
3,60,30,0,418,417,1,0,0,0,418,419,1,0,0,0,419,424,1,0,0,0,420,422,3,64,32,
0,421,423,3,60,30,0,422,421,1,0,0,0,422,423,1,0,0,0,423,425,1,0,0,0,424,
420,1,0,0,0,424,425,1,0,0,0,425,426,1,0,0,0,426,427,5,11,0,0,427,59,1,0,
0,0,428,430,3,62,31,0,429,428,1,0,0,0,430,431,1,0,0,0,431,429,1,0,0,0,431,
432,1,0,0,0,432,61,1,0,0,0,433,434,5,75,0,0,434,435,3,112,56,0,435,437,5,
16,0,0,436,438,3,8,4,0,437,436,1,0,0,0,437,438,1,0,0,0,438,63,1,0,0,0,439,
440,5,91,0,0,440,442,5,16,0,0,441,443,3,8,4,0,442,441,1,0,0,0,442,443,1,
0,0,0,443,65,1,0,0,0,444,445,3,144,72,0,445,446,5,16,0,0,446,447,3,4,2,0,
447,67,1,0,0,0,448,449,5,93,0,0,449,450,4,34,6,0,450,451,3,112,56,0,451,
452,3,152,76,0,452,69,1,0,0,0,453,454,5,96,0,0,454,460,3,6,3,0,455,457,3,
72,36,0,456,458,3,74,37,0,457,456,1,0,0,0,457,458,1,0,0,0,458,461,1,0,0,
0,459,461,3,74,37,0,460,455,1,0,0,0,460,459,1,0,0,0,461,71,1,0,0,0,462,468,
5,79,0,0,463,465,5,7,0,0,464,466,3,116,58,0,465,464,1,0,0,0,465,466,1,0,
0,0,466,467,1,0,0,0,467,469,5,8,0,0,468,463,1,0,0,0,468,469,1,0,0,0,469,
470,1,0,0,0,470,471,3,6,3,0,471,73,1,0,0,0,472,473,5,80,0,0,473,474,3,6,
3,0,474,75,1,0,0,0,475,476,5,87,0,0,476,477,3,152,76,0,477,77,1,0,0,0,478,
480,5,106,0,0,479,478,1,0,0,0,479,480,1,0,0,0,480,481,1,0,0,0,481,483,5,
88,0,0,482,484,5,25,0,0,483,482,1,0,0,0,483,484,1,0,0,0,484,485,1,0,0,0,
485,486,3,144,72,0,486,488,5,7,0,0,487,489,3,88,44,0,488,487,1,0,0,0,488,
489,1,0,0,0,489,490,1,0,0,0,490,491,5,8,0,0,491,492,3,94,47,0,492,79,1,0,
0,0,493,494,5,99,0,0,494,495,3,144,72,0,495,496,3,82,41,0,496,81,1,0,0,0,
497,498,5,101,0,0,498,500,3,114,57,0,499,497,1,0,0,0,499,500,1,0,0,0,500,
501,1,0,0,0,501,505,5,9,0,0,502,504,3,84,42,0,503,502,1,0,0,0,504,507,1,
0,0,0,505,503,1,0,0,0,505,506,1,0,0,0,506,508,1,0,0,0,507,505,1,0,0,0,508,
509,5,11,0,0,509,83,1,0,0,0,510,515,5,116,0,0,511,512,4,42,7,0,512,515,3,
144,72,0,513,515,5,106,0,0,514,510,1,0,0,0,514,511,1,0,0,0,514,513,1,0,0,
0,515,518,1,0,0,0,516,514,1,0,0,0,516,517,1,0,0,0,517,525,1,0,0,0,518,516,
1,0,0,0,519,526,3,86,43,0,520,521,3,116,58,0,521,522,5,14,0,0,522,523,3,
118,59,0,523,524,5,12,0,0,524,526,1,0,0,0,525,519,1,0,0,0,525,520,1,0,0,
0,526,536,1,0,0,0,527,536,3,36,18,0,528,530,5,30,0,0,529,528,1,0,0,0,529,
530,1,0,0,0,530,531,1,0,0,0,531,532,3,106,53,0,532,533,5,14,0,0,533,534,
3,114,57,0,534,536,1,0,0,0,535,516,1,0,0,0,535,527,1,0,0,0,535,529,1,0,0,
0,536,85,1,0,0,0,537,539,5,25,0,0,538,537,1,0,0,0,538,539,1,0,0,0,539,541,
1,0,0,0,540,542,5,30,0,0,541,540,1,0,0,0,541,542,1,0,0,0,542,543,1,0,0,0,
543,544,3,106,53,0,544,546,5,7,0,0,545,547,3,88,44,0,546,545,1,0,0,0,546,
547,1,0,0,0,547,548,1,0,0,0,548,549,5,8,0,0,549,550,3,94,47,0,550,577,1,
0,0,0,551,553,5,25,0,0,552,551,1,0,0,0,552,553,1,0,0,0,553,555,1,0,0,0,554,
556,5,30,0,0,555,554,1,0,0,0,555,556,1,0,0,0,556,557,1,0,0,0,557,558,3,138,
69,0,558,559,5,7,0,0,559,560,5,8,0,0,560,561,3,94,47,0,561,577,1,0,0,0,562,
564,5,25,0,0,563,562,1,0,0,0,563,564,1,0,0,0,564,566,1,0,0,0,565,567,5,30,
0,0,566,565,1,0,0,0,566,567,1,0,0,0,567,568,1,0,0,0,568,569,3,140,70,0,569,
571,5,7,0,0,570,572,3,88,44,0,571,570,1,0,0,0,571,572,1,0,0,0,572,573,1,
0,0,0,573,574,5,8,0,0,574,575,3,94,47,0,575,577,1,0,0,0,576,538,1,0,0,0,
576,552,1,0,0,0,576,563,1,0,0,0,577,87,1,0,0,0,578,583,3,90,45,0,579,580,
5,13,0,0,580,582,3,90,45,0,581,579,1,0,0,0,582,585,1,0,0,0,583,581,1,0,0,
0,583,584,1,0,0,0,584,588,1,0,0,0,585,583,1,0,0,0,586,587,5,13,0,0,587,589,
3,92,46,0,588,586,1,0,0,0,588,589,1,0,0,0,589,592,1,0,0,0,590,592,3,92,46,
0,591,578,1,0,0,0,591,590,1,0,0,0,592,89,1,0,0,0,593,596,3,116,58,0,594,
595,5,14,0,0,595,597,3,114,57,0,596,594,1,0,0,0,596,597,1,0,0,0,597,91,1,
0,0,0,598,599,5,17,0,0,599,600,3,114,57,0,600,93,1,0,0,0,601,603,5,9,0,0,
602,604,3,96,48,0,603,602,1,0,0,0,603,604,1,0,0,0,604,605,1,0,0,0,605,606,
5,11,0,0,606,95,1,0,0,0,607,609,3,2,1,0,608,607,1,0,0,0,609,610,1,0,0,0,
610,608,1,0,0,0,610,611,1,0,0,0,611,97,1,0,0,0,612,613,5,5,0,0,613,614,3,
100,50,0,614,615,5,6,0,0,615,99,1,0,0,0,616,618,5,13,0,0,617,616,1,0,0,0,
618,621,1,0,0,0,619,617,1,0,0,0,619,620,1,0,0,0,620,623,1,0,0,0,621,619,
1,0,0,0,622,624,3,102,51,0,623,622,1,0,0,0,623,624,1,0,0,0,624,633,1,0,0,
0,625,627,5,13,0,0,626,625,1,0,0,0,627,628,1,0,0,0,628,626,1,0,0,0,628,629,
1,0,0,0,629,630,1,0,0,0,630,632,3,102,51,0,631,626,1,0,0,0,632,635,1,0,0,
0,633,631,1,0,0,0,633,634,1,0,0,0,634,639,1,0,0,0,635,633,1,0,0,0,636,638,
5,13,0,0,637,636,1,0,0,0,638,641,1,0,0,0,639,637,1,0,0,0,639,640,1,0,0,0,
640,101,1,0,0,0,641,639,1,0,0,0,642,644,5,17,0,0,643,642,1,0,0,0,643,644,
1,0,0,0,644,645,1,0,0,0,645,646,3,114,57,0,646,103,1,0,0,0,647,648,3,106,
53,0,648,649,5,16,0,0,649,650,3,114,57,0,650,687,1,0,0,0,651,652,5,5,0,0,
652,653,3,114,57,0,653,654,5,6,0,0,654,655,5,16,0,0,655,656,3,114,57,0,656,
687,1,0,0,0,657,659,5,106,0,0,658,657,1,0,0,0,658,659,1,0,0,0,659,661,1,
0,0,0,660,662,5,25,0,0,661,660,1,0,0,0,661,662,1,0,0,0,662,663,1,0,0,0,663,
664,3,106,53,0,664,666,5,7,0,0,665,667,3,88,44,0,666,665,1,0,0,0,666,667,
1,0,0,0,667,668,1,0,0,0,668,669,5,8,0,0,669,670,3,94,47,0,670,687,1,0,0,
0,671,672,3,138,69,0,672,673,5,7,0,0,673,674,5,8,0,0,674,675,3,94,47,0,675,
687,1,0,0,0,676,677,3,140,70,0,677,678,5,7,0,0,678,679,3,90,45,0,679,680,
5,8,0,0,680,681,3,94,47,0,681,687,1,0,0,0,682,684,5,17,0,0,683,682,1,0,0,
0,683,684,1,0,0,0,684,685,1,0,0,0,685,687,3,114,57,0,686,647,1,0,0,0,686,
651,1,0,0,0,686,658,1,0,0,0,686,671,1,0,0,0,686,676,1,0,0,0,686,683,1,0,
0,0,687,105,1,0,0,0,688,696,3,142,71,0,689,696,5,119,0,0,690,696,3,134,67,
0,691,692,5,5,0,0,692,693,3,114,57,0,693,694,5,6,0,0,694,696,1,0,0,0,695,
688,1,0,0,0,695,689,1,0,0,0,695,690,1,0,0,0,695,691,1,0,0,0,696,107,1,0,
0,0,697,709,5,7,0,0,698,703,3,110,55,0,699,700,5,13,0,0,700,702,3,110,55,
0,701,699,1,0,0,0,702,705,1,0,0,0,703,701,1,0,0,0,703,704,1,0,0,0,704,707,
1,0,0,0,705,703,1,0,0,0,706,708,5,13,0,0,707,706,1,0,0,0,707,708,1,0,0,0,
708,710,1,0,0,0,709,698,1,0,0,0,709,710,1,0,0,0,710,711,1,0,0,0,711,712,
5,8,0,0,712,109,1,0,0,0,713,715,5,17,0,0,714,713,1,0,0,0,714,715,1,0,0,0,
715,718,1,0,0,0,716,719,3,114,57,0,717,719,3,144,72,0,718,716,1,0,0,0,718,
717,1,0,0,0,719,111,1,0,0,0,720,725,3,114,57,0,721,722,5,13,0,0,722,724,
3,114,57,0,723,721,1,0,0,0,724,727,1,0,0,0,725,723,1,0,0,0,725,726,1,0,0,
0,726,113,1,0,0,0,727,725,1,0,0,0,728,729,6,57,-1,0,729,781,3,120,60,0,730,
732,5,99,0,0,731,733,3,144,72,0,732,731,1,0,0,0,732,733,1,0,0,0,733,734,
1,0,0,0,734,781,3,82,41,0,735,736,5,77,0,0,736,737,3,114,57,0,737,738,3,
108,54,0,738,781,1,0,0,0,739,740,5,77,0,0,740,781,3,114,57,42,741,742,5,
77,0,0,742,743,5,18,0,0,743,781,3,144,72,0,744,745,5,94,0,0,745,781,3,114,
57,37,746,747,5,82,0,0,747,781,3,114,57,36,748,749,5,74,0,0,749,781,3,114,
57,35,750,751,5,19,0,0,751,781,3,114,57,34,752,753,5,20,0,0,753,781,3,114,
57,33,754,755,5,21,0,0,755,781,3,114,57,32,756,757,5,22,0,0,757,781,3,114,
57,31,758,759,5,23,0,0,759,781,3,114,57,30,760,761,5,24,0,0,761,781,3,114,
57,29,762,763,5,107,0,0,763,781,3,114,57,28,764,765,5,105,0,0,765,766,5,
7,0,0,766,767,3,114,57,0,767,768,5,8,0,0,768,781,1,0,0,0,769,781,3,52,26,
0,770,781,5,89,0,0,771,781,3,144,72,0,772,781,5,102,0,0,773,781,3,128,64,
0,774,781,3,98,49,0,775,781,3,118,59,0,776,777,5,7,0,0,777,778,3,112,56,
0,778,779,5,8,0,0,779,781,1,0,0,0,780,728,1,0,0,0,780,730,1,0,0,0,780,735,
1,0,0,0,780,739,1,0,0,0,780,741,1,0,0,0,780,744,1,0,0,0,780,746,1,0,0,0,
780,748,1,0,0,0,780,750,1,0,0,0,780,752,1,0,0,0,780,754,1,0,0,0,780,756,
1,0,0,0,780,758,1,0,0,0,780,760,1,0,0,0,780,762,1,0,0,0,780,764,1,0,0,0,
780,769,1,0,0,0,780,770,1,0,0,0,780,771,1,0,0,0,780,772,1,0,0,0,780,773,
1,0,0,0,780,774,1,0,0,0,780,775,1,0,0,0,780,776,1,0,0,0,781,863,1,0,0,0,
782,783,10,27,0,0,783,784,5,28,0,0,784,862,3,114,57,27,785,786,10,26,0,0,
786,787,7,0,0,0,787,862,3,114,57,27,788,789,10,25,0,0,789,790,7,1,0,0,790,
862,3,114,57,26,791,792,10,24,0,0,792,793,5,29,0,0,793,862,3,114,57,25,794,
795,10,23,0,0,795,796,7,2,0,0,796,862,3,114,57,24,797,798,10,22,0,0,798,
799,7,3,0,0,799,862,3,114,57,23,800,801,10,21,0,0,801,802,5,73,0,0,802,862,
3,114,57,22,803,804,10,20,0,0,804,805,5,95,0,0,805,862,3,114,57,21,806,807,
10,19,0,0,807,808,7,4,0,0,808,862,3,114,57,20,809,810,10,18,0,0,810,811,
5,42,0,0,811,862,3,114,57,19,812,813,10,17,0,0,813,814,5,43,0,0,814,862,
3,114,57,18,815,816,10,16,0,0,816,817,5,44,0,0,817,862,3,114,57,17,818,819,
10,15,0,0,819,820,5,45,0,0,820,862,3,114,57,16,821,822,10,14,0,0,822,823,
5,46,0,0,823,862,3,114,57,15,824,825,10,13,0,0,825,826,5,15,0,0,826,827,
3,114,57,0,827,828,5,16,0,0,828,829,3,114,57,14,829,862,1,0,0,0,830,831,
10,12,0,0,831,832,5,14,0,0,832,862,3,114,57,12,833,834,10,11,0,0,834,835,
3,126,63,0,835,836,3,114,57,11,836,862,1,0,0,0,837,838,10,45,0,0,838,839,
5,5,0,0,839,840,3,112,56,0,840,841,5,6,0,0,841,862,1,0,0,0,842,844,10,44,
0,0,843,845,5,15,0,0,844,843,1,0,0,0,844,845,1,0,0,0,845,846,1,0,0,0,846,
848,5,18,0,0,847,849,5,30,0,0,848,847,1,0,0,0,848,849,1,0,0,0,849,850,1,
0,0,0,850,862,3,142,71,0,851,852,10,41,0,0,852,862,3,108,54,0,853,854,10,
39,0,0,854,855,4,57,29,0,855,862,5,19,0,0,856,857,10,38,0,0,857,858,4,57,
31,0,858,862,5,20,0,0,859,860,10,9,0,0,860,862,3,130,65,0,861,782,1,0,0,
0,861,785,1,0,0,0,861,788,1,0,0,0,861,791,1,0,0,0,861,794,1,0,0,0,861,797,
1,0,0,0,861,800,1,0,0,0,861,803,1,0,0,0,861,806,1,0,0,0,861,809,1,0,0,0,
861,812,1,0,0,0,861,815,1,0,0,0,861,818,1,0,0,0,861,821,1,0,0,0,861,824,
1,0,0,0,861,830,1,0,0,0,861,833,1,0,0,0,861,837,1,0,0,0,861,842,1,0,0,0,
861,851,1,0,0,0,861,853,1,0,0,0,861,856,1,0,0,0,861,859,1,0,0,0,862,865,
1,0,0,0,863,861,1,0,0,0,863,864,1,0,0,0,864,115,1,0,0,0,865,863,1,0,0,0,
866,870,3,144,72,0,867,870,3,98,49,0,868,870,3,118,59,0,869,866,1,0,0,0,
869,867,1,0,0,0,869,868,1,0,0,0,870,117,1,0,0,0,871,883,5,9,0,0,872,877,
3,104,52,0,873,874,5,13,0,0,874,876,3,104,52,0,875,873,1,0,0,0,876,879,1,
0,0,0,877,875,1,0,0,0,877,878,1,0,0,0,878,881,1,0,0,0,879,877,1,0,0,0,880,
882,5,13,0,0,881,880,1,0,0,0,881,882,1,0,0,0,882,884,1,0,0,0,883,872,1,0,
0,0,883,884,1,0,0,0,884,885,1,0,0,0,885,886,5,11,0,0,886,119,1,0,0,0,887,
909,3,78,39,0,888,890,5,106,0,0,889,888,1,0,0,0,889,890,1,0,0,0,890,891,
1,0,0,0,891,893,5,88,0,0,892,894,5,25,0,0,893,892,1,0,0,0,893,894,1,0,0,
0,894,895,1,0,0,0,895,897,5,7,0,0,896,898,3,88,44,0,897,896,1,0,0,0,897,
898,1,0,0,0,898,899,1,0,0,0,899,900,5,8,0,0,900,909,3,94,47,0,901,903,5,
106,0,0,902,901,1,0,0,0,902,903,1,0,0,0,903,904,1,0,0,0,904,905,3,122,61,
0,905,906,5,59,0,0,906,907,3,124,62,0,907,909,1,0,0,0,908,887,1,0,0,0,908,
889,1,0,0,0,908,902,1,0,0,0,909,121,1,0,0,0,910,917,3,144,72,0,911,913,5,
7,0,0,912,914,3,88,44,0,913,912,1,0,0,0,913,914,1,0,0,0,914,915,1,0,0,0,
915,917,5,8,0,0,916,910,1,0,0,0,916,911,1,0,0,0,917,123,1,0,0,0,918,921,
3,114,57,0,919,921,3,94,47,0,920,918,1,0,0,0,920,919,1,0,0,0,921,125,1,0,
0,0,922,923,7,5,0,0,923,127,1,0,0,0,924,932,5,60,0,0,925,932,5,61,0,0,926,
932,5,119,0,0,927,932,3,130,65,0,928,932,5,4,0,0,929,932,3,134,67,0,930,
932,3,136,68,0,931,924,1,0,0,0,931,925,1,0,0,0,931,926,1,0,0,0,931,927,1,
0,0,0,931,928,1,0,0,0,931,929,1,0,0,0,931,930,1,0,0,0,932,129,1,0,0,0,933,
937,5,120,0,0,934,936,3,132,66,0,935,934,1,0,0,0,936,939,1,0,0,0,937,935,
1,0,0,0,937,938,1,0,0,0,938,940,1,0,0,0,939,937,1,0,0,0,940,941,5,120,0,
0,941,131,1,0,0,0,942,948,5,127,0,0,943,944,5,126,0,0,944,945,3,114,57,0,
945,946,5,10,0,0,946,948,1,0,0,0,947,942,1,0,0,0,947,943,1,0,0,0,948,133,
1,0,0,0,949,950,7,6,0,0,950,135,1,0,0,0,951,952,7,7,0,0,952,137,1,0,0,0,
953,954,4,69,33,0,954,955,3,144,72,0,955,956,3,106,53,0,956,139,1,0,0,0,
957,958,4,70,34,0,958,959,3,144,72,0,959,960,3,106,53,0,960,141,1,0,0,0,
961,964,3,144,72,0,962,964,3,146,73,0,963,961,1,0,0,0,963,962,1,0,0,0,964,
143,1,0,0,0,965,966,7,8,0,0,966,145,1,0,0,0,967,971,3,148,74,0,968,971,5,
60,0,0,969,971,5,61,0,0,970,967,1,0,0,0,970,968,1,0,0,0,970,969,1,0,0,0,
971,147,1,0,0,0,972,1019,5,71,0,0,973,1019,5,72,0,0,974,1019,5,73,0,0,975,
1019,5,74,0,0,976,1019,5,75,0,0,977,1019,5,76,0,0,978,1019,5,77,0,0,979,
1019,5,78,0,0,980,1019,5,79,0,0,981,1019,5,80,0,0,982,1019,5,81,0,0,983,
1019,5,82,0,0,984,1019,5,83,0,0,985,1019,5,84,0,0,986,1019,5,85,0,0,987,
1019,5,86,0,0,988,1019,5,87,0,0,989,1019,5,88,0,0,990,1019,5,89,0,0,991,
1019,5,90,0,0,992,1019,5,91,0,0,993,1019,5,92,0,0,994,1019,5,93,0,0,995,
1019,5,94,0,0,996,1019,5,95,0,0,997,1019,5,96,0,0,998,1019,5,99,0,0,999,
1019,5,100,0,0,1000,1019,5,101,0,0,1001,1019,5,102,0,0,1002,1019,5,103,0,
0,1003,1019,5,104,0,0,1004,1019,5,105,0,0,1005,1019,5,108,0,0,1006,1019,
3,150,75,0,1007,1019,5,111,0,0,1008,1019,5,112,0,0,1009,1019,5,113,0,0,1010,
1019,5,114,0,0,1011,1019,5,115,0,0,1012,1019,5,116,0,0,1013,1019,5,117,0,
0,1014,1019,5,106,0,0,1015,1019,5,107,0,0,1016,1019,5,98,0,0,1017,1019,5,
97,0,0,1018,972,1,0,0,0,1018,973,1,0,0,0,1018,974,1,0,0,0,1018,975,1,0,0,
0,1018,976,1,0,0,0,1018,977,1,0,0,0,1018,978,1,0,0,0,1018,979,1,0,0,0,1018,
980,1,0,0,0,1018,981,1,0,0,0,1018,982,1,0,0,0,1018,983,1,0,0,0,1018,984,
1,0,0,0,1018,985,1,0,0,0,1018,986,1,0,0,0,1018,987,1,0,0,0,1018,988,1,0,
0,0,1018,989,1,0,0,0,1018,990,1,0,0,0,1018,991,1,0,0,0,1018,992,1,0,0,0,
1018,993,1,0,0,0,1018,994,1,0,0,0,1018,995,1,0,0,0,1018,996,1,0,0,0,1018,
997,1,0,0,0,1018,998,1,0,0,0,1018,999,1,0,0,0,1018,1000,1,0,0,0,1018,1001,
1,0,0,0,1018,1002,1,0,0,0,1018,1003,1,0,0,0,1018,1004,1,0,0,0,1018,1005,
1,0,0,0,1018,1006,1,0,0,0,1018,1007,1,0,0,0,1018,1008,1,0,0,0,1018,1009,
1,0,0,0,1018,1010,1,0,0,0,1018,1011,1,0,0,0,1018,1012,1,0,0,0,1018,1013,
1,0,0,0,1018,1014,1,0,0,0,1018,1015,1,0,0,0,1018,1016,1,0,0,0,1018,1017,
1,0,0,0,1019,149,1,0,0,0,1020,1021,7,9,0,0,1021,151,1,0,0,0,1022,1027,5,
12,0,0,1023,1027,5,0,0,1,1024,1027,4,76,35,0,1025,1027,4,76,36,0,1026,1022,
1,0,0,0,1026,1023,1,0,0,0,1026,1024,1,0,0,0,1026,1025,1,0,0,0,1027,153,1,
0,0,0,112,155,158,184,188,195,201,205,212,220,225,227,236,240,248,253,262,
270,274,279,290,296,311,331,335,339,347,356,361,369,374,379,386,393,400,
418,422,424,431,437,442,457,460,465,468,479,483,488,499,505,514,516,525,
529,535,538,541,546,552,555,563,566,571,576,583,588,591,596,603,610,619,
623,628,633,639,643,658,661,666,683,686,695,703,707,709,714,718,725,732,
780,844,848,861,863,869,877,881,883,889,893,897,902,908,913,916,920,931,
937,947,963,970,1018,1026];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class JavaScriptParser extends JavaScriptParserBase {

    static grammarFileName = "JavaScriptParser.g4";
    static literalNames = [ null, null, null, null, null, "'['", "']'", 
                            "'('", "')'", "'{'", null, "'}'", "';'", "','", 
                            "'='", "'?'", "':'", "'...'", "'.'", "'++'", 
                            "'--'", "'+'", "'-'", "'~'", "'!'", "'*'", "'/'", 
                            "'%'", "'**'", "'??'", "'#'", "'>>'", "'<<'", 
                            "'>>>'", "'<'", "'>'", "'<='", "'>='", "'=='", 
                            "'!='", "'==='", "'!=='", "'&'", "'^'", "'|'", 
                            "'&&'", "'||'", "'*='", "'/='", "'%='", "'+='", 
                            "'-='", "'<<='", "'>>='", "'>>>='", "'&='", 
                            "'^='", "'|='", "'**='", "'=>'", "'null'", null, 
                            null, null, null, null, null, null, null, null, 
                            null, "'break'", "'do'", "'instanceof'", "'typeof'", 
                            "'case'", "'else'", "'new'", "'var'", "'catch'", 
                            "'finally'", "'return'", "'void'", "'continue'", 
                            "'for'", "'switch'", "'while'", "'debugger'", 
                            "'function'", "'this'", "'with'", "'default'", 
                            "'if'", "'throw'", "'delete'", "'in'", "'try'", 
                            "'as'", "'from'", "'class'", "'enum'", "'extends'", 
                            "'super'", "'const'", "'export'", "'import'", 
                            "'async'", "'await'", "'implements'", null, 
                            null, "'private'", "'public'", "'interface'", 
                            "'package'", "'protected'", "'static'", "'yield'", 
                            null, null, null, null, null, null, null, null, 
                            "'${'" ];
    static symbolicNames = [ null, "HashBangLine", "MultiLineComment", "SingleLineComment", 
                             "RegularExpressionLiteral", "OpenBracket", 
                             "CloseBracket", "OpenParen", "CloseParen", 
                             "OpenBrace", "TemplateCloseBrace", "CloseBrace", 
                             "SemiColon", "Comma", "Assign", "QuestionMark", 
                             "Colon", "Ellipsis", "Dot", "PlusPlus", "MinusMinus", 
                             "Plus", "Minus", "BitNot", "Not", "Multiply", 
                             "Divide", "Modulus", "Power", "NullCoalesce", 
                             "Hashtag", "RightShiftArithmetic", "LeftShiftArithmetic", 
                             "RightShiftLogical", "LessThan", "MoreThan", 
                             "LessThanEquals", "GreaterThanEquals", "Equals_", 
                             "NotEquals", "IdentityEquals", "IdentityNotEquals", 
                             "BitAnd", "BitXOr", "BitOr", "And", "Or", "MultiplyAssign", 
                             "DivideAssign", "ModulusAssign", "PlusAssign", 
                             "MinusAssign", "LeftShiftArithmeticAssign", 
                             "RightShiftArithmeticAssign", "RightShiftLogicalAssign", 
                             "BitAndAssign", "BitXorAssign", "BitOrAssign", 
                             "PowerAssign", "ARROW", "NullLiteral", "BooleanLiteral", 
                             "DecimalLiteral", "HexIntegerLiteral", "OctalIntegerLiteral", 
                             "OctalIntegerLiteral2", "BinaryIntegerLiteral", 
                             "BigHexIntegerLiteral", "BigOctalIntegerLiteral", 
                             "BigBinaryIntegerLiteral", "BigDecimalIntegerLiteral", 
                             "Break", "Do", "Instanceof", "Typeof", "Case", 
                             "Else", "New", "Var", "Catch", "Finally", "Return", 
                             "Void", "Continue", "For", "Switch", "While", 
                             "Debugger", "Function_", "This", "With", "Default", 
                             "If", "Throw", "Delete", "In", "Try", "As", 
                             "From", "Class", "Enum", "Extends", "Super", 
                             "Const", "Export", "Import", "Async", "Await", 
                             "Implements", "StrictLet", "NonStrictLet", 
                             "Private", "Public", "Interface", "Package", 
                             "Protected", "Static", "Yield", "Identifier", 
                             "StringLiteral", "BackTick", "WhiteSpaces", 
                             "LineTerminator", "HtmlComment", "CDataComment", 
                             "UnexpectedCharacter", "TemplateStringStartExpression", 
                             "TemplateStringAtom" ];
    static ruleNames = [ "program", "sourceElement", "statement", "block", 
                         "statementList", "importStatement", "importFromBlock", 
                         "moduleItems", "importDefault", "importNamespace", 
                         "importFrom", "aliasName", "exportStatement", "exportFromBlock", 
                         "declaration", "variableStatement", "variableDeclarationList", 
                         "variableDeclaration", "emptyStatement_", "expressionStatement", 
                         "ifStatement", "iterationStatement", "varModifier", 
                         "continueStatement", "breakStatement", "returnStatement", 
                         "yieldStatement", "withStatement", "switchStatement", 
                         "caseBlock", "caseClauses", "caseClause", "defaultClause", 
                         "labelledStatement", "throwStatement", "tryStatement", 
                         "catchProduction", "finallyProduction", "debuggerStatement", 
                         "functionDeclaration", "classDeclaration", "classTail", 
                         "classElement", "methodDefinition", "formalParameterList", 
                         "formalParameterArg", "lastFormalParameterArg", 
                         "functionBody", "sourceElements", "arrayLiteral", 
                         "elementList", "arrayElement", "propertyAssignment", 
                         "propertyName", "arguments", "argument", "expressionSequence", 
                         "singleExpression", "assignable", "objectLiteral", 
                         "anonymousFunction", "arrowFunctionParameters", 
                         "arrowFunctionBody", "assignmentOperator", "literal", 
                         "templateStringLiteral", "templateStringAtom", 
                         "numericLiteral", "bigintLiteral", "getter", "setter", 
                         "identifierName", "identifier", "reservedWord", 
                         "keyword", "let_", "eos" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = JavaScriptParser.ruleNames;
        this.literalNames = JavaScriptParser.literalNames;
        this.symbolicNames = JavaScriptParser.symbolicNames;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 19:
    	    		return this.expressionStatement_sempred(localctx, predIndex);
    	case 21:
    	    		return this.iterationStatement_sempred(localctx, predIndex);
    	case 23:
    	    		return this.continueStatement_sempred(localctx, predIndex);
    	case 24:
    	    		return this.breakStatement_sempred(localctx, predIndex);
    	case 25:
    	    		return this.returnStatement_sempred(localctx, predIndex);
    	case 26:
    	    		return this.yieldStatement_sempred(localctx, predIndex);
    	case 34:
    	    		return this.throwStatement_sempred(localctx, predIndex);
    	case 42:
    	    		return this.classElement_sempred(localctx, predIndex);
    	case 57:
    	    		return this.singleExpression_sempred(localctx, predIndex);
    	case 69:
    	    		return this.getter_sempred(localctx, predIndex);
    	case 70:
    	    		return this.setter_sempred(localctx, predIndex);
    	case 76:
    	    		return this.eos_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    expressionStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.notOpenBraceAndNotFunction();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    iterationStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.p("of");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    continueStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return this.notLineTerminator();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    breakStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 3:
    			return this.notLineTerminator();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    returnStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 4:
    			return this.notLineTerminator();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    yieldStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 5:
    			return this.notLineTerminator();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    throwStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 6:
    			return this.notLineTerminator();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    classElement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 7:
    			return this.n("static");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    singleExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 8:
    			return this.precpred(this._ctx, 27);
    		case 9:
    			return this.precpred(this._ctx, 26);
    		case 10:
    			return this.precpred(this._ctx, 25);
    		case 11:
    			return this.precpred(this._ctx, 24);
    		case 12:
    			return this.precpred(this._ctx, 23);
    		case 13:
    			return this.precpred(this._ctx, 22);
    		case 14:
    			return this.precpred(this._ctx, 21);
    		case 15:
    			return this.precpred(this._ctx, 20);
    		case 16:
    			return this.precpred(this._ctx, 19);
    		case 17:
    			return this.precpred(this._ctx, 18);
    		case 18:
    			return this.precpred(this._ctx, 17);
    		case 19:
    			return this.precpred(this._ctx, 16);
    		case 20:
    			return this.precpred(this._ctx, 15);
    		case 21:
    			return this.precpred(this._ctx, 14);
    		case 22:
    			return this.precpred(this._ctx, 13);
    		case 23:
    			return this.precpred(this._ctx, 12);
    		case 24:
    			return this.precpred(this._ctx, 11);
    		case 25:
    			return this.precpred(this._ctx, 45);
    		case 26:
    			return this.precpred(this._ctx, 44);
    		case 27:
    			return this.precpred(this._ctx, 41);
    		case 28:
    			return this.precpred(this._ctx, 39);
    		case 29:
    			return this.notLineTerminator();
    		case 30:
    			return this.precpred(this._ctx, 38);
    		case 31:
    			return this.notLineTerminator();
    		case 32:
    			return this.precpred(this._ctx, 9);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    getter_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 33:
    			return this.n("get");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    setter_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 34:
    			return this.n("set");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    eos_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 35:
    			return this.lineTerminatorAhead();
    		case 36:
    			return this.closeBrace();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	program() {
	    let localctx = new ProgramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, JavaScriptParser.RULE_program);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 155;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	        if(la_===1) {
	            this.state = 154;
	            this.match(JavaScriptParser.HashBangLine);

	        }
	        this.state = 158;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
	        if(la_===1) {
	            this.state = 157;
	            this.sourceElements();

	        }
	        this.state = 160;
	        this.match(JavaScriptParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sourceElement() {
	    let localctx = new SourceElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, JavaScriptParser.RULE_sourceElement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 162;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, JavaScriptParser.RULE_statement);
	    try {
	        this.state = 184;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 164;
	            this.block();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 165;
	            this.variableStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 166;
	            this.importStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 167;
	            this.exportStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 168;
	            this.emptyStatement_();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 169;
	            this.classDeclaration();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 170;
	            this.expressionStatement();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 171;
	            this.ifStatement();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 172;
	            this.iterationStatement();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 173;
	            this.continueStatement();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 174;
	            this.breakStatement();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 175;
	            this.returnStatement();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 176;
	            this.yieldStatement();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 177;
	            this.withStatement();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 178;
	            this.labelledStatement();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 179;
	            this.switchStatement();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 180;
	            this.throwStatement();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 181;
	            this.tryStatement();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 182;
	            this.debuggerStatement();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 183;
	            this.functionDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block() {
	    let localctx = new BlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, JavaScriptParser.RULE_block);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 186;
	        this.match(JavaScriptParser.OpenBrace);
	        this.state = 188;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	        if(la_===1) {
	            this.state = 187;
	            this.statementList();

	        }
	        this.state = 190;
	        this.match(JavaScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementList() {
	    let localctx = new StatementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, JavaScriptParser.RULE_statementList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 193; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 192;
	        		this.statement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 195; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,4, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importStatement() {
	    let localctx = new ImportStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, JavaScriptParser.RULE_importStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 197;
	        this.match(JavaScriptParser.Import);
	        this.state = 198;
	        this.importFromBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importFromBlock() {
	    let localctx = new ImportFromBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, JavaScriptParser.RULE_importFromBlock);
	    try {
	        this.state = 212;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 9:
	        case 25:
	        case 60:
	        case 61:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 201;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	            if(la_===1) {
	                this.state = 200;
	                this.importDefault();

	            }
	            this.state = 205;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 25:
	            case 60:
	            case 61:
	            case 71:
	            case 72:
	            case 73:
	            case 74:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 80:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 87:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 92:
	            case 93:
	            case 94:
	            case 95:
	            case 96:
	            case 97:
	            case 98:
	            case 99:
	            case 100:
	            case 101:
	            case 102:
	            case 103:
	            case 104:
	            case 105:
	            case 106:
	            case 107:
	            case 108:
	            case 109:
	            case 110:
	            case 111:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	                this.state = 203;
	                this.importNamespace();
	                break;
	            case 9:
	                this.state = 204;
	                this.moduleItems();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 207;
	            this.importFrom();
	            this.state = 208;
	            this.eos();
	            break;
	        case 119:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 210;
	            this.match(JavaScriptParser.StringLiteral);
	            this.state = 211;
	            this.eos();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleItems() {
	    let localctx = new ModuleItemsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, JavaScriptParser.RULE_moduleItems);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 214;
	        this.match(JavaScriptParser.OpenBrace);
	        this.state = 220;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,8,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 215;
	                this.aliasName();
	                this.state = 216;
	                this.match(JavaScriptParser.Comma); 
	            }
	            this.state = 222;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,8,this._ctx);
	        }

	        this.state = 227;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 60)) & ~0x1f) === 0 && ((1 << (_la - 60)) & 4294965251) !== 0) || ((((_la - 92)) & ~0x1f) === 0 && ((1 << (_la - 92)) & 134217727) !== 0)) {
	            this.state = 223;
	            this.aliasName();
	            this.state = 225;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===13) {
	                this.state = 224;
	                this.match(JavaScriptParser.Comma);
	            }

	        }

	        this.state = 229;
	        this.match(JavaScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importDefault() {
	    let localctx = new ImportDefaultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, JavaScriptParser.RULE_importDefault);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 231;
	        this.aliasName();
	        this.state = 232;
	        this.match(JavaScriptParser.Comma);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importNamespace() {
	    let localctx = new ImportNamespaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, JavaScriptParser.RULE_importNamespace);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 236;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 25:
	            this.state = 234;
	            this.match(JavaScriptParser.Multiply);
	            break;
	        case 60:
	        case 61:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	            this.state = 235;
	            this.identifierName();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 240;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===97) {
	            this.state = 238;
	            this.match(JavaScriptParser.As);
	            this.state = 239;
	            this.identifierName();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importFrom() {
	    let localctx = new ImportFromContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, JavaScriptParser.RULE_importFrom);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 242;
	        this.match(JavaScriptParser.From);
	        this.state = 243;
	        this.match(JavaScriptParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aliasName() {
	    let localctx = new AliasNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, JavaScriptParser.RULE_aliasName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 245;
	        this.identifierName();
	        this.state = 248;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===97) {
	            this.state = 246;
	            this.match(JavaScriptParser.As);
	            this.state = 247;
	            this.identifierName();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exportStatement() {
	    let localctx = new ExportStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, JavaScriptParser.RULE_exportStatement);
	    try {
	        this.state = 262;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ExportDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 250;
	            this.match(JavaScriptParser.Export);
	            this.state = 253;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 251;
	                this.exportFromBlock();
	                break;

	            case 2:
	                this.state = 252;
	                this.declaration();
	                break;

	            }
	            this.state = 255;
	            this.eos();
	            break;

	        case 2:
	            localctx = new ExportDefaultDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 257;
	            this.match(JavaScriptParser.Export);
	            this.state = 258;
	            this.match(JavaScriptParser.Default);
	            this.state = 259;
	            this.singleExpression(0);
	            this.state = 260;
	            this.eos();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exportFromBlock() {
	    let localctx = new ExportFromBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, JavaScriptParser.RULE_exportFromBlock);
	    try {
	        this.state = 274;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 25:
	        case 60:
	        case 61:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 264;
	            this.importNamespace();
	            this.state = 265;
	            this.importFrom();
	            this.state = 266;
	            this.eos();
	            break;
	        case 9:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 268;
	            this.moduleItems();
	            this.state = 270;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	            if(la_===1) {
	                this.state = 269;
	                this.importFrom();

	            }
	            this.state = 272;
	            this.eos();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaration() {
	    let localctx = new DeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, JavaScriptParser.RULE_declaration);
	    try {
	        this.state = 279;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 78:
	        case 103:
	        case 109:
	        case 110:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 276;
	            this.variableStatement();
	            break;
	        case 99:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 277;
	            this.classDeclaration();
	            break;
	        case 88:
	        case 106:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 278;
	            this.functionDeclaration();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableStatement() {
	    let localctx = new VariableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, JavaScriptParser.RULE_variableStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 281;
	        this.variableDeclarationList();
	        this.state = 282;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclarationList() {
	    let localctx = new VariableDeclarationListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, JavaScriptParser.RULE_variableDeclarationList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 284;
	        this.varModifier();
	        this.state = 285;
	        this.variableDeclaration();
	        this.state = 290;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,19,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 286;
	                this.match(JavaScriptParser.Comma);
	                this.state = 287;
	                this.variableDeclaration(); 
	            }
	            this.state = 292;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,19,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclaration() {
	    let localctx = new VariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, JavaScriptParser.RULE_variableDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 293;
	        this.assignable();
	        this.state = 296;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
	        if(la_===1) {
	            this.state = 294;
	            this.match(JavaScriptParser.Assign);
	            this.state = 295;
	            this.singleExpression(0);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	emptyStatement_() {
	    let localctx = new EmptyStatement_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, JavaScriptParser.RULE_emptyStatement_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 298;
	        this.match(JavaScriptParser.SemiColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionStatement() {
	    let localctx = new ExpressionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, JavaScriptParser.RULE_expressionStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 300;
	        if (!( this.notOpenBraceAndNotFunction())) {
	            throw new antlr4.error.FailedPredicateException(this, "this.notOpenBraceAndNotFunction()");
	        }
	        this.state = 301;
	        this.expressionSequence();
	        this.state = 302;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifStatement() {
	    let localctx = new IfStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, JavaScriptParser.RULE_ifStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 304;
	        this.match(JavaScriptParser.If);
	        this.state = 305;
	        this.match(JavaScriptParser.OpenParen);
	        this.state = 306;
	        this.expressionSequence();
	        this.state = 307;
	        this.match(JavaScriptParser.CloseParen);
	        this.state = 308;
	        this.statement();
	        this.state = 311;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
	        if(la_===1) {
	            this.state = 309;
	            this.match(JavaScriptParser.Else);
	            this.state = 310;
	            this.statement();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iterationStatement() {
	    let localctx = new IterationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, JavaScriptParser.RULE_iterationStatement);
	    var _la = 0;
	    try {
	        this.state = 369;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new DoStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 313;
	            this.match(JavaScriptParser.Do);
	            this.state = 314;
	            this.statement();
	            this.state = 315;
	            this.match(JavaScriptParser.While);
	            this.state = 316;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 317;
	            this.expressionSequence();
	            this.state = 318;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 319;
	            this.eos();
	            break;

	        case 2:
	            localctx = new WhileStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 321;
	            this.match(JavaScriptParser.While);
	            this.state = 322;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 323;
	            this.expressionSequence();
	            this.state = 324;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 325;
	            this.statement();
	            break;

	        case 3:
	            localctx = new ForStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 327;
	            this.match(JavaScriptParser.For);
	            this.state = 328;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 331;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	            if(la_===1) {
	                this.state = 329;
	                this.expressionSequence();

	            } else if(la_===2) {
	                this.state = 330;
	                this.variableDeclarationList();

	            }
	            this.state = 333;
	            this.match(JavaScriptParser.SemiColon);
	            this.state = 335;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 33030832) !== 0) || ((((_la - 60)) & ~0x1f) === 0 && ((1 << (_la - 60)) & 809650175) !== 0) || ((((_la - 94)) & ~0x1f) === 0 && ((1 << (_la - 94)) & 125909281) !== 0)) {
	                this.state = 334;
	                this.expressionSequence();
	            }

	            this.state = 337;
	            this.match(JavaScriptParser.SemiColon);
	            this.state = 339;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 33030832) !== 0) || ((((_la - 60)) & ~0x1f) === 0 && ((1 << (_la - 60)) & 809650175) !== 0) || ((((_la - 94)) & ~0x1f) === 0 && ((1 << (_la - 94)) & 125909281) !== 0)) {
	                this.state = 338;
	                this.expressionSequence();
	            }

	            this.state = 341;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 342;
	            this.statement();
	            break;

	        case 4:
	            localctx = new ForInStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 343;
	            this.match(JavaScriptParser.For);
	            this.state = 344;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 347;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 345;
	                this.singleExpression(0);
	                break;

	            case 2:
	                this.state = 346;
	                this.variableDeclarationList();
	                break;

	            }
	            this.state = 349;
	            this.match(JavaScriptParser.In);
	            this.state = 350;
	            this.expressionSequence();
	            this.state = 351;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 352;
	            this.statement();
	            break;

	        case 5:
	            localctx = new ForOfStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 354;
	            this.match(JavaScriptParser.For);
	            this.state = 356;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===107) {
	                this.state = 355;
	                this.match(JavaScriptParser.Await);
	            }

	            this.state = 358;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 361;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 359;
	                this.singleExpression(0);
	                break;

	            case 2:
	                this.state = 360;
	                this.variableDeclarationList();
	                break;

	            }
	            this.state = 363;
	            this.identifier();
	            this.state = 364;
	            if (!( this.p("of"))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.p(\"of\")");
	            }
	            this.state = 365;
	            this.expressionSequence();
	            this.state = 366;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 367;
	            this.statement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varModifier() {
	    let localctx = new VarModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, JavaScriptParser.RULE_varModifier);
	    try {
	        this.state = 374;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 78:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 371;
	            this.match(JavaScriptParser.Var);
	            break;
	        case 109:
	        case 110:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 372;
	            this.let_();
	            break;
	        case 103:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 373;
	            this.match(JavaScriptParser.Const);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	continueStatement() {
	    let localctx = new ContinueStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, JavaScriptParser.RULE_continueStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 376;
	        this.match(JavaScriptParser.Continue);
	        this.state = 379;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	        if(la_===1) {
	            this.state = 377;
	            if (!( this.notLineTerminator())) {
	                throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
	            }
	            this.state = 378;
	            this.identifier();

	        }
	        this.state = 381;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	breakStatement() {
	    let localctx = new BreakStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, JavaScriptParser.RULE_breakStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 383;
	        this.match(JavaScriptParser.Break);
	        this.state = 386;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	        if(la_===1) {
	            this.state = 384;
	            if (!( this.notLineTerminator())) {
	                throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
	            }
	            this.state = 385;
	            this.identifier();

	        }
	        this.state = 388;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement() {
	    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, JavaScriptParser.RULE_returnStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 390;
	        this.match(JavaScriptParser.Return);
	        this.state = 393;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	        if(la_===1) {
	            this.state = 391;
	            if (!( this.notLineTerminator())) {
	                throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
	            }
	            this.state = 392;
	            this.expressionSequence();

	        }
	        this.state = 395;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldStatement() {
	    let localctx = new YieldStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, JavaScriptParser.RULE_yieldStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 397;
	        this.match(JavaScriptParser.Yield);
	        this.state = 400;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
	        if(la_===1) {
	            this.state = 398;
	            if (!( this.notLineTerminator())) {
	                throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
	            }
	            this.state = 399;
	            this.expressionSequence();

	        }
	        this.state = 402;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	withStatement() {
	    let localctx = new WithStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, JavaScriptParser.RULE_withStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 404;
	        this.match(JavaScriptParser.With);
	        this.state = 405;
	        this.match(JavaScriptParser.OpenParen);
	        this.state = 406;
	        this.expressionSequence();
	        this.state = 407;
	        this.match(JavaScriptParser.CloseParen);
	        this.state = 408;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchStatement() {
	    let localctx = new SwitchStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, JavaScriptParser.RULE_switchStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 410;
	        this.match(JavaScriptParser.Switch);
	        this.state = 411;
	        this.match(JavaScriptParser.OpenParen);
	        this.state = 412;
	        this.expressionSequence();
	        this.state = 413;
	        this.match(JavaScriptParser.CloseParen);
	        this.state = 414;
	        this.caseBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseBlock() {
	    let localctx = new CaseBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, JavaScriptParser.RULE_caseBlock);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 416;
	        this.match(JavaScriptParser.OpenBrace);
	        this.state = 418;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===75) {
	            this.state = 417;
	            this.caseClauses();
	        }

	        this.state = 424;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===91) {
	            this.state = 420;
	            this.defaultClause();
	            this.state = 422;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===75) {
	                this.state = 421;
	                this.caseClauses();
	            }

	        }

	        this.state = 426;
	        this.match(JavaScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseClauses() {
	    let localctx = new CaseClausesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, JavaScriptParser.RULE_caseClauses);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 429; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 428;
	            this.caseClause();
	            this.state = 431; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===75);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseClause() {
	    let localctx = new CaseClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, JavaScriptParser.RULE_caseClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 433;
	        this.match(JavaScriptParser.Case);
	        this.state = 434;
	        this.expressionSequence();
	        this.state = 435;
	        this.match(JavaScriptParser.Colon);
	        this.state = 437;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	        if(la_===1) {
	            this.state = 436;
	            this.statementList();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultClause() {
	    let localctx = new DefaultClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, JavaScriptParser.RULE_defaultClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 439;
	        this.match(JavaScriptParser.Default);
	        this.state = 440;
	        this.match(JavaScriptParser.Colon);
	        this.state = 442;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        if(la_===1) {
	            this.state = 441;
	            this.statementList();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelledStatement() {
	    let localctx = new LabelledStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, JavaScriptParser.RULE_labelledStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 444;
	        this.identifier();
	        this.state = 445;
	        this.match(JavaScriptParser.Colon);
	        this.state = 446;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	throwStatement() {
	    let localctx = new ThrowStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, JavaScriptParser.RULE_throwStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 448;
	        this.match(JavaScriptParser.Throw);
	        this.state = 449;
	        if (!( this.notLineTerminator())) {
	            throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
	        }
	        this.state = 450;
	        this.expressionSequence();
	        this.state = 451;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tryStatement() {
	    let localctx = new TryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, JavaScriptParser.RULE_tryStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 453;
	        this.match(JavaScriptParser.Try);
	        this.state = 454;
	        this.block();
	        this.state = 460;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 79:
	            this.state = 455;
	            this.catchProduction();
	            this.state = 457;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	            if(la_===1) {
	                this.state = 456;
	                this.finallyProduction();

	            }
	            break;
	        case 80:
	            this.state = 459;
	            this.finallyProduction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catchProduction() {
	    let localctx = new CatchProductionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, JavaScriptParser.RULE_catchProduction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 462;
	        this.match(JavaScriptParser.Catch);
	        this.state = 468;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===7) {
	            this.state = 463;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 465;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5 || _la===9 || ((((_la - 106)) & ~0x1f) === 0 && ((1 << (_la - 106)) & 4113) !== 0)) {
	                this.state = 464;
	                this.assignable();
	            }

	            this.state = 467;
	            this.match(JavaScriptParser.CloseParen);
	        }

	        this.state = 470;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	finallyProduction() {
	    let localctx = new FinallyProductionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, JavaScriptParser.RULE_finallyProduction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 472;
	        this.match(JavaScriptParser.Finally);
	        this.state = 473;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	debuggerStatement() {
	    let localctx = new DebuggerStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, JavaScriptParser.RULE_debuggerStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 475;
	        this.match(JavaScriptParser.Debugger);
	        this.state = 476;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionDeclaration() {
	    let localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, JavaScriptParser.RULE_functionDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 479;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===106) {
	            this.state = 478;
	            this.match(JavaScriptParser.Async);
	        }

	        this.state = 481;
	        this.match(JavaScriptParser.Function_);
	        this.state = 483;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===25) {
	            this.state = 482;
	            this.match(JavaScriptParser.Multiply);
	        }

	        this.state = 485;
	        this.identifier();
	        this.state = 486;
	        this.match(JavaScriptParser.OpenParen);
	        this.state = 488;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 131616) !== 0) || ((((_la - 106)) & ~0x1f) === 0 && ((1 << (_la - 106)) & 4113) !== 0)) {
	            this.state = 487;
	            this.formalParameterList();
	        }

	        this.state = 490;
	        this.match(JavaScriptParser.CloseParen);
	        this.state = 491;
	        this.functionBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classDeclaration() {
	    let localctx = new ClassDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, JavaScriptParser.RULE_classDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 493;
	        this.match(JavaScriptParser.Class);
	        this.state = 494;
	        this.identifier();
	        this.state = 495;
	        this.classTail();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classTail() {
	    let localctx = new ClassTailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, JavaScriptParser.RULE_classTail);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 499;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===101) {
	            this.state = 497;
	            this.match(JavaScriptParser.Extends);
	            this.state = 498;
	            this.singleExpression(0);
	        }

	        this.state = 501;
	        this.match(JavaScriptParser.OpenBrace);
	        this.state = 505;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,48,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 502;
	                this.classElement(); 
	            }
	            this.state = 507;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,48,this._ctx);
	        }

	        this.state = 508;
	        this.match(JavaScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classElement() {
	    let localctx = new ClassElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, JavaScriptParser.RULE_classElement);
	    var _la = 0;
	    try {
	        this.state = 535;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 516;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,50,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 514;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 510;
	                        this.match(JavaScriptParser.Static);
	                        break;

	                    case 2:
	                        this.state = 511;
	                        if (!( this.n("static"))) {
	                            throw new antlr4.error.FailedPredicateException(this, "this.n(\"static\")");
	                        }
	                        this.state = 512;
	                        this.identifier();
	                        break;

	                    case 3:
	                        this.state = 513;
	                        this.match(JavaScriptParser.Async);
	                        break;

	                    } 
	                }
	                this.state = 518;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,50,this._ctx);
	            }

	            this.state = 525;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 519;
	                this.methodDefinition();
	                break;

	            case 2:
	                this.state = 520;
	                this.assignable();
	                this.state = 521;
	                this.match(JavaScriptParser.Assign);
	                this.state = 522;
	                this.objectLiteral();
	                this.state = 523;
	                this.match(JavaScriptParser.SemiColon);
	                break;

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 527;
	            this.emptyStatement_();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 529;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===30) {
	                this.state = 528;
	                this.match(JavaScriptParser.Hashtag);
	            }

	            this.state = 531;
	            this.propertyName();
	            this.state = 532;
	            this.match(JavaScriptParser.Assign);
	            this.state = 533;
	            this.singleExpression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodDefinition() {
	    let localctx = new MethodDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, JavaScriptParser.RULE_methodDefinition);
	    var _la = 0;
	    try {
	        this.state = 576;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 538;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===25) {
	                this.state = 537;
	                this.match(JavaScriptParser.Multiply);
	            }

	            this.state = 541;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===30) {
	                this.state = 540;
	                this.match(JavaScriptParser.Hashtag);
	            }

	            this.state = 543;
	            this.propertyName();
	            this.state = 544;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 546;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 131616) !== 0) || ((((_la - 106)) & ~0x1f) === 0 && ((1 << (_la - 106)) & 4113) !== 0)) {
	                this.state = 545;
	                this.formalParameterList();
	            }

	            this.state = 548;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 549;
	            this.functionBody();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 552;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
	            if(la_===1) {
	                this.state = 551;
	                this.match(JavaScriptParser.Multiply);

	            }
	            this.state = 555;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
	            if(la_===1) {
	                this.state = 554;
	                this.match(JavaScriptParser.Hashtag);

	            }
	            this.state = 557;
	            this.getter();
	            this.state = 558;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 559;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 560;
	            this.functionBody();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 563;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	            if(la_===1) {
	                this.state = 562;
	                this.match(JavaScriptParser.Multiply);

	            }
	            this.state = 566;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
	            if(la_===1) {
	                this.state = 565;
	                this.match(JavaScriptParser.Hashtag);

	            }
	            this.state = 568;
	            this.setter();
	            this.state = 569;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 571;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 131616) !== 0) || ((((_la - 106)) & ~0x1f) === 0 && ((1 << (_la - 106)) & 4113) !== 0)) {
	                this.state = 570;
	                this.formalParameterList();
	            }

	            this.state = 573;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 574;
	            this.functionBody();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameterList() {
	    let localctx = new FormalParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, JavaScriptParser.RULE_formalParameterList);
	    var _la = 0;
	    try {
	        this.state = 591;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 5:
	        case 9:
	        case 106:
	        case 110:
	        case 118:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 578;
	            this.formalParameterArg();
	            this.state = 583;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,63,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 579;
	                    this.match(JavaScriptParser.Comma);
	                    this.state = 580;
	                    this.formalParameterArg(); 
	                }
	                this.state = 585;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,63,this._ctx);
	            }

	            this.state = 588;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===13) {
	                this.state = 586;
	                this.match(JavaScriptParser.Comma);
	                this.state = 587;
	                this.lastFormalParameterArg();
	            }

	            break;
	        case 17:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 590;
	            this.lastFormalParameterArg();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameterArg() {
	    let localctx = new FormalParameterArgContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, JavaScriptParser.RULE_formalParameterArg);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 593;
	        this.assignable();
	        this.state = 596;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===14) {
	            this.state = 594;
	            this.match(JavaScriptParser.Assign);
	            this.state = 595;
	            this.singleExpression(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lastFormalParameterArg() {
	    let localctx = new LastFormalParameterArgContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, JavaScriptParser.RULE_lastFormalParameterArg);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 598;
	        this.match(JavaScriptParser.Ellipsis);
	        this.state = 599;
	        this.singleExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionBody() {
	    let localctx = new FunctionBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, JavaScriptParser.RULE_functionBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 601;
	        this.match(JavaScriptParser.OpenBrace);
	        this.state = 603;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
	        if(la_===1) {
	            this.state = 602;
	            this.sourceElements();

	        }
	        this.state = 605;
	        this.match(JavaScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sourceElements() {
	    let localctx = new SourceElementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, JavaScriptParser.RULE_sourceElements);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 608; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 607;
	        		this.sourceElement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 610; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,68, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayLiteral() {
	    let localctx = new ArrayLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, JavaScriptParser.RULE_arrayLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 612;
	        this.match(JavaScriptParser.OpenBracket);
	        this.state = 613;
	        this.elementList();
	        this.state = 614;
	        this.match(JavaScriptParser.CloseBracket);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementList() {
	    let localctx = new ElementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, JavaScriptParser.RULE_elementList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 619;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,69,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 616;
	                this.match(JavaScriptParser.Comma); 
	            }
	            this.state = 621;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,69,this._ctx);
	        }

	        this.state = 623;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 33161904) !== 0) || ((((_la - 60)) & ~0x1f) === 0 && ((1 << (_la - 60)) & 809650175) !== 0) || ((((_la - 94)) & ~0x1f) === 0 && ((1 << (_la - 94)) & 125909281) !== 0)) {
	            this.state = 622;
	            this.arrayElement();
	        }

	        this.state = 633;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,72,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 626; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                do {
	                    this.state = 625;
	                    this.match(JavaScriptParser.Comma);
	                    this.state = 628; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                } while(_la===13);
	                this.state = 630;
	                this.arrayElement(); 
	            }
	            this.state = 635;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,72,this._ctx);
	        }

	        this.state = 639;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===13) {
	            this.state = 636;
	            this.match(JavaScriptParser.Comma);
	            this.state = 641;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayElement() {
	    let localctx = new ArrayElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, JavaScriptParser.RULE_arrayElement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 643;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17) {
	            this.state = 642;
	            this.match(JavaScriptParser.Ellipsis);
	        }

	        this.state = 645;
	        this.singleExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyAssignment() {
	    let localctx = new PropertyAssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, JavaScriptParser.RULE_propertyAssignment);
	    var _la = 0;
	    try {
	        this.state = 686;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PropertyExpressionAssignmentContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 647;
	            this.propertyName();
	            this.state = 648;
	            this.match(JavaScriptParser.Colon);
	            this.state = 649;
	            this.singleExpression(0);
	            break;

	        case 2:
	            localctx = new ComputedPropertyExpressionAssignmentContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 651;
	            this.match(JavaScriptParser.OpenBracket);
	            this.state = 652;
	            this.singleExpression(0);
	            this.state = 653;
	            this.match(JavaScriptParser.CloseBracket);
	            this.state = 654;
	            this.match(JavaScriptParser.Colon);
	            this.state = 655;
	            this.singleExpression(0);
	            break;

	        case 3:
	            localctx = new FunctionPropertyContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 658;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
	            if(la_===1) {
	                this.state = 657;
	                this.match(JavaScriptParser.Async);

	            }
	            this.state = 661;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===25) {
	                this.state = 660;
	                this.match(JavaScriptParser.Multiply);
	            }

	            this.state = 663;
	            this.propertyName();
	            this.state = 664;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 666;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 131616) !== 0) || ((((_la - 106)) & ~0x1f) === 0 && ((1 << (_la - 106)) & 4113) !== 0)) {
	                this.state = 665;
	                this.formalParameterList();
	            }

	            this.state = 668;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 669;
	            this.functionBody();
	            break;

	        case 4:
	            localctx = new PropertyGetterContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 671;
	            this.getter();
	            this.state = 672;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 673;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 674;
	            this.functionBody();
	            break;

	        case 5:
	            localctx = new PropertySetterContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 676;
	            this.setter();
	            this.state = 677;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 678;
	            this.formalParameterArg();
	            this.state = 679;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 680;
	            this.functionBody();
	            break;

	        case 6:
	            localctx = new PropertyShorthandContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 683;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===17) {
	                this.state = 682;
	                this.match(JavaScriptParser.Ellipsis);
	            }

	            this.state = 685;
	            this.singleExpression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyName() {
	    let localctx = new PropertyNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, JavaScriptParser.RULE_propertyName);
	    try {
	        this.state = 695;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 60:
	        case 61:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 688;
	            this.identifierName();
	            break;
	        case 119:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 689;
	            this.match(JavaScriptParser.StringLiteral);
	            break;
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 690;
	            this.numericLiteral();
	            break;
	        case 5:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 691;
	            this.match(JavaScriptParser.OpenBracket);
	            this.state = 692;
	            this.singleExpression(0);
	            this.state = 693;
	            this.match(JavaScriptParser.CloseBracket);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arguments() {
	    let localctx = new ArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, JavaScriptParser.RULE_arguments);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 697;
	        this.match(JavaScriptParser.OpenParen);
	        this.state = 709;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 33161904) !== 0) || ((((_la - 60)) & ~0x1f) === 0 && ((1 << (_la - 60)) & 809650175) !== 0) || ((((_la - 94)) & ~0x1f) === 0 && ((1 << (_la - 94)) & 125909281) !== 0)) {
	            this.state = 698;
	            this.argument();
	            this.state = 703;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,81,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 699;
	                    this.match(JavaScriptParser.Comma);
	                    this.state = 700;
	                    this.argument(); 
	                }
	                this.state = 705;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,81,this._ctx);
	            }

	            this.state = 707;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===13) {
	                this.state = 706;
	                this.match(JavaScriptParser.Comma);
	            }

	        }

	        this.state = 711;
	        this.match(JavaScriptParser.CloseParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argument() {
	    let localctx = new ArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, JavaScriptParser.RULE_argument);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 714;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17) {
	            this.state = 713;
	            this.match(JavaScriptParser.Ellipsis);
	        }

	        this.state = 718;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 716;
	            this.singleExpression(0);
	            break;

	        case 2:
	            this.state = 717;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionSequence() {
	    let localctx = new ExpressionSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, JavaScriptParser.RULE_expressionSequence);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 720;
	        this.singleExpression(0);
	        this.state = 725;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,86,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 721;
	                this.match(JavaScriptParser.Comma);
	                this.state = 722;
	                this.singleExpression(0); 
	            }
	            this.state = 727;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,86,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	singleExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new SingleExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 114;
	    this.enterRecursionRule(localctx, 114, JavaScriptParser.RULE_singleExpression, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 780;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new FunctionExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 729;
	            this.anonymousFunction();
	            break;

	        case 2:
	            localctx = new ClassExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 730;
	            this.match(JavaScriptParser.Class);
	            this.state = 732;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 106)) & ~0x1f) === 0 && ((1 << (_la - 106)) & 4113) !== 0)) {
	                this.state = 731;
	                this.identifier();
	            }

	            this.state = 734;
	            this.classTail();
	            break;

	        case 3:
	            localctx = new NewExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 735;
	            this.match(JavaScriptParser.New);
	            this.state = 736;
	            this.singleExpression(0);
	            this.state = 737;
	            this.arguments();
	            break;

	        case 4:
	            localctx = new NewExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 739;
	            this.match(JavaScriptParser.New);
	            this.state = 740;
	            this.singleExpression(42);
	            break;

	        case 5:
	            localctx = new MetaExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 741;
	            this.match(JavaScriptParser.New);
	            this.state = 742;
	            this.match(JavaScriptParser.Dot);
	            this.state = 743;
	            this.identifier();
	            break;

	        case 6:
	            localctx = new DeleteExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 744;
	            this.match(JavaScriptParser.Delete);
	            this.state = 745;
	            this.singleExpression(37);
	            break;

	        case 7:
	            localctx = new VoidExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 746;
	            this.match(JavaScriptParser.Void);
	            this.state = 747;
	            this.singleExpression(36);
	            break;

	        case 8:
	            localctx = new TypeofExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 748;
	            this.match(JavaScriptParser.Typeof);
	            this.state = 749;
	            this.singleExpression(35);
	            break;

	        case 9:
	            localctx = new PreIncrementExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 750;
	            this.match(JavaScriptParser.PlusPlus);
	            this.state = 751;
	            this.singleExpression(34);
	            break;

	        case 10:
	            localctx = new PreDecreaseExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 752;
	            this.match(JavaScriptParser.MinusMinus);
	            this.state = 753;
	            this.singleExpression(33);
	            break;

	        case 11:
	            localctx = new UnaryPlusExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 754;
	            this.match(JavaScriptParser.Plus);
	            this.state = 755;
	            this.singleExpression(32);
	            break;

	        case 12:
	            localctx = new UnaryMinusExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 756;
	            this.match(JavaScriptParser.Minus);
	            this.state = 757;
	            this.singleExpression(31);
	            break;

	        case 13:
	            localctx = new BitNotExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 758;
	            this.match(JavaScriptParser.BitNot);
	            this.state = 759;
	            this.singleExpression(30);
	            break;

	        case 14:
	            localctx = new NotExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 760;
	            this.match(JavaScriptParser.Not);
	            this.state = 761;
	            this.singleExpression(29);
	            break;

	        case 15:
	            localctx = new AwaitExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 762;
	            this.match(JavaScriptParser.Await);
	            this.state = 763;
	            this.singleExpression(28);
	            break;

	        case 16:
	            localctx = new ImportExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 764;
	            this.match(JavaScriptParser.Import);
	            this.state = 765;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 766;
	            this.singleExpression(0);
	            this.state = 767;
	            this.match(JavaScriptParser.CloseParen);
	            break;

	        case 17:
	            localctx = new YieldExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 769;
	            this.yieldStatement();
	            break;

	        case 18:
	            localctx = new ThisExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 770;
	            this.match(JavaScriptParser.This);
	            break;

	        case 19:
	            localctx = new IdentifierExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 771;
	            this.identifier();
	            break;

	        case 20:
	            localctx = new SuperExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 772;
	            this.match(JavaScriptParser.Super);
	            break;

	        case 21:
	            localctx = new LiteralExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 773;
	            this.literal();
	            break;

	        case 22:
	            localctx = new ArrayLiteralExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 774;
	            this.arrayLiteral();
	            break;

	        case 23:
	            localctx = new ObjectLiteralExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 775;
	            this.objectLiteral();
	            break;

	        case 24:
	            localctx = new ParenthesizedExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 776;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 777;
	            this.expressionSequence();
	            this.state = 778;
	            this.match(JavaScriptParser.CloseParen);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 863;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,92,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 861;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new PowerExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 782;
	                    if (!( this.precpred(this._ctx, 27))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
	                    }
	                    this.state = 783;
	                    this.match(JavaScriptParser.Power);
	                    this.state = 784;
	                    this.singleExpression(27);
	                    break;

	                case 2:
	                    localctx = new MultiplicativeExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 785;
	                    if (!( this.precpred(this._ctx, 26))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
	                    }
	                    this.state = 786;
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 234881024) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 787;
	                    this.singleExpression(27);
	                    break;

	                case 3:
	                    localctx = new AdditiveExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 788;
	                    if (!( this.precpred(this._ctx, 25))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
	                    }
	                    this.state = 789;
	                    _la = this._input.LA(1);
	                    if(!(_la===21 || _la===22)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 790;
	                    this.singleExpression(26);
	                    break;

	                case 4:
	                    localctx = new CoalesceExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 791;
	                    if (!( this.precpred(this._ctx, 24))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
	                    }
	                    this.state = 792;
	                    this.match(JavaScriptParser.NullCoalesce);
	                    this.state = 793;
	                    this.singleExpression(25);
	                    break;

	                case 5:
	                    localctx = new BitShiftExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 794;
	                    if (!( this.precpred(this._ctx, 23))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
	                    }
	                    this.state = 795;
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 31)) & ~0x1f) === 0 && ((1 << (_la - 31)) & 7) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 796;
	                    this.singleExpression(24);
	                    break;

	                case 6:
	                    localctx = new RelationalExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 797;
	                    if (!( this.precpred(this._ctx, 22))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
	                    }
	                    this.state = 798;
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 34)) & ~0x1f) === 0 && ((1 << (_la - 34)) & 15) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 799;
	                    this.singleExpression(23);
	                    break;

	                case 7:
	                    localctx = new InstanceofExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 800;
	                    if (!( this.precpred(this._ctx, 21))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
	                    }
	                    this.state = 801;
	                    this.match(JavaScriptParser.Instanceof);
	                    this.state = 802;
	                    this.singleExpression(22);
	                    break;

	                case 8:
	                    localctx = new InExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 803;
	                    if (!( this.precpred(this._ctx, 20))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
	                    }
	                    this.state = 804;
	                    this.match(JavaScriptParser.In);
	                    this.state = 805;
	                    this.singleExpression(21);
	                    break;

	                case 9:
	                    localctx = new EqualityExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 806;
	                    if (!( this.precpred(this._ctx, 19))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
	                    }
	                    this.state = 807;
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 38)) & ~0x1f) === 0 && ((1 << (_la - 38)) & 15) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 808;
	                    this.singleExpression(20);
	                    break;

	                case 10:
	                    localctx = new BitAndExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 809;
	                    if (!( this.precpred(this._ctx, 18))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
	                    }
	                    this.state = 810;
	                    this.match(JavaScriptParser.BitAnd);
	                    this.state = 811;
	                    this.singleExpression(19);
	                    break;

	                case 11:
	                    localctx = new BitXOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 812;
	                    if (!( this.precpred(this._ctx, 17))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
	                    }
	                    this.state = 813;
	                    this.match(JavaScriptParser.BitXOr);
	                    this.state = 814;
	                    this.singleExpression(18);
	                    break;

	                case 12:
	                    localctx = new BitOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 815;
	                    if (!( this.precpred(this._ctx, 16))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
	                    }
	                    this.state = 816;
	                    this.match(JavaScriptParser.BitOr);
	                    this.state = 817;
	                    this.singleExpression(17);
	                    break;

	                case 13:
	                    localctx = new LogicalAndExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 818;
	                    if (!( this.precpred(this._ctx, 15))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
	                    }
	                    this.state = 819;
	                    this.match(JavaScriptParser.And);
	                    this.state = 820;
	                    this.singleExpression(16);
	                    break;

	                case 14:
	                    localctx = new LogicalOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 821;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 822;
	                    this.match(JavaScriptParser.Or);
	                    this.state = 823;
	                    this.singleExpression(15);
	                    break;

	                case 15:
	                    localctx = new TernaryExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 824;
	                    if (!( this.precpred(this._ctx, 13))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                    }
	                    this.state = 825;
	                    this.match(JavaScriptParser.QuestionMark);
	                    this.state = 826;
	                    this.singleExpression(0);
	                    this.state = 827;
	                    this.match(JavaScriptParser.Colon);
	                    this.state = 828;
	                    this.singleExpression(14);
	                    break;

	                case 16:
	                    localctx = new AssignmentExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 830;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 831;
	                    this.match(JavaScriptParser.Assign);
	                    this.state = 832;
	                    this.singleExpression(12);
	                    break;

	                case 17:
	                    localctx = new AssignmentOperatorExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 833;
	                    if (!( this.precpred(this._ctx, 11))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
	                    }
	                    this.state = 834;
	                    this.assignmentOperator();
	                    this.state = 835;
	                    this.singleExpression(11);
	                    break;

	                case 18:
	                    localctx = new MemberIndexExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 837;
	                    if (!( this.precpred(this._ctx, 45))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 45)");
	                    }
	                    this.state = 838;
	                    this.match(JavaScriptParser.OpenBracket);
	                    this.state = 839;
	                    this.expressionSequence();
	                    this.state = 840;
	                    this.match(JavaScriptParser.CloseBracket);
	                    break;

	                case 19:
	                    localctx = new MemberDotExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 842;
	                    if (!( this.precpred(this._ctx, 44))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 44)");
	                    }
	                    this.state = 844;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===15) {
	                        this.state = 843;
	                        this.match(JavaScriptParser.QuestionMark);
	                    }

	                    this.state = 846;
	                    this.match(JavaScriptParser.Dot);
	                    this.state = 848;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===30) {
	                        this.state = 847;
	                        this.match(JavaScriptParser.Hashtag);
	                    }

	                    this.state = 850;
	                    this.identifierName();
	                    break;

	                case 20:
	                    localctx = new ArgumentsExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 851;
	                    if (!( this.precpred(this._ctx, 41))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 41)");
	                    }
	                    this.state = 852;
	                    this.arguments();
	                    break;

	                case 21:
	                    localctx = new PostIncrementExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 853;
	                    if (!( this.precpred(this._ctx, 39))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 39)");
	                    }
	                    this.state = 854;
	                    if (!( this.notLineTerminator())) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
	                    }
	                    this.state = 855;
	                    this.match(JavaScriptParser.PlusPlus);
	                    break;

	                case 22:
	                    localctx = new PostDecreaseExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 856;
	                    if (!( this.precpred(this._ctx, 38))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 38)");
	                    }
	                    this.state = 857;
	                    if (!( this.notLineTerminator())) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
	                    }
	                    this.state = 858;
	                    this.match(JavaScriptParser.MinusMinus);
	                    break;

	                case 23:
	                    localctx = new TemplateStringExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 859;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 860;
	                    this.templateStringLiteral();
	                    break;

	                } 
	            }
	            this.state = 865;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,92,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	assignable() {
	    let localctx = new AssignableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, JavaScriptParser.RULE_assignable);
	    try {
	        this.state = 869;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 106:
	        case 110:
	        case 118:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 866;
	            this.identifier();
	            break;
	        case 5:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 867;
	            this.arrayLiteral();
	            break;
	        case 9:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 868;
	            this.objectLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	objectLiteral() {
	    let localctx = new ObjectLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, JavaScriptParser.RULE_objectLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 871;
	        this.match(JavaScriptParser.OpenBrace);
	        this.state = 883;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
	        if(la_===1) {
	            this.state = 872;
	            this.propertyAssignment();
	            this.state = 877;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,94,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 873;
	                    this.match(JavaScriptParser.Comma);
	                    this.state = 874;
	                    this.propertyAssignment(); 
	                }
	                this.state = 879;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,94,this._ctx);
	            }

	            this.state = 881;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===13) {
	                this.state = 880;
	                this.match(JavaScriptParser.Comma);
	            }


	        }
	        this.state = 885;
	        this.match(JavaScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anonymousFunction() {
	    let localctx = new AnonymousFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, JavaScriptParser.RULE_anonymousFunction);
	    var _la = 0;
	    try {
	        this.state = 908;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new FunctionDeclContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 887;
	            this.functionDeclaration();
	            break;

	        case 2:
	            localctx = new AnonymousFunctionDeclContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 889;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===106) {
	                this.state = 888;
	                this.match(JavaScriptParser.Async);
	            }

	            this.state = 891;
	            this.match(JavaScriptParser.Function_);
	            this.state = 893;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===25) {
	                this.state = 892;
	                this.match(JavaScriptParser.Multiply);
	            }

	            this.state = 895;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 897;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 131616) !== 0) || ((((_la - 106)) & ~0x1f) === 0 && ((1 << (_la - 106)) & 4113) !== 0)) {
	                this.state = 896;
	                this.formalParameterList();
	            }

	            this.state = 899;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 900;
	            this.functionBody();
	            break;

	        case 3:
	            localctx = new ArrowFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 902;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
	            if(la_===1) {
	                this.state = 901;
	                this.match(JavaScriptParser.Async);

	            }
	            this.state = 904;
	            this.arrowFunctionParameters();
	            this.state = 905;
	            this.match(JavaScriptParser.ARROW);
	            this.state = 906;
	            this.arrowFunctionBody();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrowFunctionParameters() {
	    let localctx = new ArrowFunctionParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, JavaScriptParser.RULE_arrowFunctionParameters);
	    var _la = 0;
	    try {
	        this.state = 916;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 106:
	        case 110:
	        case 118:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 910;
	            this.identifier();
	            break;
	        case 7:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 911;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 913;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 131616) !== 0) || ((((_la - 106)) & ~0x1f) === 0 && ((1 << (_la - 106)) & 4113) !== 0)) {
	                this.state = 912;
	                this.formalParameterList();
	            }

	            this.state = 915;
	            this.match(JavaScriptParser.CloseParen);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrowFunctionBody() {
	    let localctx = new ArrowFunctionBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, JavaScriptParser.RULE_arrowFunctionBody);
	    try {
	        this.state = 920;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 918;
	            this.singleExpression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 919;
	            this.functionBody();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentOperator() {
	    let localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, JavaScriptParser.RULE_assignmentOperator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 922;
	        _la = this._input.LA(1);
	        if(!(((((_la - 47)) & ~0x1f) === 0 && ((1 << (_la - 47)) & 4095) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, JavaScriptParser.RULE_literal);
	    try {
	        this.state = 931;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 60:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 924;
	            this.match(JavaScriptParser.NullLiteral);
	            break;
	        case 61:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 925;
	            this.match(JavaScriptParser.BooleanLiteral);
	            break;
	        case 119:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 926;
	            this.match(JavaScriptParser.StringLiteral);
	            break;
	        case 120:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 927;
	            this.templateStringLiteral();
	            break;
	        case 4:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 928;
	            this.match(JavaScriptParser.RegularExpressionLiteral);
	            break;
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 929;
	            this.numericLiteral();
	            break;
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 930;
	            this.bigintLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	templateStringLiteral() {
	    let localctx = new TemplateStringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, JavaScriptParser.RULE_templateStringLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 933;
	        this.match(JavaScriptParser.BackTick);
	        this.state = 937;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===126 || _la===127) {
	            this.state = 934;
	            this.templateStringAtom();
	            this.state = 939;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 940;
	        this.match(JavaScriptParser.BackTick);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	templateStringAtom() {
	    let localctx = new TemplateStringAtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, JavaScriptParser.RULE_templateStringAtom);
	    try {
	        this.state = 947;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 127:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 942;
	            this.match(JavaScriptParser.TemplateStringAtom);
	            break;
	        case 126:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 943;
	            this.match(JavaScriptParser.TemplateStringStartExpression);
	            this.state = 944;
	            this.singleExpression(0);
	            this.state = 945;
	            this.match(JavaScriptParser.TemplateCloseBrace);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericLiteral() {
	    let localctx = new NumericLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, JavaScriptParser.RULE_numericLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 949;
	        _la = this._input.LA(1);
	        if(!(((((_la - 62)) & ~0x1f) === 0 && ((1 << (_la - 62)) & 31) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bigintLiteral() {
	    let localctx = new BigintLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, JavaScriptParser.RULE_bigintLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 951;
	        _la = this._input.LA(1);
	        if(!(((((_la - 67)) & ~0x1f) === 0 && ((1 << (_la - 67)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	getter() {
	    let localctx = new GetterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, JavaScriptParser.RULE_getter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 953;
	        if (!( this.n("get"))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.n(\"get\")");
	        }
	        this.state = 954;
	        this.identifier();
	        this.state = 955;
	        this.propertyName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setter() {
	    let localctx = new SetterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, JavaScriptParser.RULE_setter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 957;
	        if (!( this.n("set"))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.n(\"set\")");
	        }
	        this.state = 958;
	        this.identifier();
	        this.state = 959;
	        this.propertyName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierName() {
	    let localctx = new IdentifierNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, JavaScriptParser.RULE_identifierName);
	    try {
	        this.state = 963;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 961;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 962;
	            this.reservedWord();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, JavaScriptParser.RULE_identifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 965;
	        _la = this._input.LA(1);
	        if(!(((((_la - 106)) & ~0x1f) === 0 && ((1 << (_la - 106)) & 4113) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reservedWord() {
	    let localctx = new ReservedWordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, JavaScriptParser.RULE_reservedWord);
	    try {
	        this.state = 970;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 967;
	            this.keyword();
	            break;
	        case 60:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 968;
	            this.match(JavaScriptParser.NullLiteral);
	            break;
	        case 61:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 969;
	            this.match(JavaScriptParser.BooleanLiteral);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword() {
	    let localctx = new KeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, JavaScriptParser.RULE_keyword);
	    try {
	        this.state = 1018;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 71:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 972;
	            this.match(JavaScriptParser.Break);
	            break;
	        case 72:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 973;
	            this.match(JavaScriptParser.Do);
	            break;
	        case 73:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 974;
	            this.match(JavaScriptParser.Instanceof);
	            break;
	        case 74:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 975;
	            this.match(JavaScriptParser.Typeof);
	            break;
	        case 75:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 976;
	            this.match(JavaScriptParser.Case);
	            break;
	        case 76:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 977;
	            this.match(JavaScriptParser.Else);
	            break;
	        case 77:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 978;
	            this.match(JavaScriptParser.New);
	            break;
	        case 78:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 979;
	            this.match(JavaScriptParser.Var);
	            break;
	        case 79:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 980;
	            this.match(JavaScriptParser.Catch);
	            break;
	        case 80:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 981;
	            this.match(JavaScriptParser.Finally);
	            break;
	        case 81:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 982;
	            this.match(JavaScriptParser.Return);
	            break;
	        case 82:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 983;
	            this.match(JavaScriptParser.Void);
	            break;
	        case 83:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 984;
	            this.match(JavaScriptParser.Continue);
	            break;
	        case 84:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 985;
	            this.match(JavaScriptParser.For);
	            break;
	        case 85:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 986;
	            this.match(JavaScriptParser.Switch);
	            break;
	        case 86:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 987;
	            this.match(JavaScriptParser.While);
	            break;
	        case 87:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 988;
	            this.match(JavaScriptParser.Debugger);
	            break;
	        case 88:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 989;
	            this.match(JavaScriptParser.Function_);
	            break;
	        case 89:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 990;
	            this.match(JavaScriptParser.This);
	            break;
	        case 90:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 991;
	            this.match(JavaScriptParser.With);
	            break;
	        case 91:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 992;
	            this.match(JavaScriptParser.Default);
	            break;
	        case 92:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 993;
	            this.match(JavaScriptParser.If);
	            break;
	        case 93:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 994;
	            this.match(JavaScriptParser.Throw);
	            break;
	        case 94:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 995;
	            this.match(JavaScriptParser.Delete);
	            break;
	        case 95:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 996;
	            this.match(JavaScriptParser.In);
	            break;
	        case 96:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 997;
	            this.match(JavaScriptParser.Try);
	            break;
	        case 99:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 998;
	            this.match(JavaScriptParser.Class);
	            break;
	        case 100:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 999;
	            this.match(JavaScriptParser.Enum);
	            break;
	        case 101:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 1000;
	            this.match(JavaScriptParser.Extends);
	            break;
	        case 102:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 1001;
	            this.match(JavaScriptParser.Super);
	            break;
	        case 103:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 1002;
	            this.match(JavaScriptParser.Const);
	            break;
	        case 104:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 1003;
	            this.match(JavaScriptParser.Export);
	            break;
	        case 105:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 1004;
	            this.match(JavaScriptParser.Import);
	            break;
	        case 108:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 1005;
	            this.match(JavaScriptParser.Implements);
	            break;
	        case 109:
	        case 110:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 1006;
	            this.let_();
	            break;
	        case 111:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 1007;
	            this.match(JavaScriptParser.Private);
	            break;
	        case 112:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 1008;
	            this.match(JavaScriptParser.Public);
	            break;
	        case 113:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 1009;
	            this.match(JavaScriptParser.Interface);
	            break;
	        case 114:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 1010;
	            this.match(JavaScriptParser.Package);
	            break;
	        case 115:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 1011;
	            this.match(JavaScriptParser.Protected);
	            break;
	        case 116:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 1012;
	            this.match(JavaScriptParser.Static);
	            break;
	        case 117:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 1013;
	            this.match(JavaScriptParser.Yield);
	            break;
	        case 106:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 1014;
	            this.match(JavaScriptParser.Async);
	            break;
	        case 107:
	            this.enterOuterAlt(localctx, 44);
	            this.state = 1015;
	            this.match(JavaScriptParser.Await);
	            break;
	        case 98:
	            this.enterOuterAlt(localctx, 45);
	            this.state = 1016;
	            this.match(JavaScriptParser.From);
	            break;
	        case 97:
	            this.enterOuterAlt(localctx, 46);
	            this.state = 1017;
	            this.match(JavaScriptParser.As);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	let_() {
	    let localctx = new Let_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, JavaScriptParser.RULE_let_);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1020;
	        _la = this._input.LA(1);
	        if(!(_la===109 || _la===110)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eos() {
	    let localctx = new EosContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, JavaScriptParser.RULE_eos);
	    try {
	        this.state = 1026;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1022;
	            this.match(JavaScriptParser.SemiColon);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1023;
	            this.match(JavaScriptParser.EOF);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1024;
	            if (!( this.lineTerminatorAhead())) {
	                throw new antlr4.error.FailedPredicateException(this, "this.lineTerminatorAhead()");
	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1025;
	            if (!( this.closeBrace())) {
	                throw new antlr4.error.FailedPredicateException(this, "this.closeBrace()");
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

JavaScriptParser.EOF = antlr4.Token.EOF;
JavaScriptParser.HashBangLine = 1;
JavaScriptParser.MultiLineComment = 2;
JavaScriptParser.SingleLineComment = 3;
JavaScriptParser.RegularExpressionLiteral = 4;
JavaScriptParser.OpenBracket = 5;
JavaScriptParser.CloseBracket = 6;
JavaScriptParser.OpenParen = 7;
JavaScriptParser.CloseParen = 8;
JavaScriptParser.OpenBrace = 9;
JavaScriptParser.TemplateCloseBrace = 10;
JavaScriptParser.CloseBrace = 11;
JavaScriptParser.SemiColon = 12;
JavaScriptParser.Comma = 13;
JavaScriptParser.Assign = 14;
JavaScriptParser.QuestionMark = 15;
JavaScriptParser.Colon = 16;
JavaScriptParser.Ellipsis = 17;
JavaScriptParser.Dot = 18;
JavaScriptParser.PlusPlus = 19;
JavaScriptParser.MinusMinus = 20;
JavaScriptParser.Plus = 21;
JavaScriptParser.Minus = 22;
JavaScriptParser.BitNot = 23;
JavaScriptParser.Not = 24;
JavaScriptParser.Multiply = 25;
JavaScriptParser.Divide = 26;
JavaScriptParser.Modulus = 27;
JavaScriptParser.Power = 28;
JavaScriptParser.NullCoalesce = 29;
JavaScriptParser.Hashtag = 30;
JavaScriptParser.RightShiftArithmetic = 31;
JavaScriptParser.LeftShiftArithmetic = 32;
JavaScriptParser.RightShiftLogical = 33;
JavaScriptParser.LessThan = 34;
JavaScriptParser.MoreThan = 35;
JavaScriptParser.LessThanEquals = 36;
JavaScriptParser.GreaterThanEquals = 37;
JavaScriptParser.Equals_ = 38;
JavaScriptParser.NotEquals = 39;
JavaScriptParser.IdentityEquals = 40;
JavaScriptParser.IdentityNotEquals = 41;
JavaScriptParser.BitAnd = 42;
JavaScriptParser.BitXOr = 43;
JavaScriptParser.BitOr = 44;
JavaScriptParser.And = 45;
JavaScriptParser.Or = 46;
JavaScriptParser.MultiplyAssign = 47;
JavaScriptParser.DivideAssign = 48;
JavaScriptParser.ModulusAssign = 49;
JavaScriptParser.PlusAssign = 50;
JavaScriptParser.MinusAssign = 51;
JavaScriptParser.LeftShiftArithmeticAssign = 52;
JavaScriptParser.RightShiftArithmeticAssign = 53;
JavaScriptParser.RightShiftLogicalAssign = 54;
JavaScriptParser.BitAndAssign = 55;
JavaScriptParser.BitXorAssign = 56;
JavaScriptParser.BitOrAssign = 57;
JavaScriptParser.PowerAssign = 58;
JavaScriptParser.ARROW = 59;
JavaScriptParser.NullLiteral = 60;
JavaScriptParser.BooleanLiteral = 61;
JavaScriptParser.DecimalLiteral = 62;
JavaScriptParser.HexIntegerLiteral = 63;
JavaScriptParser.OctalIntegerLiteral = 64;
JavaScriptParser.OctalIntegerLiteral2 = 65;
JavaScriptParser.BinaryIntegerLiteral = 66;
JavaScriptParser.BigHexIntegerLiteral = 67;
JavaScriptParser.BigOctalIntegerLiteral = 68;
JavaScriptParser.BigBinaryIntegerLiteral = 69;
JavaScriptParser.BigDecimalIntegerLiteral = 70;
JavaScriptParser.Break = 71;
JavaScriptParser.Do = 72;
JavaScriptParser.Instanceof = 73;
JavaScriptParser.Typeof = 74;
JavaScriptParser.Case = 75;
JavaScriptParser.Else = 76;
JavaScriptParser.New = 77;
JavaScriptParser.Var = 78;
JavaScriptParser.Catch = 79;
JavaScriptParser.Finally = 80;
JavaScriptParser.Return = 81;
JavaScriptParser.Void = 82;
JavaScriptParser.Continue = 83;
JavaScriptParser.For = 84;
JavaScriptParser.Switch = 85;
JavaScriptParser.While = 86;
JavaScriptParser.Debugger = 87;
JavaScriptParser.Function_ = 88;
JavaScriptParser.This = 89;
JavaScriptParser.With = 90;
JavaScriptParser.Default = 91;
JavaScriptParser.If = 92;
JavaScriptParser.Throw = 93;
JavaScriptParser.Delete = 94;
JavaScriptParser.In = 95;
JavaScriptParser.Try = 96;
JavaScriptParser.As = 97;
JavaScriptParser.From = 98;
JavaScriptParser.Class = 99;
JavaScriptParser.Enum = 100;
JavaScriptParser.Extends = 101;
JavaScriptParser.Super = 102;
JavaScriptParser.Const = 103;
JavaScriptParser.Export = 104;
JavaScriptParser.Import = 105;
JavaScriptParser.Async = 106;
JavaScriptParser.Await = 107;
JavaScriptParser.Implements = 108;
JavaScriptParser.StrictLet = 109;
JavaScriptParser.NonStrictLet = 110;
JavaScriptParser.Private = 111;
JavaScriptParser.Public = 112;
JavaScriptParser.Interface = 113;
JavaScriptParser.Package = 114;
JavaScriptParser.Protected = 115;
JavaScriptParser.Static = 116;
JavaScriptParser.Yield = 117;
JavaScriptParser.Identifier = 118;
JavaScriptParser.StringLiteral = 119;
JavaScriptParser.BackTick = 120;
JavaScriptParser.WhiteSpaces = 121;
JavaScriptParser.LineTerminator = 122;
JavaScriptParser.HtmlComment = 123;
JavaScriptParser.CDataComment = 124;
JavaScriptParser.UnexpectedCharacter = 125;
JavaScriptParser.TemplateStringStartExpression = 126;
JavaScriptParser.TemplateStringAtom = 127;

JavaScriptParser.RULE_program = 0;
JavaScriptParser.RULE_sourceElement = 1;
JavaScriptParser.RULE_statement = 2;
JavaScriptParser.RULE_block = 3;
JavaScriptParser.RULE_statementList = 4;
JavaScriptParser.RULE_importStatement = 5;
JavaScriptParser.RULE_importFromBlock = 6;
JavaScriptParser.RULE_moduleItems = 7;
JavaScriptParser.RULE_importDefault = 8;
JavaScriptParser.RULE_importNamespace = 9;
JavaScriptParser.RULE_importFrom = 10;
JavaScriptParser.RULE_aliasName = 11;
JavaScriptParser.RULE_exportStatement = 12;
JavaScriptParser.RULE_exportFromBlock = 13;
JavaScriptParser.RULE_declaration = 14;
JavaScriptParser.RULE_variableStatement = 15;
JavaScriptParser.RULE_variableDeclarationList = 16;
JavaScriptParser.RULE_variableDeclaration = 17;
JavaScriptParser.RULE_emptyStatement_ = 18;
JavaScriptParser.RULE_expressionStatement = 19;
JavaScriptParser.RULE_ifStatement = 20;
JavaScriptParser.RULE_iterationStatement = 21;
JavaScriptParser.RULE_varModifier = 22;
JavaScriptParser.RULE_continueStatement = 23;
JavaScriptParser.RULE_breakStatement = 24;
JavaScriptParser.RULE_returnStatement = 25;
JavaScriptParser.RULE_yieldStatement = 26;
JavaScriptParser.RULE_withStatement = 27;
JavaScriptParser.RULE_switchStatement = 28;
JavaScriptParser.RULE_caseBlock = 29;
JavaScriptParser.RULE_caseClauses = 30;
JavaScriptParser.RULE_caseClause = 31;
JavaScriptParser.RULE_defaultClause = 32;
JavaScriptParser.RULE_labelledStatement = 33;
JavaScriptParser.RULE_throwStatement = 34;
JavaScriptParser.RULE_tryStatement = 35;
JavaScriptParser.RULE_catchProduction = 36;
JavaScriptParser.RULE_finallyProduction = 37;
JavaScriptParser.RULE_debuggerStatement = 38;
JavaScriptParser.RULE_functionDeclaration = 39;
JavaScriptParser.RULE_classDeclaration = 40;
JavaScriptParser.RULE_classTail = 41;
JavaScriptParser.RULE_classElement = 42;
JavaScriptParser.RULE_methodDefinition = 43;
JavaScriptParser.RULE_formalParameterList = 44;
JavaScriptParser.RULE_formalParameterArg = 45;
JavaScriptParser.RULE_lastFormalParameterArg = 46;
JavaScriptParser.RULE_functionBody = 47;
JavaScriptParser.RULE_sourceElements = 48;
JavaScriptParser.RULE_arrayLiteral = 49;
JavaScriptParser.RULE_elementList = 50;
JavaScriptParser.RULE_arrayElement = 51;
JavaScriptParser.RULE_propertyAssignment = 52;
JavaScriptParser.RULE_propertyName = 53;
JavaScriptParser.RULE_arguments = 54;
JavaScriptParser.RULE_argument = 55;
JavaScriptParser.RULE_expressionSequence = 56;
JavaScriptParser.RULE_singleExpression = 57;
JavaScriptParser.RULE_assignable = 58;
JavaScriptParser.RULE_objectLiteral = 59;
JavaScriptParser.RULE_anonymousFunction = 60;
JavaScriptParser.RULE_arrowFunctionParameters = 61;
JavaScriptParser.RULE_arrowFunctionBody = 62;
JavaScriptParser.RULE_assignmentOperator = 63;
JavaScriptParser.RULE_literal = 64;
JavaScriptParser.RULE_templateStringLiteral = 65;
JavaScriptParser.RULE_templateStringAtom = 66;
JavaScriptParser.RULE_numericLiteral = 67;
JavaScriptParser.RULE_bigintLiteral = 68;
JavaScriptParser.RULE_getter = 69;
JavaScriptParser.RULE_setter = 70;
JavaScriptParser.RULE_identifierName = 71;
JavaScriptParser.RULE_identifier = 72;
JavaScriptParser.RULE_reservedWord = 73;
JavaScriptParser.RULE_keyword = 74;
JavaScriptParser.RULE_let_ = 75;
JavaScriptParser.RULE_eos = 76;

class ProgramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_program;
    }

	EOF() {
	    return this.getToken(JavaScriptParser.EOF, 0);
	};

	HashBangLine() {
	    return this.getToken(JavaScriptParser.HashBangLine, 0);
	};

	sourceElements() {
	    return this.getTypedRuleContext(SourceElementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterProgram(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitProgram(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitProgram(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SourceElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_sourceElement;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterSourceElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitSourceElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitSourceElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_statement;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	variableStatement() {
	    return this.getTypedRuleContext(VariableStatementContext,0);
	};

	importStatement() {
	    return this.getTypedRuleContext(ImportStatementContext,0);
	};

	exportStatement() {
	    return this.getTypedRuleContext(ExportStatementContext,0);
	};

	emptyStatement_() {
	    return this.getTypedRuleContext(EmptyStatement_Context,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	expressionStatement() {
	    return this.getTypedRuleContext(ExpressionStatementContext,0);
	};

	ifStatement() {
	    return this.getTypedRuleContext(IfStatementContext,0);
	};

	iterationStatement() {
	    return this.getTypedRuleContext(IterationStatementContext,0);
	};

	continueStatement() {
	    return this.getTypedRuleContext(ContinueStatementContext,0);
	};

	breakStatement() {
	    return this.getTypedRuleContext(BreakStatementContext,0);
	};

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	yieldStatement() {
	    return this.getTypedRuleContext(YieldStatementContext,0);
	};

	withStatement() {
	    return this.getTypedRuleContext(WithStatementContext,0);
	};

	labelledStatement() {
	    return this.getTypedRuleContext(LabelledStatementContext,0);
	};

	switchStatement() {
	    return this.getTypedRuleContext(SwitchStatementContext,0);
	};

	throwStatement() {
	    return this.getTypedRuleContext(ThrowStatementContext,0);
	};

	tryStatement() {
	    return this.getTypedRuleContext(TryStatementContext,0);
	};

	debuggerStatement() {
	    return this.getTypedRuleContext(DebuggerStatementContext,0);
	};

	functionDeclaration() {
	    return this.getTypedRuleContext(FunctionDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_block;
    }

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_statementList;
    }

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterStatementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitStatementList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitStatementList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_importStatement;
    }

	Import() {
	    return this.getToken(JavaScriptParser.Import, 0);
	};

	importFromBlock() {
	    return this.getTypedRuleContext(ImportFromBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterImportStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitImportStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitImportStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportFromBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_importFromBlock;
    }

	importFrom() {
	    return this.getTypedRuleContext(ImportFromContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	importNamespace() {
	    return this.getTypedRuleContext(ImportNamespaceContext,0);
	};

	moduleItems() {
	    return this.getTypedRuleContext(ModuleItemsContext,0);
	};

	importDefault() {
	    return this.getTypedRuleContext(ImportDefaultContext,0);
	};

	StringLiteral() {
	    return this.getToken(JavaScriptParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterImportFromBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitImportFromBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitImportFromBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ModuleItemsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_moduleItems;
    }

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	aliasName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AliasNameContext);
	    } else {
	        return this.getTypedRuleContext(AliasNameContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Comma);
	    } else {
	        return this.getToken(JavaScriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterModuleItems(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitModuleItems(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitModuleItems(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportDefaultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_importDefault;
    }

	aliasName() {
	    return this.getTypedRuleContext(AliasNameContext,0);
	};

	Comma() {
	    return this.getToken(JavaScriptParser.Comma, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterImportDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitImportDefault(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitImportDefault(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportNamespaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_importNamespace;
    }

	Multiply() {
	    return this.getToken(JavaScriptParser.Multiply, 0);
	};

	identifierName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierNameContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierNameContext,i);
	    }
	};

	As() {
	    return this.getToken(JavaScriptParser.As, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterImportNamespace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitImportNamespace(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitImportNamespace(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportFromContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_importFrom;
    }

	From() {
	    return this.getToken(JavaScriptParser.From, 0);
	};

	StringLiteral() {
	    return this.getToken(JavaScriptParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterImportFrom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitImportFrom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitImportFrom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AliasNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_aliasName;
    }

	identifierName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierNameContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierNameContext,i);
	    }
	};

	As() {
	    return this.getToken(JavaScriptParser.As, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterAliasName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitAliasName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitAliasName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExportStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_exportStatement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ExportDefaultDeclarationContext extends ExportStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Export() {
	    return this.getToken(JavaScriptParser.Export, 0);
	};

	Default() {
	    return this.getToken(JavaScriptParser.Default, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterExportDefaultDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitExportDefaultDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitExportDefaultDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ExportDefaultDeclarationContext = ExportDefaultDeclarationContext;

class ExportDeclarationContext extends ExportStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Export() {
	    return this.getToken(JavaScriptParser.Export, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	exportFromBlock() {
	    return this.getTypedRuleContext(ExportFromBlockContext,0);
	};

	declaration() {
	    return this.getTypedRuleContext(DeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterExportDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitExportDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitExportDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ExportDeclarationContext = ExportDeclarationContext;

class ExportFromBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_exportFromBlock;
    }

	importNamespace() {
	    return this.getTypedRuleContext(ImportNamespaceContext,0);
	};

	importFrom() {
	    return this.getTypedRuleContext(ImportFromContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	moduleItems() {
	    return this.getTypedRuleContext(ModuleItemsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterExportFromBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitExportFromBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitExportFromBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_declaration;
    }

	variableStatement() {
	    return this.getTypedRuleContext(VariableStatementContext,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	functionDeclaration() {
	    return this.getTypedRuleContext(FunctionDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_variableStatement;
    }

	variableDeclarationList() {
	    return this.getTypedRuleContext(VariableDeclarationListContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterVariableStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitVariableStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitVariableStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableDeclarationListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_variableDeclarationList;
    }

	varModifier() {
	    return this.getTypedRuleContext(VarModifierContext,0);
	};

	variableDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(VariableDeclarationContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Comma);
	    } else {
	        return this.getToken(JavaScriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterVariableDeclarationList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitVariableDeclarationList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitVariableDeclarationList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_variableDeclaration;
    }

	assignable() {
	    return this.getTypedRuleContext(AssignableContext,0);
	};

	Assign() {
	    return this.getToken(JavaScriptParser.Assign, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitVariableDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitVariableDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EmptyStatement_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_emptyStatement_;
    }

	SemiColon() {
	    return this.getToken(JavaScriptParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterEmptyStatement_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitEmptyStatement_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitEmptyStatement_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_expressionStatement;
    }

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterExpressionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitExpressionStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitExpressionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IfStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_ifStatement;
    }

	If() {
	    return this.getToken(JavaScriptParser.If, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	Else() {
	    return this.getToken(JavaScriptParser.Else, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterIfStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitIfStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitIfStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IterationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_iterationStatement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DoStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Do() {
	    return this.getToken(JavaScriptParser.Do, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	While() {
	    return this.getToken(JavaScriptParser.While, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterDoStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitDoStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitDoStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.DoStatementContext = DoStatementContext;

class WhileStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	While() {
	    return this.getToken(JavaScriptParser.While, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterWhileStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitWhileStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitWhileStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.WhileStatementContext = WhileStatementContext;

class ForStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	For() {
	    return this.getToken(JavaScriptParser.For, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	SemiColon = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.SemiColon);
	    } else {
	        return this.getToken(JavaScriptParser.SemiColon, i);
	    }
	};


	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	expressionSequence = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionSequenceContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionSequenceContext,i);
	    }
	};

	variableDeclarationList() {
	    return this.getTypedRuleContext(VariableDeclarationListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterForStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitForStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitForStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ForStatementContext = ForStatementContext;

class ForInStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	For() {
	    return this.getToken(JavaScriptParser.For, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	In() {
	    return this.getToken(JavaScriptParser.In, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	variableDeclarationList() {
	    return this.getTypedRuleContext(VariableDeclarationListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterForInStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitForInStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitForInStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ForInStatementContext = ForInStatementContext;

class ForOfStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	For() {
	    return this.getToken(JavaScriptParser.For, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	variableDeclarationList() {
	    return this.getTypedRuleContext(VariableDeclarationListContext,0);
	};

	Await() {
	    return this.getToken(JavaScriptParser.Await, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterForOfStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitForOfStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitForOfStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ForOfStatementContext = ForOfStatementContext;

class VarModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_varModifier;
    }

	Var() {
	    return this.getToken(JavaScriptParser.Var, 0);
	};

	let_() {
	    return this.getTypedRuleContext(Let_Context,0);
	};

	Const() {
	    return this.getToken(JavaScriptParser.Const, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterVarModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitVarModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitVarModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ContinueStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_continueStatement;
    }

	Continue() {
	    return this.getToken(JavaScriptParser.Continue, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterContinueStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitContinueStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitContinueStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BreakStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_breakStatement;
    }

	Break() {
	    return this.getToken(JavaScriptParser.Break, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterBreakStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitBreakStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitBreakStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReturnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_returnStatement;
    }

	Return() {
	    return this.getToken(JavaScriptParser.Return, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitReturnStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitReturnStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class YieldStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_yieldStatement;
    }

	Yield() {
	    return this.getToken(JavaScriptParser.Yield, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterYieldStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitYieldStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitYieldStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WithStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_withStatement;
    }

	With() {
	    return this.getToken(JavaScriptParser.With, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterWithStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitWithStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitWithStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SwitchStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_switchStatement;
    }

	Switch() {
	    return this.getToken(JavaScriptParser.Switch, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	caseBlock() {
	    return this.getTypedRuleContext(CaseBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterSwitchStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitSwitchStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitSwitchStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaseBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_caseBlock;
    }

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	caseClauses = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CaseClausesContext);
	    } else {
	        return this.getTypedRuleContext(CaseClausesContext,i);
	    }
	};

	defaultClause() {
	    return this.getTypedRuleContext(DefaultClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterCaseBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitCaseBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitCaseBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaseClausesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_caseClauses;
    }

	caseClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CaseClauseContext);
	    } else {
	        return this.getTypedRuleContext(CaseClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterCaseClauses(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitCaseClauses(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitCaseClauses(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaseClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_caseClause;
    }

	Case() {
	    return this.getToken(JavaScriptParser.Case, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	Colon() {
	    return this.getToken(JavaScriptParser.Colon, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterCaseClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitCaseClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitCaseClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefaultClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_defaultClause;
    }

	Default() {
	    return this.getToken(JavaScriptParser.Default, 0);
	};

	Colon() {
	    return this.getToken(JavaScriptParser.Colon, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterDefaultClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitDefaultClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitDefaultClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabelledStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_labelledStatement;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	Colon() {
	    return this.getToken(JavaScriptParser.Colon, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterLabelledStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitLabelledStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitLabelledStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ThrowStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_throwStatement;
    }

	Throw() {
	    return this.getToken(JavaScriptParser.Throw, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterThrowStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitThrowStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitThrowStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_tryStatement;
    }

	Try() {
	    return this.getToken(JavaScriptParser.Try, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	catchProduction() {
	    return this.getTypedRuleContext(CatchProductionContext,0);
	};

	finallyProduction() {
	    return this.getTypedRuleContext(FinallyProductionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterTryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitTryStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitTryStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CatchProductionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_catchProduction;
    }

	Catch() {
	    return this.getToken(JavaScriptParser.Catch, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	assignable() {
	    return this.getTypedRuleContext(AssignableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterCatchProduction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitCatchProduction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitCatchProduction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FinallyProductionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_finallyProduction;
    }

	Finally() {
	    return this.getToken(JavaScriptParser.Finally, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterFinallyProduction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitFinallyProduction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitFinallyProduction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DebuggerStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_debuggerStatement;
    }

	Debugger() {
	    return this.getToken(JavaScriptParser.Debugger, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterDebuggerStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitDebuggerStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitDebuggerStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_functionDeclaration;
    }

	Function_() {
	    return this.getToken(JavaScriptParser.Function_, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	Async() {
	    return this.getToken(JavaScriptParser.Async, 0);
	};

	Multiply() {
	    return this.getToken(JavaScriptParser.Multiply, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterFunctionDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitFunctionDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitFunctionDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_classDeclaration;
    }

	Class() {
	    return this.getToken(JavaScriptParser.Class, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	classTail() {
	    return this.getTypedRuleContext(ClassTailContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterClassDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitClassDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitClassDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassTailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_classTail;
    }

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	Extends() {
	    return this.getToken(JavaScriptParser.Extends, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	classElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassElementContext);
	    } else {
	        return this.getTypedRuleContext(ClassElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterClassTail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitClassTail(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitClassTail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_classElement;
    }

	methodDefinition() {
	    return this.getTypedRuleContext(MethodDefinitionContext,0);
	};

	assignable() {
	    return this.getTypedRuleContext(AssignableContext,0);
	};

	Assign() {
	    return this.getToken(JavaScriptParser.Assign, 0);
	};

	objectLiteral() {
	    return this.getTypedRuleContext(ObjectLiteralContext,0);
	};

	SemiColon() {
	    return this.getToken(JavaScriptParser.SemiColon, 0);
	};

	Static = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Static);
	    } else {
	        return this.getToken(JavaScriptParser.Static, i);
	    }
	};


	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	Async = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Async);
	    } else {
	        return this.getToken(JavaScriptParser.Async, i);
	    }
	};


	emptyStatement_() {
	    return this.getTypedRuleContext(EmptyStatement_Context,0);
	};

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	Hashtag() {
	    return this.getToken(JavaScriptParser.Hashtag, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterClassElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitClassElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitClassElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_methodDefinition;
    }

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	Multiply() {
	    return this.getToken(JavaScriptParser.Multiply, 0);
	};

	Hashtag() {
	    return this.getToken(JavaScriptParser.Hashtag, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	getter() {
	    return this.getTypedRuleContext(GetterContext,0);
	};

	setter() {
	    return this.getTypedRuleContext(SetterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterMethodDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitMethodDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitMethodDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FormalParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_formalParameterList;
    }

	formalParameterArg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FormalParameterArgContext);
	    } else {
	        return this.getTypedRuleContext(FormalParameterArgContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Comma);
	    } else {
	        return this.getToken(JavaScriptParser.Comma, i);
	    }
	};


	lastFormalParameterArg() {
	    return this.getTypedRuleContext(LastFormalParameterArgContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterFormalParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitFormalParameterList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitFormalParameterList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FormalParameterArgContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_formalParameterArg;
    }

	assignable() {
	    return this.getTypedRuleContext(AssignableContext,0);
	};

	Assign() {
	    return this.getToken(JavaScriptParser.Assign, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterFormalParameterArg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitFormalParameterArg(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitFormalParameterArg(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LastFormalParameterArgContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_lastFormalParameterArg;
    }

	Ellipsis() {
	    return this.getToken(JavaScriptParser.Ellipsis, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterLastFormalParameterArg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitLastFormalParameterArg(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitLastFormalParameterArg(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_functionBody;
    }

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	sourceElements() {
	    return this.getTypedRuleContext(SourceElementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterFunctionBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitFunctionBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitFunctionBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SourceElementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_sourceElements;
    }

	sourceElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SourceElementContext);
	    } else {
	        return this.getTypedRuleContext(SourceElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterSourceElements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitSourceElements(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitSourceElements(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_arrayLiteral;
    }

	OpenBracket() {
	    return this.getToken(JavaScriptParser.OpenBracket, 0);
	};

	elementList() {
	    return this.getTypedRuleContext(ElementListContext,0);
	};

	CloseBracket() {
	    return this.getToken(JavaScriptParser.CloseBracket, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterArrayLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitArrayLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitArrayLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_elementList;
    }

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Comma);
	    } else {
	        return this.getToken(JavaScriptParser.Comma, i);
	    }
	};


	arrayElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArrayElementContext);
	    } else {
	        return this.getTypedRuleContext(ArrayElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterElementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitElementList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitElementList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_arrayElement;
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	Ellipsis() {
	    return this.getToken(JavaScriptParser.Ellipsis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterArrayElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitArrayElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitArrayElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PropertyAssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_propertyAssignment;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PropertyExpressionAssignmentContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	Colon() {
	    return this.getToken(JavaScriptParser.Colon, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPropertyExpressionAssignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPropertyExpressionAssignment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitPropertyExpressionAssignment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.PropertyExpressionAssignmentContext = PropertyExpressionAssignmentContext;

class ComputedPropertyExpressionAssignmentContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OpenBracket() {
	    return this.getToken(JavaScriptParser.OpenBracket, 0);
	};

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	CloseBracket() {
	    return this.getToken(JavaScriptParser.CloseBracket, 0);
	};

	Colon() {
	    return this.getToken(JavaScriptParser.Colon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterComputedPropertyExpressionAssignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitComputedPropertyExpressionAssignment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitComputedPropertyExpressionAssignment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ComputedPropertyExpressionAssignmentContext = ComputedPropertyExpressionAssignmentContext;

class PropertyShorthandContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	Ellipsis() {
	    return this.getToken(JavaScriptParser.Ellipsis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPropertyShorthand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPropertyShorthand(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitPropertyShorthand(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.PropertyShorthandContext = PropertyShorthandContext;

class PropertySetterContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	setter() {
	    return this.getTypedRuleContext(SetterContext,0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	formalParameterArg() {
	    return this.getTypedRuleContext(FormalParameterArgContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPropertySetter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPropertySetter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitPropertySetter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.PropertySetterContext = PropertySetterContext;

class PropertyGetterContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	getter() {
	    return this.getTypedRuleContext(GetterContext,0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPropertyGetter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPropertyGetter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitPropertyGetter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.PropertyGetterContext = PropertyGetterContext;

class FunctionPropertyContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	Async() {
	    return this.getToken(JavaScriptParser.Async, 0);
	};

	Multiply() {
	    return this.getToken(JavaScriptParser.Multiply, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterFunctionProperty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitFunctionProperty(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitFunctionProperty(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.FunctionPropertyContext = FunctionPropertyContext;

class PropertyNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_propertyName;
    }

	identifierName() {
	    return this.getTypedRuleContext(IdentifierNameContext,0);
	};

	StringLiteral() {
	    return this.getToken(JavaScriptParser.StringLiteral, 0);
	};

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	OpenBracket() {
	    return this.getToken(JavaScriptParser.OpenBracket, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	CloseBracket() {
	    return this.getToken(JavaScriptParser.CloseBracket, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPropertyName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPropertyName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitPropertyName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_arguments;
    }

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	argument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgumentContext);
	    } else {
	        return this.getTypedRuleContext(ArgumentContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Comma);
	    } else {
	        return this.getToken(JavaScriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitArguments(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitArguments(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_argument;
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	Ellipsis() {
	    return this.getToken(JavaScriptParser.Ellipsis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitArgument(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitArgument(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_expressionSequence;
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Comma);
	    } else {
	        return this.getToken(JavaScriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterExpressionSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitExpressionSequence(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitExpressionSequence(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SingleExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_singleExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TemplateStringExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	templateStringLiteral() {
	    return this.getTypedRuleContext(TemplateStringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterTemplateStringExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitTemplateStringExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitTemplateStringExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.TemplateStringExpressionContext = TemplateStringExpressionContext;

class TernaryExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	QuestionMark() {
	    return this.getToken(JavaScriptParser.QuestionMark, 0);
	};

	Colon() {
	    return this.getToken(JavaScriptParser.Colon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterTernaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitTernaryExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitTernaryExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.TernaryExpressionContext = TernaryExpressionContext;

class LogicalAndExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	And() {
	    return this.getToken(JavaScriptParser.And, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterLogicalAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitLogicalAndExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitLogicalAndExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.LogicalAndExpressionContext = LogicalAndExpressionContext;

class PowerExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Power() {
	    return this.getToken(JavaScriptParser.Power, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPowerExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPowerExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitPowerExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.PowerExpressionContext = PowerExpressionContext;

class PreIncrementExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PlusPlus() {
	    return this.getToken(JavaScriptParser.PlusPlus, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPreIncrementExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPreIncrementExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitPreIncrementExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.PreIncrementExpressionContext = PreIncrementExpressionContext;

class ObjectLiteralExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	objectLiteral() {
	    return this.getTypedRuleContext(ObjectLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterObjectLiteralExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitObjectLiteralExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitObjectLiteralExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ObjectLiteralExpressionContext = ObjectLiteralExpressionContext;

class MetaExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	New() {
	    return this.getToken(JavaScriptParser.New, 0);
	};

	Dot() {
	    return this.getToken(JavaScriptParser.Dot, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterMetaExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitMetaExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitMetaExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.MetaExpressionContext = MetaExpressionContext;

class InExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	In() {
	    return this.getToken(JavaScriptParser.In, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterInExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitInExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitInExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.InExpressionContext = InExpressionContext;

class LogicalOrExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Or() {
	    return this.getToken(JavaScriptParser.Or, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterLogicalOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitLogicalOrExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitLogicalOrExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.LogicalOrExpressionContext = LogicalOrExpressionContext;

class NotExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Not() {
	    return this.getToken(JavaScriptParser.Not, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterNotExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitNotExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitNotExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.NotExpressionContext = NotExpressionContext;

class PreDecreaseExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MinusMinus() {
	    return this.getToken(JavaScriptParser.MinusMinus, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPreDecreaseExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPreDecreaseExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitPreDecreaseExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.PreDecreaseExpressionContext = PreDecreaseExpressionContext;

class ArgumentsExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterArgumentsExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitArgumentsExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitArgumentsExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ArgumentsExpressionContext = ArgumentsExpressionContext;

class AwaitExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Await() {
	    return this.getToken(JavaScriptParser.Await, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterAwaitExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitAwaitExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitAwaitExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.AwaitExpressionContext = AwaitExpressionContext;

class ThisExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	This() {
	    return this.getToken(JavaScriptParser.This, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterThisExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitThisExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitThisExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ThisExpressionContext = ThisExpressionContext;

class FunctionExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	anonymousFunction() {
	    return this.getTypedRuleContext(AnonymousFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterFunctionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitFunctionExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitFunctionExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.FunctionExpressionContext = FunctionExpressionContext;

class UnaryMinusExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Minus() {
	    return this.getToken(JavaScriptParser.Minus, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterUnaryMinusExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitUnaryMinusExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitUnaryMinusExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.UnaryMinusExpressionContext = UnaryMinusExpressionContext;

class AssignmentExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Assign() {
	    return this.getToken(JavaScriptParser.Assign, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterAssignmentExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitAssignmentExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitAssignmentExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.AssignmentExpressionContext = AssignmentExpressionContext;

class PostDecreaseExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	MinusMinus() {
	    return this.getToken(JavaScriptParser.MinusMinus, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPostDecreaseExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPostDecreaseExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitPostDecreaseExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.PostDecreaseExpressionContext = PostDecreaseExpressionContext;

class TypeofExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Typeof() {
	    return this.getToken(JavaScriptParser.Typeof, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterTypeofExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitTypeofExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitTypeofExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.TypeofExpressionContext = TypeofExpressionContext;

class InstanceofExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Instanceof() {
	    return this.getToken(JavaScriptParser.Instanceof, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterInstanceofExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitInstanceofExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitInstanceofExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.InstanceofExpressionContext = InstanceofExpressionContext;

class UnaryPlusExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Plus() {
	    return this.getToken(JavaScriptParser.Plus, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterUnaryPlusExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitUnaryPlusExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitUnaryPlusExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.UnaryPlusExpressionContext = UnaryPlusExpressionContext;

class DeleteExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Delete() {
	    return this.getToken(JavaScriptParser.Delete, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterDeleteExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitDeleteExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitDeleteExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.DeleteExpressionContext = DeleteExpressionContext;

class ImportExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Import() {
	    return this.getToken(JavaScriptParser.Import, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterImportExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitImportExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitImportExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ImportExpressionContext = ImportExpressionContext;

class EqualityExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Equals_() {
	    return this.getToken(JavaScriptParser.Equals_, 0);
	};

	NotEquals() {
	    return this.getToken(JavaScriptParser.NotEquals, 0);
	};

	IdentityEquals() {
	    return this.getToken(JavaScriptParser.IdentityEquals, 0);
	};

	IdentityNotEquals() {
	    return this.getToken(JavaScriptParser.IdentityNotEquals, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterEqualityExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitEqualityExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitEqualityExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.EqualityExpressionContext = EqualityExpressionContext;

class BitXOrExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	BitXOr() {
	    return this.getToken(JavaScriptParser.BitXOr, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterBitXOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitBitXOrExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitBitXOrExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.BitXOrExpressionContext = BitXOrExpressionContext;

class SuperExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Super() {
	    return this.getToken(JavaScriptParser.Super, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterSuperExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitSuperExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitSuperExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.SuperExpressionContext = SuperExpressionContext;

class MultiplicativeExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Multiply() {
	    return this.getToken(JavaScriptParser.Multiply, 0);
	};

	Divide() {
	    return this.getToken(JavaScriptParser.Divide, 0);
	};

	Modulus() {
	    return this.getToken(JavaScriptParser.Modulus, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterMultiplicativeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitMultiplicativeExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitMultiplicativeExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext;

class BitShiftExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	LeftShiftArithmetic() {
	    return this.getToken(JavaScriptParser.LeftShiftArithmetic, 0);
	};

	RightShiftArithmetic() {
	    return this.getToken(JavaScriptParser.RightShiftArithmetic, 0);
	};

	RightShiftLogical() {
	    return this.getToken(JavaScriptParser.RightShiftLogical, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterBitShiftExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitBitShiftExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitBitShiftExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.BitShiftExpressionContext = BitShiftExpressionContext;

class ParenthesizedExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterParenthesizedExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitParenthesizedExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitParenthesizedExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;

class AdditiveExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Plus() {
	    return this.getToken(JavaScriptParser.Plus, 0);
	};

	Minus() {
	    return this.getToken(JavaScriptParser.Minus, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterAdditiveExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitAdditiveExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitAdditiveExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.AdditiveExpressionContext = AdditiveExpressionContext;

class RelationalExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	LessThan() {
	    return this.getToken(JavaScriptParser.LessThan, 0);
	};

	MoreThan() {
	    return this.getToken(JavaScriptParser.MoreThan, 0);
	};

	LessThanEquals() {
	    return this.getToken(JavaScriptParser.LessThanEquals, 0);
	};

	GreaterThanEquals() {
	    return this.getToken(JavaScriptParser.GreaterThanEquals, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterRelationalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitRelationalExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitRelationalExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.RelationalExpressionContext = RelationalExpressionContext;

class PostIncrementExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	PlusPlus() {
	    return this.getToken(JavaScriptParser.PlusPlus, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPostIncrementExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPostIncrementExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitPostIncrementExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.PostIncrementExpressionContext = PostIncrementExpressionContext;

class YieldExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	yieldStatement() {
	    return this.getTypedRuleContext(YieldStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterYieldExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitYieldExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitYieldExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.YieldExpressionContext = YieldExpressionContext;

class BitNotExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BitNot() {
	    return this.getToken(JavaScriptParser.BitNot, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterBitNotExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitBitNotExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitBitNotExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.BitNotExpressionContext = BitNotExpressionContext;

class NewExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	New() {
	    return this.getToken(JavaScriptParser.New, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterNewExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitNewExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitNewExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.NewExpressionContext = NewExpressionContext;

class LiteralExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterLiteralExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitLiteralExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitLiteralExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.LiteralExpressionContext = LiteralExpressionContext;

class ArrayLiteralExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	arrayLiteral() {
	    return this.getTypedRuleContext(ArrayLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterArrayLiteralExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitArrayLiteralExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitArrayLiteralExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ArrayLiteralExpressionContext = ArrayLiteralExpressionContext;

class MemberDotExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	Dot() {
	    return this.getToken(JavaScriptParser.Dot, 0);
	};

	identifierName() {
	    return this.getTypedRuleContext(IdentifierNameContext,0);
	};

	QuestionMark() {
	    return this.getToken(JavaScriptParser.QuestionMark, 0);
	};

	Hashtag() {
	    return this.getToken(JavaScriptParser.Hashtag, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterMemberDotExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitMemberDotExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitMemberDotExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.MemberDotExpressionContext = MemberDotExpressionContext;

class ClassExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Class() {
	    return this.getToken(JavaScriptParser.Class, 0);
	};

	classTail() {
	    return this.getTypedRuleContext(ClassTailContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterClassExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitClassExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitClassExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ClassExpressionContext = ClassExpressionContext;

class MemberIndexExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	OpenBracket() {
	    return this.getToken(JavaScriptParser.OpenBracket, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseBracket() {
	    return this.getToken(JavaScriptParser.CloseBracket, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterMemberIndexExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitMemberIndexExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitMemberIndexExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.MemberIndexExpressionContext = MemberIndexExpressionContext;

class IdentifierExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterIdentifierExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitIdentifierExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitIdentifierExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.IdentifierExpressionContext = IdentifierExpressionContext;

class BitAndExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	BitAnd() {
	    return this.getToken(JavaScriptParser.BitAnd, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterBitAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitBitAndExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitBitAndExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.BitAndExpressionContext = BitAndExpressionContext;

class BitOrExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	BitOr() {
	    return this.getToken(JavaScriptParser.BitOr, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterBitOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitBitOrExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitBitOrExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.BitOrExpressionContext = BitOrExpressionContext;

class AssignmentOperatorExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	assignmentOperator() {
	    return this.getTypedRuleContext(AssignmentOperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterAssignmentOperatorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitAssignmentOperatorExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitAssignmentOperatorExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.AssignmentOperatorExpressionContext = AssignmentOperatorExpressionContext;

class VoidExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Void() {
	    return this.getToken(JavaScriptParser.Void, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterVoidExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitVoidExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitVoidExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.VoidExpressionContext = VoidExpressionContext;

class CoalesceExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	NullCoalesce() {
	    return this.getToken(JavaScriptParser.NullCoalesce, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterCoalesceExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitCoalesceExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitCoalesceExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.CoalesceExpressionContext = CoalesceExpressionContext;

class AssignableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_assignable;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	arrayLiteral() {
	    return this.getTypedRuleContext(ArrayLiteralContext,0);
	};

	objectLiteral() {
	    return this.getTypedRuleContext(ObjectLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterAssignable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitAssignable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitAssignable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ObjectLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_objectLiteral;
    }

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	propertyAssignment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyAssignmentContext);
	    } else {
	        return this.getTypedRuleContext(PropertyAssignmentContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Comma);
	    } else {
	        return this.getToken(JavaScriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterObjectLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitObjectLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitObjectLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnonymousFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_anonymousFunction;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AnonymousFunctionDeclContext extends AnonymousFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Function_() {
	    return this.getToken(JavaScriptParser.Function_, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	Async() {
	    return this.getToken(JavaScriptParser.Async, 0);
	};

	Multiply() {
	    return this.getToken(JavaScriptParser.Multiply, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterAnonymousFunctionDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitAnonymousFunctionDecl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitAnonymousFunctionDecl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.AnonymousFunctionDeclContext = AnonymousFunctionDeclContext;

class ArrowFunctionContext extends AnonymousFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	arrowFunctionParameters() {
	    return this.getTypedRuleContext(ArrowFunctionParametersContext,0);
	};

	ARROW() {
	    return this.getToken(JavaScriptParser.ARROW, 0);
	};

	arrowFunctionBody() {
	    return this.getTypedRuleContext(ArrowFunctionBodyContext,0);
	};

	Async() {
	    return this.getToken(JavaScriptParser.Async, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterArrowFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitArrowFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitArrowFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.ArrowFunctionContext = ArrowFunctionContext;

class FunctionDeclContext extends AnonymousFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	functionDeclaration() {
	    return this.getTypedRuleContext(FunctionDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterFunctionDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitFunctionDecl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitFunctionDecl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

JavaScriptParser.FunctionDeclContext = FunctionDeclContext;

class ArrowFunctionParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_arrowFunctionParameters;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterArrowFunctionParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitArrowFunctionParameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitArrowFunctionParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrowFunctionBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_arrowFunctionBody;
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterArrowFunctionBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitArrowFunctionBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitArrowFunctionBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssignmentOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_assignmentOperator;
    }

	MultiplyAssign() {
	    return this.getToken(JavaScriptParser.MultiplyAssign, 0);
	};

	DivideAssign() {
	    return this.getToken(JavaScriptParser.DivideAssign, 0);
	};

	ModulusAssign() {
	    return this.getToken(JavaScriptParser.ModulusAssign, 0);
	};

	PlusAssign() {
	    return this.getToken(JavaScriptParser.PlusAssign, 0);
	};

	MinusAssign() {
	    return this.getToken(JavaScriptParser.MinusAssign, 0);
	};

	LeftShiftArithmeticAssign() {
	    return this.getToken(JavaScriptParser.LeftShiftArithmeticAssign, 0);
	};

	RightShiftArithmeticAssign() {
	    return this.getToken(JavaScriptParser.RightShiftArithmeticAssign, 0);
	};

	RightShiftLogicalAssign() {
	    return this.getToken(JavaScriptParser.RightShiftLogicalAssign, 0);
	};

	BitAndAssign() {
	    return this.getToken(JavaScriptParser.BitAndAssign, 0);
	};

	BitXorAssign() {
	    return this.getToken(JavaScriptParser.BitXorAssign, 0);
	};

	BitOrAssign() {
	    return this.getToken(JavaScriptParser.BitOrAssign, 0);
	};

	PowerAssign() {
	    return this.getToken(JavaScriptParser.PowerAssign, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterAssignmentOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitAssignmentOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitAssignmentOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_literal;
    }

	NullLiteral() {
	    return this.getToken(JavaScriptParser.NullLiteral, 0);
	};

	BooleanLiteral() {
	    return this.getToken(JavaScriptParser.BooleanLiteral, 0);
	};

	StringLiteral() {
	    return this.getToken(JavaScriptParser.StringLiteral, 0);
	};

	templateStringLiteral() {
	    return this.getTypedRuleContext(TemplateStringLiteralContext,0);
	};

	RegularExpressionLiteral() {
	    return this.getToken(JavaScriptParser.RegularExpressionLiteral, 0);
	};

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	bigintLiteral() {
	    return this.getTypedRuleContext(BigintLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TemplateStringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_templateStringLiteral;
    }

	BackTick = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.BackTick);
	    } else {
	        return this.getToken(JavaScriptParser.BackTick, i);
	    }
	};


	templateStringAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TemplateStringAtomContext);
	    } else {
	        return this.getTypedRuleContext(TemplateStringAtomContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterTemplateStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitTemplateStringLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitTemplateStringLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TemplateStringAtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_templateStringAtom;
    }

	TemplateStringAtom() {
	    return this.getToken(JavaScriptParser.TemplateStringAtom, 0);
	};

	TemplateStringStartExpression() {
	    return this.getToken(JavaScriptParser.TemplateStringStartExpression, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	TemplateCloseBrace() {
	    return this.getToken(JavaScriptParser.TemplateCloseBrace, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterTemplateStringAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitTemplateStringAtom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitTemplateStringAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumericLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_numericLiteral;
    }

	DecimalLiteral() {
	    return this.getToken(JavaScriptParser.DecimalLiteral, 0);
	};

	HexIntegerLiteral() {
	    return this.getToken(JavaScriptParser.HexIntegerLiteral, 0);
	};

	OctalIntegerLiteral() {
	    return this.getToken(JavaScriptParser.OctalIntegerLiteral, 0);
	};

	OctalIntegerLiteral2() {
	    return this.getToken(JavaScriptParser.OctalIntegerLiteral2, 0);
	};

	BinaryIntegerLiteral() {
	    return this.getToken(JavaScriptParser.BinaryIntegerLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterNumericLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitNumericLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitNumericLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BigintLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_bigintLiteral;
    }

	BigDecimalIntegerLiteral() {
	    return this.getToken(JavaScriptParser.BigDecimalIntegerLiteral, 0);
	};

	BigHexIntegerLiteral() {
	    return this.getToken(JavaScriptParser.BigHexIntegerLiteral, 0);
	};

	BigOctalIntegerLiteral() {
	    return this.getToken(JavaScriptParser.BigOctalIntegerLiteral, 0);
	};

	BigBinaryIntegerLiteral() {
	    return this.getToken(JavaScriptParser.BigBinaryIntegerLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterBigintLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitBigintLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitBigintLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GetterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_getter;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterGetter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitGetter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitGetter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_setter;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterSetter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitSetter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitSetter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_identifierName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	reservedWord() {
	    return this.getTypedRuleContext(ReservedWordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterIdentifierName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitIdentifierName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitIdentifierName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_identifier;
    }

	Identifier() {
	    return this.getToken(JavaScriptParser.Identifier, 0);
	};

	NonStrictLet() {
	    return this.getToken(JavaScriptParser.NonStrictLet, 0);
	};

	Async() {
	    return this.getToken(JavaScriptParser.Async, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReservedWordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_reservedWord;
    }

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	NullLiteral() {
	    return this.getToken(JavaScriptParser.NullLiteral, 0);
	};

	BooleanLiteral() {
	    return this.getToken(JavaScriptParser.BooleanLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterReservedWord(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitReservedWord(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitReservedWord(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_keyword;
    }

	Break() {
	    return this.getToken(JavaScriptParser.Break, 0);
	};

	Do() {
	    return this.getToken(JavaScriptParser.Do, 0);
	};

	Instanceof() {
	    return this.getToken(JavaScriptParser.Instanceof, 0);
	};

	Typeof() {
	    return this.getToken(JavaScriptParser.Typeof, 0);
	};

	Case() {
	    return this.getToken(JavaScriptParser.Case, 0);
	};

	Else() {
	    return this.getToken(JavaScriptParser.Else, 0);
	};

	New() {
	    return this.getToken(JavaScriptParser.New, 0);
	};

	Var() {
	    return this.getToken(JavaScriptParser.Var, 0);
	};

	Catch() {
	    return this.getToken(JavaScriptParser.Catch, 0);
	};

	Finally() {
	    return this.getToken(JavaScriptParser.Finally, 0);
	};

	Return() {
	    return this.getToken(JavaScriptParser.Return, 0);
	};

	Void() {
	    return this.getToken(JavaScriptParser.Void, 0);
	};

	Continue() {
	    return this.getToken(JavaScriptParser.Continue, 0);
	};

	For() {
	    return this.getToken(JavaScriptParser.For, 0);
	};

	Switch() {
	    return this.getToken(JavaScriptParser.Switch, 0);
	};

	While() {
	    return this.getToken(JavaScriptParser.While, 0);
	};

	Debugger() {
	    return this.getToken(JavaScriptParser.Debugger, 0);
	};

	Function_() {
	    return this.getToken(JavaScriptParser.Function_, 0);
	};

	This() {
	    return this.getToken(JavaScriptParser.This, 0);
	};

	With() {
	    return this.getToken(JavaScriptParser.With, 0);
	};

	Default() {
	    return this.getToken(JavaScriptParser.Default, 0);
	};

	If() {
	    return this.getToken(JavaScriptParser.If, 0);
	};

	Throw() {
	    return this.getToken(JavaScriptParser.Throw, 0);
	};

	Delete() {
	    return this.getToken(JavaScriptParser.Delete, 0);
	};

	In() {
	    return this.getToken(JavaScriptParser.In, 0);
	};

	Try() {
	    return this.getToken(JavaScriptParser.Try, 0);
	};

	Class() {
	    return this.getToken(JavaScriptParser.Class, 0);
	};

	Enum() {
	    return this.getToken(JavaScriptParser.Enum, 0);
	};

	Extends() {
	    return this.getToken(JavaScriptParser.Extends, 0);
	};

	Super() {
	    return this.getToken(JavaScriptParser.Super, 0);
	};

	Const() {
	    return this.getToken(JavaScriptParser.Const, 0);
	};

	Export() {
	    return this.getToken(JavaScriptParser.Export, 0);
	};

	Import() {
	    return this.getToken(JavaScriptParser.Import, 0);
	};

	Implements() {
	    return this.getToken(JavaScriptParser.Implements, 0);
	};

	let_() {
	    return this.getTypedRuleContext(Let_Context,0);
	};

	Private() {
	    return this.getToken(JavaScriptParser.Private, 0);
	};

	Public() {
	    return this.getToken(JavaScriptParser.Public, 0);
	};

	Interface() {
	    return this.getToken(JavaScriptParser.Interface, 0);
	};

	Package() {
	    return this.getToken(JavaScriptParser.Package, 0);
	};

	Protected() {
	    return this.getToken(JavaScriptParser.Protected, 0);
	};

	Static() {
	    return this.getToken(JavaScriptParser.Static, 0);
	};

	Yield() {
	    return this.getToken(JavaScriptParser.Yield, 0);
	};

	Async() {
	    return this.getToken(JavaScriptParser.Async, 0);
	};

	Await() {
	    return this.getToken(JavaScriptParser.Await, 0);
	};

	From() {
	    return this.getToken(JavaScriptParser.From, 0);
	};

	As() {
	    return this.getToken(JavaScriptParser.As, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitKeyword(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitKeyword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Let_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_let_;
    }

	NonStrictLet() {
	    return this.getToken(JavaScriptParser.NonStrictLet, 0);
	};

	StrictLet() {
	    return this.getToken(JavaScriptParser.StrictLet, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterLet_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitLet_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitLet_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EosContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_eos;
    }

	SemiColon() {
	    return this.getToken(JavaScriptParser.SemiColon, 0);
	};

	EOF() {
	    return this.getToken(JavaScriptParser.EOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterEos(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitEos(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaScriptParserVisitor ) {
	        return visitor.visitEos(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




JavaScriptParser.ProgramContext = ProgramContext; 
JavaScriptParser.SourceElementContext = SourceElementContext; 
JavaScriptParser.StatementContext = StatementContext; 
JavaScriptParser.BlockContext = BlockContext; 
JavaScriptParser.StatementListContext = StatementListContext; 
JavaScriptParser.ImportStatementContext = ImportStatementContext; 
JavaScriptParser.ImportFromBlockContext = ImportFromBlockContext; 
JavaScriptParser.ModuleItemsContext = ModuleItemsContext; 
JavaScriptParser.ImportDefaultContext = ImportDefaultContext; 
JavaScriptParser.ImportNamespaceContext = ImportNamespaceContext; 
JavaScriptParser.ImportFromContext = ImportFromContext; 
JavaScriptParser.AliasNameContext = AliasNameContext; 
JavaScriptParser.ExportStatementContext = ExportStatementContext; 
JavaScriptParser.ExportFromBlockContext = ExportFromBlockContext; 
JavaScriptParser.DeclarationContext = DeclarationContext; 
JavaScriptParser.VariableStatementContext = VariableStatementContext; 
JavaScriptParser.VariableDeclarationListContext = VariableDeclarationListContext; 
JavaScriptParser.VariableDeclarationContext = VariableDeclarationContext; 
JavaScriptParser.EmptyStatement_Context = EmptyStatement_Context; 
JavaScriptParser.ExpressionStatementContext = ExpressionStatementContext; 
JavaScriptParser.IfStatementContext = IfStatementContext; 
JavaScriptParser.IterationStatementContext = IterationStatementContext; 
JavaScriptParser.VarModifierContext = VarModifierContext; 
JavaScriptParser.ContinueStatementContext = ContinueStatementContext; 
JavaScriptParser.BreakStatementContext = BreakStatementContext; 
JavaScriptParser.ReturnStatementContext = ReturnStatementContext; 
JavaScriptParser.YieldStatementContext = YieldStatementContext; 
JavaScriptParser.WithStatementContext = WithStatementContext; 
JavaScriptParser.SwitchStatementContext = SwitchStatementContext; 
JavaScriptParser.CaseBlockContext = CaseBlockContext; 
JavaScriptParser.CaseClausesContext = CaseClausesContext; 
JavaScriptParser.CaseClauseContext = CaseClauseContext; 
JavaScriptParser.DefaultClauseContext = DefaultClauseContext; 
JavaScriptParser.LabelledStatementContext = LabelledStatementContext; 
JavaScriptParser.ThrowStatementContext = ThrowStatementContext; 
JavaScriptParser.TryStatementContext = TryStatementContext; 
JavaScriptParser.CatchProductionContext = CatchProductionContext; 
JavaScriptParser.FinallyProductionContext = FinallyProductionContext; 
JavaScriptParser.DebuggerStatementContext = DebuggerStatementContext; 
JavaScriptParser.FunctionDeclarationContext = FunctionDeclarationContext; 
JavaScriptParser.ClassDeclarationContext = ClassDeclarationContext; 
JavaScriptParser.ClassTailContext = ClassTailContext; 
JavaScriptParser.ClassElementContext = ClassElementContext; 
JavaScriptParser.MethodDefinitionContext = MethodDefinitionContext; 
JavaScriptParser.FormalParameterListContext = FormalParameterListContext; 
JavaScriptParser.FormalParameterArgContext = FormalParameterArgContext; 
JavaScriptParser.LastFormalParameterArgContext = LastFormalParameterArgContext; 
JavaScriptParser.FunctionBodyContext = FunctionBodyContext; 
JavaScriptParser.SourceElementsContext = SourceElementsContext; 
JavaScriptParser.ArrayLiteralContext = ArrayLiteralContext; 
JavaScriptParser.ElementListContext = ElementListContext; 
JavaScriptParser.ArrayElementContext = ArrayElementContext; 
JavaScriptParser.PropertyAssignmentContext = PropertyAssignmentContext; 
JavaScriptParser.PropertyNameContext = PropertyNameContext; 
JavaScriptParser.ArgumentsContext = ArgumentsContext; 
JavaScriptParser.ArgumentContext = ArgumentContext; 
JavaScriptParser.ExpressionSequenceContext = ExpressionSequenceContext; 
JavaScriptParser.SingleExpressionContext = SingleExpressionContext; 
JavaScriptParser.AssignableContext = AssignableContext; 
JavaScriptParser.ObjectLiteralContext = ObjectLiteralContext; 
JavaScriptParser.AnonymousFunctionContext = AnonymousFunctionContext; 
JavaScriptParser.ArrowFunctionParametersContext = ArrowFunctionParametersContext; 
JavaScriptParser.ArrowFunctionBodyContext = ArrowFunctionBodyContext; 
JavaScriptParser.AssignmentOperatorContext = AssignmentOperatorContext; 
JavaScriptParser.LiteralContext = LiteralContext; 
JavaScriptParser.TemplateStringLiteralContext = TemplateStringLiteralContext; 
JavaScriptParser.TemplateStringAtomContext = TemplateStringAtomContext; 
JavaScriptParser.NumericLiteralContext = NumericLiteralContext; 
JavaScriptParser.BigintLiteralContext = BigintLiteralContext; 
JavaScriptParser.GetterContext = GetterContext; 
JavaScriptParser.SetterContext = SetterContext; 
JavaScriptParser.IdentifierNameContext = IdentifierNameContext; 
JavaScriptParser.IdentifierContext = IdentifierContext; 
JavaScriptParser.ReservedWordContext = ReservedWordContext; 
JavaScriptParser.KeywordContext = KeywordContext; 
JavaScriptParser.Let_Context = Let_Context; 
JavaScriptParser.EosContext = EosContext; 
