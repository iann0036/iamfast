// Generated from grammars/JavaParser.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';
import JavaParserListener from './JavaParserListener.js';
import JavaParserVisitor from './JavaParserVisitor.js';

const serializedATN = [4,1,128,1760,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
1,0,3,0,250,8,0,1,0,5,0,253,8,0,10,0,12,0,256,9,0,1,0,5,0,259,8,0,10,0,12,
0,262,9,0,1,0,1,0,1,0,3,0,267,8,0,1,1,5,1,270,8,1,10,1,12,1,273,9,1,1,1,
1,1,1,1,1,1,1,2,1,2,3,2,281,8,2,1,2,1,2,1,2,3,2,286,8,2,1,2,1,2,1,3,5,3,
291,8,3,10,3,12,3,294,9,3,1,3,1,3,1,3,1,3,1,3,3,3,301,8,3,1,3,3,3,304,8,
3,1,4,1,4,1,4,1,4,1,4,3,4,311,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
5,3,5,323,8,5,1,6,1,6,3,6,327,8,6,1,7,1,7,1,7,3,7,332,8,7,1,7,1,7,3,7,336,
8,7,1,7,1,7,3,7,340,8,7,1,7,1,7,3,7,344,8,7,1,7,1,7,1,8,1,8,1,8,1,8,5,8,
352,8,8,10,8,12,8,355,9,8,1,8,1,8,1,9,5,9,360,8,9,10,9,12,9,363,9,9,1,9,
1,9,1,9,5,9,368,8,9,10,9,12,9,371,9,9,1,9,3,9,374,8,9,1,10,1,10,1,10,5,10,
379,8,10,10,10,12,10,382,9,10,1,11,1,11,1,11,1,11,3,11,388,8,11,1,11,1,11,
3,11,392,8,11,1,11,3,11,395,8,11,1,11,3,11,398,8,11,1,11,1,11,1,12,1,12,
1,12,5,12,405,8,12,10,12,12,12,408,9,12,1,13,5,13,411,8,13,10,13,12,13,414,
9,13,1,13,1,13,3,13,418,8,13,1,13,3,13,421,8,13,1,14,1,14,5,14,425,8,14,
10,14,12,14,428,9,14,1,15,1,15,1,15,3,15,433,8,15,1,15,1,15,3,15,437,8,15,
1,15,1,15,1,16,1,16,5,16,443,8,16,10,16,12,16,446,9,16,1,16,1,16,1,17,1,
17,5,17,452,8,17,10,17,12,17,455,9,17,1,17,1,17,1,18,1,18,3,18,461,8,18,
1,18,1,18,5,18,465,8,18,10,18,12,18,468,9,18,1,18,3,18,471,8,18,1,19,1,19,
1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,483,8,19,1,20,1,20,1,20,1,20,
1,20,5,20,490,8,20,10,20,12,20,493,9,20,1,20,1,20,3,20,497,8,20,1,20,1,20,
1,21,1,21,3,21,503,8,21,1,22,1,22,3,22,507,8,22,1,23,1,23,1,23,1,24,1,24,
1,24,1,25,1,25,1,25,1,25,3,25,519,8,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,
5,27,528,8,27,10,27,12,27,531,9,27,1,27,1,27,3,27,535,8,27,1,28,1,28,1,28,
1,28,1,28,1,28,1,28,1,28,3,28,545,8,28,1,29,1,29,1,29,1,29,5,29,551,8,29,
10,29,12,29,554,9,29,1,29,1,29,1,30,1,30,1,30,5,30,561,8,30,10,30,12,30,
564,9,30,1,30,1,30,1,30,1,31,5,31,570,8,31,10,31,12,31,573,9,31,1,31,1,31,
1,32,1,32,1,32,1,32,1,32,1,32,3,32,583,8,32,1,33,5,33,586,8,33,10,33,12,
33,589,9,33,1,33,1,33,1,33,1,34,5,34,595,8,34,10,34,12,34,598,9,34,1,34,
1,34,1,34,1,34,1,34,5,34,605,8,34,10,34,12,34,608,9,34,1,34,1,34,3,34,612,
8,34,1,34,1,34,1,35,1,35,1,35,5,35,619,8,35,10,35,12,35,622,9,35,1,36,1,
36,1,36,3,36,627,8,36,1,37,1,37,1,37,5,37,632,8,37,10,37,12,37,635,9,37,
1,38,1,38,3,38,639,8,38,1,39,1,39,1,39,1,39,5,39,645,8,39,10,39,12,39,648,
9,39,1,39,3,39,651,8,39,3,39,653,8,39,1,39,1,39,1,40,1,40,3,40,659,8,40,
1,40,1,40,1,40,3,40,664,8,40,5,40,666,8,40,10,40,12,40,669,9,40,1,41,1,41,
5,41,673,8,41,10,41,12,41,676,9,41,1,41,1,41,1,41,3,41,681,8,41,3,41,683,
8,41,1,42,1,42,1,42,5,42,688,8,42,10,42,12,42,691,9,42,1,43,1,43,3,43,695,
8,43,1,43,1,43,1,43,3,43,700,8,43,1,43,3,43,703,8,43,3,43,705,8,43,1,43,
1,43,1,44,1,44,1,44,1,44,5,44,713,8,44,10,44,12,44,716,9,44,1,44,1,44,1,
45,1,45,1,45,5,45,723,8,45,10,45,12,45,726,9,45,1,45,1,45,3,45,730,8,45,
1,45,3,45,733,8,45,1,46,5,46,736,8,46,10,46,12,46,739,9,46,1,46,1,46,1,46,
1,47,5,47,745,8,47,10,47,12,47,748,9,47,1,47,1,47,5,47,752,8,47,10,47,12,
47,755,9,47,1,47,1,47,1,47,1,48,1,48,1,48,5,48,763,8,48,10,48,12,48,766,
9,48,1,49,5,49,769,8,49,10,49,12,49,772,9,49,1,49,1,49,1,49,1,50,1,50,1,
50,5,50,780,8,50,10,50,12,50,783,9,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
3,51,792,8,51,1,52,1,52,1,53,1,53,1,54,1,54,1,54,5,54,801,8,54,10,54,12,
54,804,9,54,1,54,1,54,1,54,1,55,1,55,1,55,3,55,812,8,55,1,55,1,55,1,55,3,
55,817,8,55,1,55,3,55,820,8,55,1,56,1,56,1,56,5,56,825,8,56,10,56,12,56,
828,9,56,1,57,1,57,1,57,1,57,1,58,1,58,1,58,3,58,837,8,58,1,59,1,59,1,59,
1,59,5,59,843,8,59,10,59,12,59,846,9,59,3,59,848,8,59,1,59,3,59,851,8,59,
1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,61,1,61,5,61,862,8,61,10,61,12,61,865,
9,61,1,61,1,61,1,62,5,62,870,8,62,10,62,12,62,873,9,62,1,62,1,62,3,62,877,
8,62,1,63,1,63,1,63,1,63,1,63,1,63,3,63,885,8,63,1,63,1,63,3,63,889,8,63,
1,63,1,63,3,63,893,8,63,1,63,1,63,3,63,897,8,63,1,63,1,63,3,63,901,8,63,
3,63,903,8,63,1,64,1,64,3,64,907,8,64,1,65,1,65,1,65,1,65,3,65,913,8,65,
1,66,1,66,1,67,1,67,1,67,1,68,3,68,921,8,68,1,68,1,68,1,68,1,68,1,69,1,69,
5,69,929,8,69,10,69,12,69,932,9,69,1,69,1,69,1,70,1,70,5,70,938,8,70,10,
70,12,70,941,9,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,950,8,70,1,70,
1,70,1,70,1,70,1,70,1,70,3,70,958,8,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
1,70,1,70,1,70,1,70,1,70,3,70,972,8,70,1,71,1,71,1,72,1,72,1,72,3,72,979,
8,72,1,72,1,72,1,72,3,72,984,8,72,1,72,1,72,1,73,1,73,3,73,990,8,73,1,73,
1,73,1,74,1,74,1,74,5,74,997,8,74,10,74,12,74,1000,9,74,1,75,1,75,1,75,1,
76,1,76,5,76,1007,8,76,10,76,12,76,1010,9,76,1,76,1,76,1,77,1,77,5,77,1016,
8,77,10,77,12,77,1019,9,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,3,78,1028,
8,78,1,79,5,79,1031,8,79,10,79,12,79,1034,9,79,1,79,1,79,1,79,1,79,1,79,
1,79,1,79,1,79,3,79,1044,8,79,1,80,1,80,1,81,5,81,1049,8,81,10,81,12,81,
1052,9,81,1,81,1,81,1,81,3,81,1057,8,81,1,81,3,81,1060,8,81,1,82,1,82,1,
82,1,82,1,82,3,82,1067,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1076,
8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,
82,1,82,1,82,1,82,1,82,1,82,4,82,1097,8,82,11,82,12,82,1098,1,82,3,82,1102,
8,82,1,82,3,82,1105,8,82,1,82,1,82,1,82,1,82,5,82,1111,8,82,10,82,12,82,
1114,9,82,1,82,3,82,1117,8,82,1,82,1,82,1,82,1,82,5,82,1123,8,82,10,82,12,
82,1126,9,82,1,82,5,82,1129,8,82,10,82,12,82,1132,9,82,1,82,1,82,1,82,1,
82,1,82,1,82,1,82,1,82,3,82,1142,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
3,82,1151,8,82,1,82,1,82,1,82,3,82,1156,8,82,1,82,1,82,1,82,1,82,1,82,1,
82,1,82,1,82,1,82,1,82,1,82,3,82,1169,8,82,1,82,1,82,1,82,1,82,3,82,1175,
8,82,1,83,1,83,1,83,5,83,1180,8,83,10,83,12,83,1183,9,83,1,83,1,83,1,83,
1,83,1,83,1,84,1,84,1,84,5,84,1193,8,84,10,84,12,84,1196,9,84,1,85,1,85,
1,85,1,86,1,86,1,86,3,86,1204,8,86,1,86,1,86,1,87,1,87,1,87,5,87,1211,8,
87,10,87,12,87,1214,9,87,1,88,5,88,1217,8,88,10,88,12,88,1220,9,88,1,88,
1,88,1,88,1,88,1,88,3,88,1227,8,88,1,88,1,88,1,88,1,88,3,88,1233,8,88,1,
89,4,89,1236,8,89,11,89,12,89,1237,1,89,4,89,1241,8,89,11,89,12,89,1242,
1,90,1,90,1,90,1,90,1,90,1,90,3,90,1251,8,90,1,90,1,90,1,90,3,90,1256,8,
90,1,91,1,91,3,91,1260,8,91,1,91,1,91,3,91,1264,8,91,1,91,1,91,3,91,1268,
8,91,3,91,1270,8,91,1,92,1,92,3,92,1274,8,92,1,93,5,93,1277,8,93,10,93,12,
93,1280,9,93,1,93,1,93,3,93,1284,8,93,1,93,1,93,1,93,1,93,1,94,1,94,1,94,
1,94,1,95,1,95,1,95,5,95,1297,8,95,10,95,12,95,1300,9,95,1,96,1,96,1,96,
3,96,1305,8,96,1,96,1,96,1,96,1,96,1,96,3,96,1312,8,96,1,96,1,96,1,96,1,
96,3,96,1318,8,96,1,96,3,96,1321,8,96,1,97,1,97,1,97,1,97,1,97,1,97,1,97,
5,97,1330,8,97,10,97,12,97,1333,9,97,1,97,1,97,1,97,5,97,1338,8,97,10,97,
12,97,1341,9,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,
97,3,97,1355,8,97,1,97,1,97,3,97,1359,8,97,1,97,1,97,1,97,3,97,1364,8,97,
1,97,1,97,3,97,1368,8,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,
97,1,97,1,97,1,97,1,97,3,97,1384,8,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,
1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,
97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,
1,97,1,97,3,97,1424,8,97,1,97,1,97,1,97,1,97,3,97,1430,8,97,1,97,1,97,1,
97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,3,97,1443,8,97,1,97,1,97,1,97,
3,97,1448,8,97,1,97,5,97,1451,8,97,10,97,12,97,1454,9,97,1,98,5,98,1457,
8,98,10,98,12,98,1460,9,98,1,98,1,98,5,98,1464,8,98,10,98,12,98,1467,9,98,
1,98,1,98,1,99,1,99,1,99,1,99,1,100,1,100,1,100,3,100,1478,8,100,1,100,1,
100,1,100,1,100,1,100,5,100,1485,8,100,10,100,12,100,1488,9,100,1,100,1,
100,1,100,1,100,3,100,1494,8,100,1,100,3,100,1497,8,100,1,101,1,101,3,101,
1501,8,101,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,
102,1,102,1,102,1,102,1,102,1,102,3,102,1519,8,102,3,102,1521,8,102,1,103,
1,103,1,103,1,103,5,103,1527,8,103,10,103,12,103,1530,9,103,1,103,1,103,
1,104,1,104,1,104,1,104,3,104,1538,8,104,1,104,1,104,1,104,1,104,1,104,3,
104,1545,8,104,1,105,1,105,1,105,1,105,1,105,1,105,5,105,1553,8,105,10,105,
12,105,1556,9,105,1,105,1,105,5,105,1560,8,105,10,105,12,105,1563,9,105,
1,105,1,105,1,105,5,105,1568,8,105,10,105,12,105,1571,9,105,3,105,1573,8,
105,1,105,1,105,1,105,5,105,1578,8,105,10,105,12,105,1581,9,105,1,106,1,
106,5,106,1585,8,106,10,106,12,106,1588,9,106,3,106,1590,8,106,1,107,1,107,
1,107,3,107,1595,8,107,1,107,5,107,1598,8,107,10,107,12,107,1601,9,107,1,
107,1,107,3,107,1605,8,107,1,108,1,108,1,108,1,108,1,108,1,108,1,108,3,108,
1614,8,108,3,108,1616,8,108,1,109,1,109,3,109,1620,8,109,1,109,1,109,1,109,
3,109,1625,8,109,5,109,1627,8,109,10,109,12,109,1630,9,109,1,109,3,109,1633,
8,109,1,110,1,110,3,110,1637,8,110,1,110,1,110,1,111,1,111,1,111,1,111,5,
111,1645,8,111,10,111,12,111,1648,9,111,1,111,1,111,1,111,1,111,1,111,1,
111,1,111,5,111,1657,8,111,10,111,12,111,1660,9,111,1,111,1,111,5,111,1664,
8,111,10,111,12,111,1667,9,111,3,111,1669,8,111,1,112,1,112,3,112,1673,8,
112,1,113,1,113,1,113,1,114,1,114,1,114,3,114,1681,8,114,1,115,1,115,1,115,
3,115,1686,8,115,1,116,1,116,1,116,1,116,1,117,1,117,1,117,5,117,1695,8,
117,10,117,12,117,1698,9,117,1,118,5,118,1701,8,118,10,118,12,118,1704,9,
118,1,118,1,118,3,118,1708,8,118,1,118,5,118,1711,8,118,10,118,12,118,1714,
9,118,1,118,1,118,5,118,1718,8,118,10,118,12,118,1721,9,118,1,119,1,119,
1,120,1,120,1,120,1,120,5,120,1729,8,120,10,120,12,120,1732,9,120,1,120,
1,120,1,121,1,121,1,121,3,121,1739,8,121,1,121,1,121,3,121,1743,8,121,3,
121,1745,8,121,1,122,1,122,1,122,1,122,1,122,3,122,1752,8,122,1,123,1,123,
3,123,1756,8,123,1,123,1,123,1,123,0,2,194,210,124,0,2,4,6,8,10,12,14,16,
18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,
220,222,224,226,228,230,232,234,236,238,240,242,244,246,0,15,2,0,17,17,40,
40,1,0,67,70,1,0,71,72,2,0,38,38,60,60,2,0,51,65,128,128,1,0,100,103,1,0,
90,91,2,0,104,105,109,109,1,0,102,103,2,0,88,89,95,96,2,0,94,94,97,97,2,
0,87,87,110,120,1,0,100,101,2,0,93,93,121,121,8,0,3,3,5,5,8,8,14,14,20,20,
27,27,29,29,37,37,1959,0,266,1,0,0,0,2,271,1,0,0,0,4,278,1,0,0,0,6,303,1,
0,0,0,8,310,1,0,0,0,10,322,1,0,0,0,12,326,1,0,0,0,14,328,1,0,0,0,16,347,
1,0,0,0,18,361,1,0,0,0,20,375,1,0,0,0,22,383,1,0,0,0,24,401,1,0,0,0,26,412,
1,0,0,0,28,422,1,0,0,0,30,429,1,0,0,0,32,440,1,0,0,0,34,449,1,0,0,0,36,470,
1,0,0,0,38,482,1,0,0,0,40,484,1,0,0,0,42,502,1,0,0,0,44,506,1,0,0,0,46,508,
1,0,0,0,48,511,1,0,0,0,50,514,1,0,0,0,52,522,1,0,0,0,54,534,1,0,0,0,56,544,
1,0,0,0,58,546,1,0,0,0,60,557,1,0,0,0,62,571,1,0,0,0,64,582,1,0,0,0,66,587,
1,0,0,0,68,596,1,0,0,0,70,615,1,0,0,0,72,623,1,0,0,0,74,628,1,0,0,0,76,638,
1,0,0,0,78,640,1,0,0,0,80,656,1,0,0,0,82,682,1,0,0,0,84,684,1,0,0,0,86,692,
1,0,0,0,88,708,1,0,0,0,90,732,1,0,0,0,92,737,1,0,0,0,94,746,1,0,0,0,96,759,
1,0,0,0,98,770,1,0,0,0,100,776,1,0,0,0,102,791,1,0,0,0,104,793,1,0,0,0,106,
795,1,0,0,0,108,802,1,0,0,0,110,811,1,0,0,0,112,821,1,0,0,0,114,829,1,0,
0,0,116,836,1,0,0,0,118,838,1,0,0,0,120,854,1,0,0,0,122,859,1,0,0,0,124,
876,1,0,0,0,126,902,1,0,0,0,128,906,1,0,0,0,130,908,1,0,0,0,132,914,1,0,
0,0,134,916,1,0,0,0,136,920,1,0,0,0,138,926,1,0,0,0,140,971,1,0,0,0,142,
973,1,0,0,0,144,975,1,0,0,0,146,987,1,0,0,0,148,993,1,0,0,0,150,1001,1,0,
0,0,152,1004,1,0,0,0,154,1013,1,0,0,0,156,1027,1,0,0,0,158,1032,1,0,0,0,
160,1045,1,0,0,0,162,1059,1,0,0,0,164,1174,1,0,0,0,166,1176,1,0,0,0,168,
1189,1,0,0,0,170,1197,1,0,0,0,172,1200,1,0,0,0,174,1207,1,0,0,0,176,1232,
1,0,0,0,178,1235,1,0,0,0,180,1255,1,0,0,0,182,1269,1,0,0,0,184,1273,1,0,
0,0,186,1278,1,0,0,0,188,1289,1,0,0,0,190,1293,1,0,0,0,192,1320,1,0,0,0,
194,1367,1,0,0,0,196,1458,1,0,0,0,198,1470,1,0,0,0,200,1496,1,0,0,0,202,
1500,1,0,0,0,204,1520,1,0,0,0,206,1522,1,0,0,0,208,1544,1,0,0,0,210,1572,
1,0,0,0,212,1589,1,0,0,0,214,1594,1,0,0,0,216,1615,1,0,0,0,218,1632,1,0,
0,0,220,1634,1,0,0,0,222,1640,1,0,0,0,224,1670,1,0,0,0,226,1674,1,0,0,0,
228,1680,1,0,0,0,230,1685,1,0,0,0,232,1687,1,0,0,0,234,1691,1,0,0,0,236,
1702,1,0,0,0,238,1722,1,0,0,0,240,1724,1,0,0,0,242,1744,1,0,0,0,244,1751,
1,0,0,0,246,1753,1,0,0,0,248,250,3,2,1,0,249,248,1,0,0,0,249,250,1,0,0,0,
250,254,1,0,0,0,251,253,3,4,2,0,252,251,1,0,0,0,253,256,1,0,0,0,254,252,
1,0,0,0,254,255,1,0,0,0,255,260,1,0,0,0,256,254,1,0,0,0,257,259,3,6,3,0,
258,257,1,0,0,0,259,262,1,0,0,0,260,258,1,0,0,0,260,261,1,0,0,0,261,267,
1,0,0,0,262,260,1,0,0,0,263,264,3,136,68,0,264,265,5,0,0,1,265,267,1,0,0,
0,266,249,1,0,0,0,266,263,1,0,0,0,267,1,1,0,0,0,268,270,3,110,55,0,269,268,
1,0,0,0,270,273,1,0,0,0,271,269,1,0,0,0,271,272,1,0,0,0,272,274,1,0,0,0,
273,271,1,0,0,0,274,275,5,32,0,0,275,276,3,100,50,0,276,277,5,84,0,0,277,
3,1,0,0,0,278,280,5,25,0,0,279,281,5,38,0,0,280,279,1,0,0,0,280,281,1,0,
0,0,281,282,1,0,0,0,282,285,3,100,50,0,283,284,5,86,0,0,284,286,5,104,0,
0,285,283,1,0,0,0,285,286,1,0,0,0,286,287,1,0,0,0,287,288,5,84,0,0,288,5,
1,0,0,0,289,291,3,10,5,0,290,289,1,0,0,0,291,294,1,0,0,0,292,290,1,0,0,0,
292,293,1,0,0,0,293,300,1,0,0,0,294,292,1,0,0,0,295,301,3,14,7,0,296,301,
3,22,11,0,297,301,3,30,15,0,298,301,3,120,60,0,299,301,3,144,72,0,300,295,
1,0,0,0,300,296,1,0,0,0,300,297,1,0,0,0,300,298,1,0,0,0,300,299,1,0,0,0,
301,304,1,0,0,0,302,304,5,84,0,0,303,292,1,0,0,0,303,302,1,0,0,0,304,7,1,
0,0,0,305,311,3,10,5,0,306,311,5,30,0,0,307,311,5,42,0,0,308,311,5,46,0,
0,309,311,5,49,0,0,310,305,1,0,0,0,310,306,1,0,0,0,310,307,1,0,0,0,310,308,
1,0,0,0,310,309,1,0,0,0,311,9,1,0,0,0,312,323,3,110,55,0,313,323,5,35,0,
0,314,323,5,34,0,0,315,323,5,33,0,0,316,323,5,38,0,0,317,323,5,1,0,0,318,
323,5,18,0,0,319,323,5,39,0,0,320,323,5,64,0,0,321,323,5,66,0,0,322,312,
1,0,0,0,322,313,1,0,0,0,322,314,1,0,0,0,322,315,1,0,0,0,322,316,1,0,0,0,
322,317,1,0,0,0,322,318,1,0,0,0,322,319,1,0,0,0,322,320,1,0,0,0,322,321,
1,0,0,0,323,11,1,0,0,0,324,327,5,18,0,0,325,327,3,110,55,0,326,324,1,0,0,
0,326,325,1,0,0,0,327,13,1,0,0,0,328,329,5,9,0,0,329,331,3,160,80,0,330,
332,3,16,8,0,331,330,1,0,0,0,331,332,1,0,0,0,332,335,1,0,0,0,333,334,5,17,
0,0,334,336,3,236,118,0,335,333,1,0,0,0,335,336,1,0,0,0,336,339,1,0,0,0,
337,338,5,24,0,0,338,340,3,234,117,0,339,337,1,0,0,0,339,340,1,0,0,0,340,
343,1,0,0,0,341,342,5,65,0,0,342,344,3,234,117,0,343,341,1,0,0,0,343,344,
1,0,0,0,344,345,1,0,0,0,345,346,3,32,16,0,346,15,1,0,0,0,347,348,5,89,0,
0,348,353,3,18,9,0,349,350,5,85,0,0,350,352,3,18,9,0,351,349,1,0,0,0,352,
355,1,0,0,0,353,351,1,0,0,0,353,354,1,0,0,0,354,356,1,0,0,0,355,353,1,0,
0,0,356,357,5,88,0,0,357,17,1,0,0,0,358,360,3,110,55,0,359,358,1,0,0,0,360,
363,1,0,0,0,361,359,1,0,0,0,361,362,1,0,0,0,362,364,1,0,0,0,363,361,1,0,
0,0,364,373,3,160,80,0,365,369,5,17,0,0,366,368,3,110,55,0,367,366,1,0,0,
0,368,371,1,0,0,0,369,367,1,0,0,0,369,370,1,0,0,0,370,372,1,0,0,0,371,369,
1,0,0,0,372,374,3,20,10,0,373,365,1,0,0,0,373,374,1,0,0,0,374,19,1,0,0,0,
375,380,3,236,118,0,376,377,5,106,0,0,377,379,3,236,118,0,378,376,1,0,0,
0,379,382,1,0,0,0,380,378,1,0,0,0,380,381,1,0,0,0,381,21,1,0,0,0,382,380,
1,0,0,0,383,384,5,16,0,0,384,387,3,160,80,0,385,386,5,24,0,0,386,388,3,234,
117,0,387,385,1,0,0,0,387,388,1,0,0,0,388,389,1,0,0,0,389,391,5,80,0,0,390,
392,3,24,12,0,391,390,1,0,0,0,391,392,1,0,0,0,392,394,1,0,0,0,393,395,5,
85,0,0,394,393,1,0,0,0,394,395,1,0,0,0,395,397,1,0,0,0,396,398,3,28,14,0,
397,396,1,0,0,0,397,398,1,0,0,0,398,399,1,0,0,0,399,400,5,81,0,0,400,23,
1,0,0,0,401,406,3,26,13,0,402,403,5,85,0,0,403,405,3,26,13,0,404,402,1,0,
0,0,405,408,1,0,0,0,406,404,1,0,0,0,406,407,1,0,0,0,407,25,1,0,0,0,408,406,
1,0,0,0,409,411,3,110,55,0,410,409,1,0,0,0,411,414,1,0,0,0,412,410,1,0,0,
0,412,413,1,0,0,0,413,415,1,0,0,0,414,412,1,0,0,0,415,417,3,160,80,0,416,
418,3,246,123,0,417,416,1,0,0,0,417,418,1,0,0,0,418,420,1,0,0,0,419,421,
3,32,16,0,420,419,1,0,0,0,420,421,1,0,0,0,421,27,1,0,0,0,422,426,5,84,0,
0,423,425,3,36,18,0,424,423,1,0,0,0,425,428,1,0,0,0,426,424,1,0,0,0,426,
427,1,0,0,0,427,29,1,0,0,0,428,426,1,0,0,0,429,430,5,28,0,0,430,432,3,160,
80,0,431,433,3,16,8,0,432,431,1,0,0,0,432,433,1,0,0,0,433,436,1,0,0,0,434,
435,5,17,0,0,435,437,3,234,117,0,436,434,1,0,0,0,436,437,1,0,0,0,437,438,
1,0,0,0,438,439,3,34,17,0,439,31,1,0,0,0,440,444,5,80,0,0,441,443,3,36,18,
0,442,441,1,0,0,0,443,446,1,0,0,0,444,442,1,0,0,0,444,445,1,0,0,0,445,447,
1,0,0,0,446,444,1,0,0,0,447,448,5,81,0,0,448,33,1,0,0,0,449,453,5,80,0,0,
450,452,3,54,27,0,451,450,1,0,0,0,452,455,1,0,0,0,453,451,1,0,0,0,453,454,
1,0,0,0,454,456,1,0,0,0,455,453,1,0,0,0,456,457,5,81,0,0,457,35,1,0,0,0,
458,471,5,84,0,0,459,461,5,38,0,0,460,459,1,0,0,0,460,461,1,0,0,0,461,462,
1,0,0,0,462,471,3,154,77,0,463,465,3,8,4,0,464,463,1,0,0,0,465,468,1,0,0,
0,466,464,1,0,0,0,466,467,1,0,0,0,467,469,1,0,0,0,468,466,1,0,0,0,469,471,
3,38,19,0,470,458,1,0,0,0,470,460,1,0,0,0,470,466,1,0,0,0,471,37,1,0,0,0,
472,483,3,40,20,0,473,483,3,46,23,0,474,483,3,52,26,0,475,483,3,50,25,0,
476,483,3,48,24,0,477,483,3,30,15,0,478,483,3,120,60,0,479,483,3,14,7,0,
480,483,3,22,11,0,481,483,3,144,72,0,482,472,1,0,0,0,482,473,1,0,0,0,482,
474,1,0,0,0,482,475,1,0,0,0,482,476,1,0,0,0,482,477,1,0,0,0,482,478,1,0,
0,0,482,479,1,0,0,0,482,480,1,0,0,0,482,481,1,0,0,0,483,39,1,0,0,0,484,485,
3,44,22,0,485,486,3,160,80,0,486,491,3,86,43,0,487,488,5,82,0,0,488,490,
5,83,0,0,489,487,1,0,0,0,490,493,1,0,0,0,491,489,1,0,0,0,491,492,1,0,0,0,
492,496,1,0,0,0,493,491,1,0,0,0,494,495,5,45,0,0,495,497,3,84,42,0,496,494,
1,0,0,0,496,497,1,0,0,0,497,498,1,0,0,0,498,499,3,42,21,0,499,41,1,0,0,0,
500,503,3,154,77,0,501,503,5,84,0,0,502,500,1,0,0,0,502,501,1,0,0,0,503,
43,1,0,0,0,504,507,3,236,118,0,505,507,5,48,0,0,506,504,1,0,0,0,506,505,
1,0,0,0,507,45,1,0,0,0,508,509,3,16,8,0,509,510,3,40,20,0,510,47,1,0,0,0,
511,512,3,16,8,0,512,513,3,50,25,0,513,49,1,0,0,0,514,515,3,160,80,0,515,
518,3,86,43,0,516,517,5,45,0,0,517,519,3,84,42,0,518,516,1,0,0,0,518,519,
1,0,0,0,519,520,1,0,0,0,520,521,3,154,77,0,521,51,1,0,0,0,522,523,3,236,
118,0,523,524,3,70,35,0,524,525,5,84,0,0,525,53,1,0,0,0,526,528,3,8,4,0,
527,526,1,0,0,0,528,531,1,0,0,0,529,527,1,0,0,0,529,530,1,0,0,0,530,532,
1,0,0,0,531,529,1,0,0,0,532,535,3,56,28,0,533,535,5,84,0,0,534,529,1,0,0,
0,534,533,1,0,0,0,535,55,1,0,0,0,536,545,3,58,29,0,537,545,3,62,31,0,538,
545,3,66,33,0,539,545,3,30,15,0,540,545,3,120,60,0,541,545,3,14,7,0,542,
545,3,22,11,0,543,545,3,144,72,0,544,536,1,0,0,0,544,537,1,0,0,0,544,538,
1,0,0,0,544,539,1,0,0,0,544,540,1,0,0,0,544,541,1,0,0,0,544,542,1,0,0,0,
544,543,1,0,0,0,545,57,1,0,0,0,546,547,3,236,118,0,547,552,3,60,30,0,548,
549,5,85,0,0,549,551,3,60,30,0,550,548,1,0,0,0,551,554,1,0,0,0,552,550,1,
0,0,0,552,553,1,0,0,0,553,555,1,0,0,0,554,552,1,0,0,0,555,556,5,84,0,0,556,
59,1,0,0,0,557,562,3,160,80,0,558,559,5,82,0,0,559,561,5,83,0,0,560,558,
1,0,0,0,561,564,1,0,0,0,562,560,1,0,0,0,562,563,1,0,0,0,563,565,1,0,0,0,
564,562,1,0,0,0,565,566,5,87,0,0,566,567,3,76,38,0,567,61,1,0,0,0,568,570,
3,64,32,0,569,568,1,0,0,0,570,573,1,0,0,0,571,569,1,0,0,0,571,572,1,0,0,
0,572,574,1,0,0,0,573,571,1,0,0,0,574,575,3,68,34,0,575,63,1,0,0,0,576,583,
3,110,55,0,577,583,5,35,0,0,578,583,5,1,0,0,579,583,5,12,0,0,580,583,5,38,
0,0,581,583,5,39,0,0,582,576,1,0,0,0,582,577,1,0,0,0,582,578,1,0,0,0,582,
579,1,0,0,0,582,580,1,0,0,0,582,581,1,0,0,0,583,65,1,0,0,0,584,586,3,64,
32,0,585,584,1,0,0,0,586,589,1,0,0,0,587,585,1,0,0,0,587,588,1,0,0,0,588,
590,1,0,0,0,589,587,1,0,0,0,590,591,3,16,8,0,591,592,3,68,34,0,592,67,1,
0,0,0,593,595,3,110,55,0,594,593,1,0,0,0,595,598,1,0,0,0,596,594,1,0,0,0,
596,597,1,0,0,0,597,599,1,0,0,0,598,596,1,0,0,0,599,600,3,44,22,0,600,601,
3,160,80,0,601,606,3,86,43,0,602,603,5,82,0,0,603,605,5,83,0,0,604,602,1,
0,0,0,605,608,1,0,0,0,606,604,1,0,0,0,606,607,1,0,0,0,607,611,1,0,0,0,608,
606,1,0,0,0,609,610,5,45,0,0,610,612,3,84,42,0,611,609,1,0,0,0,611,612,1,
0,0,0,612,613,1,0,0,0,613,614,3,42,21,0,614,69,1,0,0,0,615,620,3,72,36,0,
616,617,5,85,0,0,617,619,3,72,36,0,618,616,1,0,0,0,619,622,1,0,0,0,620,618,
1,0,0,0,620,621,1,0,0,0,621,71,1,0,0,0,622,620,1,0,0,0,623,626,3,74,37,0,
624,625,5,87,0,0,625,627,3,76,38,0,626,624,1,0,0,0,626,627,1,0,0,0,627,73,
1,0,0,0,628,633,3,160,80,0,629,630,5,82,0,0,630,632,5,83,0,0,631,629,1,0,
0,0,632,635,1,0,0,0,633,631,1,0,0,0,633,634,1,0,0,0,634,75,1,0,0,0,635,633,
1,0,0,0,636,639,3,78,39,0,637,639,3,194,97,0,638,636,1,0,0,0,638,637,1,0,
0,0,639,77,1,0,0,0,640,652,5,80,0,0,641,646,3,76,38,0,642,643,5,85,0,0,643,
645,3,76,38,0,644,642,1,0,0,0,645,648,1,0,0,0,646,644,1,0,0,0,646,647,1,
0,0,0,647,650,1,0,0,0,648,646,1,0,0,0,649,651,5,85,0,0,650,649,1,0,0,0,650,
651,1,0,0,0,651,653,1,0,0,0,652,641,1,0,0,0,652,653,1,0,0,0,653,654,1,0,
0,0,654,655,5,81,0,0,655,79,1,0,0,0,656,658,3,160,80,0,657,659,3,240,120,
0,658,657,1,0,0,0,658,659,1,0,0,0,659,667,1,0,0,0,660,661,5,86,0,0,661,663,
3,160,80,0,662,664,3,240,120,0,663,662,1,0,0,0,663,664,1,0,0,0,664,666,1,
0,0,0,665,660,1,0,0,0,666,669,1,0,0,0,667,665,1,0,0,0,667,668,1,0,0,0,668,
81,1,0,0,0,669,667,1,0,0,0,670,683,3,236,118,0,671,673,3,110,55,0,672,671,
1,0,0,0,673,676,1,0,0,0,674,672,1,0,0,0,674,675,1,0,0,0,675,677,1,0,0,0,
676,674,1,0,0,0,677,680,5,92,0,0,678,679,7,0,0,0,679,681,3,236,118,0,680,
678,1,0,0,0,680,681,1,0,0,0,681,683,1,0,0,0,682,670,1,0,0,0,682,674,1,0,
0,0,683,83,1,0,0,0,684,689,3,100,50,0,685,686,5,85,0,0,686,688,3,100,50,
0,687,685,1,0,0,0,688,691,1,0,0,0,689,687,1,0,0,0,689,690,1,0,0,0,690,85,
1,0,0,0,691,689,1,0,0,0,692,704,5,78,0,0,693,695,3,88,44,0,694,693,1,0,0,
0,694,695,1,0,0,0,695,705,1,0,0,0,696,699,3,88,44,0,697,698,5,85,0,0,698,
700,3,90,45,0,699,697,1,0,0,0,699,700,1,0,0,0,700,705,1,0,0,0,701,703,3,
90,45,0,702,701,1,0,0,0,702,703,1,0,0,0,703,705,1,0,0,0,704,694,1,0,0,0,
704,696,1,0,0,0,704,702,1,0,0,0,705,706,1,0,0,0,706,707,5,79,0,0,707,87,
1,0,0,0,708,714,3,236,118,0,709,710,3,160,80,0,710,711,5,86,0,0,711,713,
1,0,0,0,712,709,1,0,0,0,713,716,1,0,0,0,714,712,1,0,0,0,714,715,1,0,0,0,
715,717,1,0,0,0,716,714,1,0,0,0,717,718,5,43,0,0,718,89,1,0,0,0,719,724,
3,92,46,0,720,721,5,85,0,0,721,723,3,92,46,0,722,720,1,0,0,0,723,726,1,0,
0,0,724,722,1,0,0,0,724,725,1,0,0,0,725,729,1,0,0,0,726,724,1,0,0,0,727,
728,5,85,0,0,728,730,3,94,47,0,729,727,1,0,0,0,729,730,1,0,0,0,730,733,1,
0,0,0,731,733,3,94,47,0,732,719,1,0,0,0,732,731,1,0,0,0,733,91,1,0,0,0,734,
736,3,12,6,0,735,734,1,0,0,0,736,739,1,0,0,0,737,735,1,0,0,0,737,738,1,0,
0,0,738,740,1,0,0,0,739,737,1,0,0,0,740,741,3,236,118,0,741,742,3,74,37,
0,742,93,1,0,0,0,743,745,3,12,6,0,744,743,1,0,0,0,745,748,1,0,0,0,746,744,
1,0,0,0,746,747,1,0,0,0,747,749,1,0,0,0,748,746,1,0,0,0,749,753,3,236,118,
0,750,752,3,110,55,0,751,750,1,0,0,0,752,755,1,0,0,0,753,751,1,0,0,0,753,
754,1,0,0,0,754,756,1,0,0,0,755,753,1,0,0,0,756,757,5,124,0,0,757,758,3,
74,37,0,758,95,1,0,0,0,759,764,3,98,49,0,760,761,5,85,0,0,761,763,3,98,49,
0,762,760,1,0,0,0,763,766,1,0,0,0,764,762,1,0,0,0,764,765,1,0,0,0,765,97,
1,0,0,0,766,764,1,0,0,0,767,769,3,12,6,0,768,767,1,0,0,0,769,772,1,0,0,0,
770,768,1,0,0,0,770,771,1,0,0,0,771,773,1,0,0,0,772,770,1,0,0,0,773,774,
5,61,0,0,774,775,3,160,80,0,775,99,1,0,0,0,776,781,3,160,80,0,777,778,5,
86,0,0,778,780,3,160,80,0,779,777,1,0,0,0,780,783,1,0,0,0,781,779,1,0,0,
0,781,782,1,0,0,0,782,101,1,0,0,0,783,781,1,0,0,0,784,792,3,104,52,0,785,
792,3,106,53,0,786,792,5,74,0,0,787,792,5,75,0,0,788,792,5,73,0,0,789,792,
5,77,0,0,790,792,5,76,0,0,791,784,1,0,0,0,791,785,1,0,0,0,791,786,1,0,0,
0,791,787,1,0,0,0,791,788,1,0,0,0,791,789,1,0,0,0,791,790,1,0,0,0,792,103,
1,0,0,0,793,794,7,1,0,0,794,105,1,0,0,0,795,796,7,2,0,0,796,107,1,0,0,0,
797,798,3,160,80,0,798,799,5,86,0,0,799,801,1,0,0,0,800,797,1,0,0,0,801,
804,1,0,0,0,802,800,1,0,0,0,802,803,1,0,0,0,803,805,1,0,0,0,804,802,1,0,
0,0,805,806,5,123,0,0,806,807,3,160,80,0,807,109,1,0,0,0,808,809,5,123,0,
0,809,812,3,100,50,0,810,812,3,108,54,0,811,808,1,0,0,0,811,810,1,0,0,0,
812,819,1,0,0,0,813,816,5,78,0,0,814,817,3,112,56,0,815,817,3,116,58,0,816,
814,1,0,0,0,816,815,1,0,0,0,816,817,1,0,0,0,817,818,1,0,0,0,818,820,5,79,
0,0,819,813,1,0,0,0,819,820,1,0,0,0,820,111,1,0,0,0,821,826,3,114,57,0,822,
823,5,85,0,0,823,825,3,114,57,0,824,822,1,0,0,0,825,828,1,0,0,0,826,824,
1,0,0,0,826,827,1,0,0,0,827,113,1,0,0,0,828,826,1,0,0,0,829,830,3,160,80,
0,830,831,5,87,0,0,831,832,3,116,58,0,832,115,1,0,0,0,833,837,3,194,97,0,
834,837,3,110,55,0,835,837,3,118,59,0,836,833,1,0,0,0,836,834,1,0,0,0,836,
835,1,0,0,0,837,117,1,0,0,0,838,847,5,80,0,0,839,844,3,116,58,0,840,841,
5,85,0,0,841,843,3,116,58,0,842,840,1,0,0,0,843,846,1,0,0,0,844,842,1,0,
0,0,844,845,1,0,0,0,845,848,1,0,0,0,846,844,1,0,0,0,847,839,1,0,0,0,847,
848,1,0,0,0,848,850,1,0,0,0,849,851,5,85,0,0,850,849,1,0,0,0,850,851,1,0,
0,0,851,852,1,0,0,0,852,853,5,81,0,0,853,119,1,0,0,0,854,855,5,123,0,0,855,
856,5,28,0,0,856,857,3,160,80,0,857,858,3,122,61,0,858,121,1,0,0,0,859,863,
5,80,0,0,860,862,3,124,62,0,861,860,1,0,0,0,862,865,1,0,0,0,863,861,1,0,
0,0,863,864,1,0,0,0,864,866,1,0,0,0,865,863,1,0,0,0,866,867,5,81,0,0,867,
123,1,0,0,0,868,870,3,8,4,0,869,868,1,0,0,0,870,873,1,0,0,0,871,869,1,0,
0,0,871,872,1,0,0,0,872,874,1,0,0,0,873,871,1,0,0,0,874,877,3,126,63,0,875,
877,5,84,0,0,876,871,1,0,0,0,876,875,1,0,0,0,877,125,1,0,0,0,878,879,3,236,
118,0,879,880,3,128,64,0,880,881,5,84,0,0,881,903,1,0,0,0,882,884,3,14,7,
0,883,885,5,84,0,0,884,883,1,0,0,0,884,885,1,0,0,0,885,903,1,0,0,0,886,888,
3,30,15,0,887,889,5,84,0,0,888,887,1,0,0,0,888,889,1,0,0,0,889,903,1,0,0,
0,890,892,3,22,11,0,891,893,5,84,0,0,892,891,1,0,0,0,892,893,1,0,0,0,893,
903,1,0,0,0,894,896,3,120,60,0,895,897,5,84,0,0,896,895,1,0,0,0,896,897,
1,0,0,0,897,903,1,0,0,0,898,900,3,144,72,0,899,901,5,84,0,0,900,899,1,0,
0,0,900,901,1,0,0,0,901,903,1,0,0,0,902,878,1,0,0,0,902,882,1,0,0,0,902,
886,1,0,0,0,902,890,1,0,0,0,902,894,1,0,0,0,902,898,1,0,0,0,903,127,1,0,
0,0,904,907,3,130,65,0,905,907,3,132,66,0,906,904,1,0,0,0,906,905,1,0,0,
0,907,129,1,0,0,0,908,909,3,160,80,0,909,910,5,78,0,0,910,912,5,79,0,0,911,
913,3,134,67,0,912,911,1,0,0,0,912,913,1,0,0,0,913,131,1,0,0,0,914,915,3,
70,35,0,915,133,1,0,0,0,916,917,5,12,0,0,917,918,3,116,58,0,918,135,1,0,
0,0,919,921,5,52,0,0,920,919,1,0,0,0,920,921,1,0,0,0,921,922,1,0,0,0,922,
923,5,51,0,0,923,924,3,100,50,0,924,925,3,138,69,0,925,137,1,0,0,0,926,930,
5,80,0,0,927,929,3,140,70,0,928,927,1,0,0,0,929,932,1,0,0,0,930,928,1,0,
0,0,930,931,1,0,0,0,931,933,1,0,0,0,932,930,1,0,0,0,933,934,5,81,0,0,934,
139,1,0,0,0,935,939,5,53,0,0,936,938,3,142,71,0,937,936,1,0,0,0,938,941,
1,0,0,0,939,937,1,0,0,0,939,940,1,0,0,0,940,942,1,0,0,0,941,939,1,0,0,0,
942,943,3,100,50,0,943,944,5,84,0,0,944,972,1,0,0,0,945,946,5,54,0,0,946,
949,3,100,50,0,947,948,5,56,0,0,948,950,3,100,50,0,949,947,1,0,0,0,949,950,
1,0,0,0,950,951,1,0,0,0,951,952,5,84,0,0,952,972,1,0,0,0,953,954,5,55,0,
0,954,957,3,100,50,0,955,956,5,56,0,0,956,958,3,100,50,0,957,955,1,0,0,0,
957,958,1,0,0,0,958,959,1,0,0,0,959,960,5,84,0,0,960,972,1,0,0,0,961,962,
5,57,0,0,962,963,3,100,50,0,963,964,5,84,0,0,964,972,1,0,0,0,965,966,5,58,
0,0,966,967,3,100,50,0,967,968,5,59,0,0,968,969,3,100,50,0,969,970,5,84,
0,0,970,972,1,0,0,0,971,935,1,0,0,0,971,945,1,0,0,0,971,953,1,0,0,0,971,
961,1,0,0,0,971,965,1,0,0,0,972,141,1,0,0,0,973,974,7,3,0,0,974,143,1,0,
0,0,975,976,5,63,0,0,976,978,3,160,80,0,977,979,3,16,8,0,978,977,1,0,0,0,
978,979,1,0,0,0,979,980,1,0,0,0,980,983,3,146,73,0,981,982,5,24,0,0,982,
984,3,234,117,0,983,981,1,0,0,0,983,984,1,0,0,0,984,985,1,0,0,0,985,986,
3,152,76,0,986,145,1,0,0,0,987,989,5,78,0,0,988,990,3,148,74,0,989,988,1,
0,0,0,989,990,1,0,0,0,990,991,1,0,0,0,991,992,5,79,0,0,992,147,1,0,0,0,993,
998,3,150,75,0,994,995,5,85,0,0,995,997,3,150,75,0,996,994,1,0,0,0,997,1000,
1,0,0,0,998,996,1,0,0,0,998,999,1,0,0,0,999,149,1,0,0,0,1000,998,1,0,0,0,
1001,1002,3,236,118,0,1002,1003,3,160,80,0,1003,151,1,0,0,0,1004,1008,5,
80,0,0,1005,1007,3,36,18,0,1006,1005,1,0,0,0,1007,1010,1,0,0,0,1008,1006,
1,0,0,0,1008,1009,1,0,0,0,1009,1011,1,0,0,0,1010,1008,1,0,0,0,1011,1012,
5,81,0,0,1012,153,1,0,0,0,1013,1017,5,80,0,0,1014,1016,3,156,78,0,1015,1014,
1,0,0,0,1016,1019,1,0,0,0,1017,1015,1,0,0,0,1017,1018,1,0,0,0,1018,1020,
1,0,0,0,1019,1017,1,0,0,0,1020,1021,5,81,0,0,1021,155,1,0,0,0,1022,1023,
3,158,79,0,1023,1024,5,84,0,0,1024,1028,1,0,0,0,1025,1028,3,164,82,0,1026,
1028,3,162,81,0,1027,1022,1,0,0,0,1027,1025,1,0,0,0,1027,1026,1,0,0,0,1028,
157,1,0,0,0,1029,1031,3,12,6,0,1030,1029,1,0,0,0,1031,1034,1,0,0,0,1032,
1030,1,0,0,0,1032,1033,1,0,0,0,1033,1043,1,0,0,0,1034,1032,1,0,0,0,1035,
1036,3,236,118,0,1036,1037,3,70,35,0,1037,1044,1,0,0,0,1038,1039,5,61,0,
0,1039,1040,3,160,80,0,1040,1041,5,87,0,0,1041,1042,3,194,97,0,1042,1044,
1,0,0,0,1043,1035,1,0,0,0,1043,1038,1,0,0,0,1044,159,1,0,0,0,1045,1046,7,
4,0,0,1046,161,1,0,0,0,1047,1049,3,10,5,0,1048,1047,1,0,0,0,1049,1052,1,
0,0,0,1050,1048,1,0,0,0,1050,1051,1,0,0,0,1051,1056,1,0,0,0,1052,1050,1,
0,0,0,1053,1057,3,14,7,0,1054,1057,3,30,15,0,1055,1057,3,144,72,0,1056,1053,
1,0,0,0,1056,1054,1,0,0,0,1056,1055,1,0,0,0,1057,1060,1,0,0,0,1058,1060,
5,84,0,0,1059,1050,1,0,0,0,1059,1058,1,0,0,0,1060,163,1,0,0,0,1061,1175,
3,154,77,0,1062,1063,5,2,0,0,1063,1066,3,194,97,0,1064,1065,5,93,0,0,1065,
1067,3,194,97,0,1066,1064,1,0,0,0,1066,1067,1,0,0,0,1067,1068,1,0,0,0,1068,
1069,5,84,0,0,1069,1175,1,0,0,0,1070,1071,5,22,0,0,1071,1072,3,188,94,0,
1072,1075,3,164,82,0,1073,1074,5,15,0,0,1074,1076,3,164,82,0,1075,1073,1,
0,0,0,1075,1076,1,0,0,0,1076,1175,1,0,0,0,1077,1078,5,21,0,0,1078,1079,5,
78,0,0,1079,1080,3,182,91,0,1080,1081,5,79,0,0,1081,1082,3,164,82,0,1082,
1175,1,0,0,0,1083,1084,5,50,0,0,1084,1085,3,188,94,0,1085,1086,3,164,82,
0,1086,1175,1,0,0,0,1087,1088,5,13,0,0,1088,1089,3,164,82,0,1089,1090,5,
50,0,0,1090,1091,3,188,94,0,1091,1092,5,84,0,0,1092,1175,1,0,0,0,1093,1094,
5,47,0,0,1094,1104,3,154,77,0,1095,1097,3,166,83,0,1096,1095,1,0,0,0,1097,
1098,1,0,0,0,1098,1096,1,0,0,0,1098,1099,1,0,0,0,1099,1101,1,0,0,0,1100,
1102,3,170,85,0,1101,1100,1,0,0,0,1101,1102,1,0,0,0,1102,1105,1,0,0,0,1103,
1105,3,170,85,0,1104,1096,1,0,0,0,1104,1103,1,0,0,0,1105,1175,1,0,0,0,1106,
1107,5,47,0,0,1107,1108,3,172,86,0,1108,1112,3,154,77,0,1109,1111,3,166,
83,0,1110,1109,1,0,0,0,1111,1114,1,0,0,0,1112,1110,1,0,0,0,1112,1113,1,0,
0,0,1113,1116,1,0,0,0,1114,1112,1,0,0,0,1115,1117,3,170,85,0,1116,1115,1,
0,0,0,1116,1117,1,0,0,0,1117,1175,1,0,0,0,1118,1119,5,41,0,0,1119,1120,3,
188,94,0,1120,1124,5,80,0,0,1121,1123,3,178,89,0,1122,1121,1,0,0,0,1123,
1126,1,0,0,0,1124,1122,1,0,0,0,1124,1125,1,0,0,0,1125,1130,1,0,0,0,1126,
1124,1,0,0,0,1127,1129,3,180,90,0,1128,1127,1,0,0,0,1129,1132,1,0,0,0,1130,
1128,1,0,0,0,1130,1131,1,0,0,0,1131,1133,1,0,0,0,1132,1130,1,0,0,0,1133,
1134,5,81,0,0,1134,1175,1,0,0,0,1135,1136,5,42,0,0,1136,1137,3,188,94,0,
1137,1138,3,154,77,0,1138,1175,1,0,0,0,1139,1141,5,36,0,0,1140,1142,3,194,
97,0,1141,1140,1,0,0,0,1141,1142,1,0,0,0,1142,1143,1,0,0,0,1143,1175,5,84,
0,0,1144,1145,5,44,0,0,1145,1146,3,194,97,0,1146,1147,5,84,0,0,1147,1175,
1,0,0,0,1148,1150,5,4,0,0,1149,1151,3,160,80,0,1150,1149,1,0,0,0,1150,1151,
1,0,0,0,1151,1152,1,0,0,0,1152,1175,5,84,0,0,1153,1155,5,11,0,0,1154,1156,
3,160,80,0,1155,1154,1,0,0,0,1155,1156,1,0,0,0,1156,1157,1,0,0,0,1157,1175,
5,84,0,0,1158,1159,5,62,0,0,1159,1160,3,194,97,0,1160,1161,5,84,0,0,1161,
1175,1,0,0,0,1162,1175,5,84,0,0,1163,1164,3,194,97,0,1164,1165,5,84,0,0,
1165,1175,1,0,0,0,1166,1168,3,206,103,0,1167,1169,5,84,0,0,1168,1167,1,0,
0,0,1168,1169,1,0,0,0,1169,1175,1,0,0,0,1170,1171,3,160,80,0,1171,1172,5,
93,0,0,1172,1173,3,164,82,0,1173,1175,1,0,0,0,1174,1061,1,0,0,0,1174,1062,
1,0,0,0,1174,1070,1,0,0,0,1174,1077,1,0,0,0,1174,1083,1,0,0,0,1174,1087,
1,0,0,0,1174,1093,1,0,0,0,1174,1106,1,0,0,0,1174,1118,1,0,0,0,1174,1135,
1,0,0,0,1174,1139,1,0,0,0,1174,1144,1,0,0,0,1174,1148,1,0,0,0,1174,1153,
1,0,0,0,1174,1158,1,0,0,0,1174,1162,1,0,0,0,1174,1163,1,0,0,0,1174,1166,
1,0,0,0,1174,1170,1,0,0,0,1175,165,1,0,0,0,1176,1177,5,7,0,0,1177,1181,5,
78,0,0,1178,1180,3,12,6,0,1179,1178,1,0,0,0,1180,1183,1,0,0,0,1181,1179,
1,0,0,0,1181,1182,1,0,0,0,1182,1184,1,0,0,0,1183,1181,1,0,0,0,1184,1185,
3,168,84,0,1185,1186,3,160,80,0,1186,1187,5,79,0,0,1187,1188,3,154,77,0,
1188,167,1,0,0,0,1189,1194,3,100,50,0,1190,1191,5,107,0,0,1191,1193,3,100,
50,0,1192,1190,1,0,0,0,1193,1196,1,0,0,0,1194,1192,1,0,0,0,1194,1195,1,0,
0,0,1195,169,1,0,0,0,1196,1194,1,0,0,0,1197,1198,5,19,0,0,1198,1199,3,154,
77,0,1199,171,1,0,0,0,1200,1201,5,78,0,0,1201,1203,3,174,87,0,1202,1204,
5,84,0,0,1203,1202,1,0,0,0,1203,1204,1,0,0,0,1204,1205,1,0,0,0,1205,1206,
5,79,0,0,1206,173,1,0,0,0,1207,1212,3,176,88,0,1208,1209,5,84,0,0,1209,1211,
3,176,88,0,1210,1208,1,0,0,0,1211,1214,1,0,0,0,1212,1210,1,0,0,0,1212,1213,
1,0,0,0,1213,175,1,0,0,0,1214,1212,1,0,0,0,1215,1217,3,12,6,0,1216,1215,
1,0,0,0,1217,1220,1,0,0,0,1218,1216,1,0,0,0,1218,1219,1,0,0,0,1219,1226,
1,0,0,0,1220,1218,1,0,0,0,1221,1222,3,80,40,0,1222,1223,3,74,37,0,1223,1227,
1,0,0,0,1224,1225,5,61,0,0,1225,1227,3,160,80,0,1226,1221,1,0,0,0,1226,1224,
1,0,0,0,1227,1228,1,0,0,0,1228,1229,5,87,0,0,1229,1230,3,194,97,0,1230,1233,
1,0,0,0,1231,1233,3,160,80,0,1232,1218,1,0,0,0,1232,1231,1,0,0,0,1233,177,
1,0,0,0,1234,1236,3,180,90,0,1235,1234,1,0,0,0,1236,1237,1,0,0,0,1237,1235,
1,0,0,0,1237,1238,1,0,0,0,1238,1240,1,0,0,0,1239,1241,3,156,78,0,1240,1239,
1,0,0,0,1241,1242,1,0,0,0,1242,1240,1,0,0,0,1242,1243,1,0,0,0,1243,179,1,
0,0,0,1244,1250,5,6,0,0,1245,1251,3,194,97,0,1246,1251,5,128,0,0,1247,1248,
3,236,118,0,1248,1249,3,160,80,0,1249,1251,1,0,0,0,1250,1245,1,0,0,0,1250,
1246,1,0,0,0,1250,1247,1,0,0,0,1251,1252,1,0,0,0,1252,1256,5,93,0,0,1253,
1254,5,12,0,0,1254,1256,5,93,0,0,1255,1244,1,0,0,0,1255,1253,1,0,0,0,1256,
181,1,0,0,0,1257,1270,3,186,93,0,1258,1260,3,184,92,0,1259,1258,1,0,0,0,
1259,1260,1,0,0,0,1260,1261,1,0,0,0,1261,1263,5,84,0,0,1262,1264,3,194,97,
0,1263,1262,1,0,0,0,1263,1264,1,0,0,0,1264,1265,1,0,0,0,1265,1267,5,84,0,
0,1266,1268,3,190,95,0,1267,1266,1,0,0,0,1267,1268,1,0,0,0,1268,1270,1,0,
0,0,1269,1257,1,0,0,0,1269,1259,1,0,0,0,1270,183,1,0,0,0,1271,1274,3,158,
79,0,1272,1274,3,190,95,0,1273,1271,1,0,0,0,1273,1272,1,0,0,0,1274,185,1,
0,0,0,1275,1277,3,12,6,0,1276,1275,1,0,0,0,1277,1280,1,0,0,0,1278,1276,1,
0,0,0,1278,1279,1,0,0,0,1279,1283,1,0,0,0,1280,1278,1,0,0,0,1281,1284,3,
236,118,0,1282,1284,5,61,0,0,1283,1281,1,0,0,0,1283,1282,1,0,0,0,1284,1285,
1,0,0,0,1285,1286,3,74,37,0,1286,1287,5,93,0,0,1287,1288,3,194,97,0,1288,
187,1,0,0,0,1289,1290,5,78,0,0,1290,1291,3,194,97,0,1291,1292,5,79,0,0,1292,
189,1,0,0,0,1293,1298,3,194,97,0,1294,1295,5,85,0,0,1295,1297,3,194,97,0,
1296,1294,1,0,0,0,1297,1300,1,0,0,0,1298,1296,1,0,0,0,1298,1299,1,0,0,0,
1299,191,1,0,0,0,1300,1298,1,0,0,0,1301,1302,3,160,80,0,1302,1304,5,78,0,
0,1303,1305,3,190,95,0,1304,1303,1,0,0,0,1304,1305,1,0,0,0,1305,1306,1,0,
0,0,1306,1307,5,79,0,0,1307,1321,1,0,0,0,1308,1309,5,43,0,0,1309,1311,5,
78,0,0,1310,1312,3,190,95,0,1311,1310,1,0,0,0,1311,1312,1,0,0,0,1312,1313,
1,0,0,0,1313,1321,5,79,0,0,1314,1315,5,40,0,0,1315,1317,5,78,0,0,1316,1318,
3,190,95,0,1317,1316,1,0,0,0,1317,1318,1,0,0,0,1318,1319,1,0,0,0,1319,1321,
5,79,0,0,1320,1301,1,0,0,0,1320,1308,1,0,0,0,1320,1314,1,0,0,0,1321,193,
1,0,0,0,1322,1323,6,97,-1,0,1323,1368,3,204,102,0,1324,1368,3,192,96,0,1325,
1326,5,31,0,0,1326,1368,3,216,108,0,1327,1331,5,78,0,0,1328,1330,3,110,55,
0,1329,1328,1,0,0,0,1330,1333,1,0,0,0,1331,1329,1,0,0,0,1331,1332,1,0,0,
0,1332,1334,1,0,0,0,1333,1331,1,0,0,0,1334,1339,3,236,118,0,1335,1336,5,
106,0,0,1336,1338,3,236,118,0,1337,1335,1,0,0,0,1338,1341,1,0,0,0,1339,1337,
1,0,0,0,1339,1340,1,0,0,0,1340,1342,1,0,0,0,1341,1339,1,0,0,0,1342,1343,
5,79,0,0,1343,1344,3,194,97,22,1344,1368,1,0,0,0,1345,1346,7,5,0,0,1346,
1368,3,194,97,20,1347,1348,7,6,0,0,1348,1368,3,194,97,19,1349,1368,3,198,
99,0,1350,1368,3,206,103,0,1351,1352,3,236,118,0,1352,1358,5,122,0,0,1353,
1355,3,240,120,0,1354,1353,1,0,0,0,1354,1355,1,0,0,0,1355,1356,1,0,0,0,1356,
1359,3,160,80,0,1357,1359,5,31,0,0,1358,1354,1,0,0,0,1358,1357,1,0,0,0,1359,
1368,1,0,0,0,1360,1361,3,214,107,0,1361,1363,5,122,0,0,1362,1364,3,240,120,
0,1363,1362,1,0,0,0,1363,1364,1,0,0,0,1364,1365,1,0,0,0,1365,1366,5,31,0,
0,1366,1368,1,0,0,0,1367,1322,1,0,0,0,1367,1324,1,0,0,0,1367,1325,1,0,0,
0,1367,1327,1,0,0,0,1367,1345,1,0,0,0,1367,1347,1,0,0,0,1367,1349,1,0,0,
0,1367,1350,1,0,0,0,1367,1351,1,0,0,0,1367,1360,1,0,0,0,1368,1452,1,0,0,
0,1369,1370,10,18,0,0,1370,1371,7,7,0,0,1371,1451,3,194,97,19,1372,1373,
10,17,0,0,1373,1374,7,8,0,0,1374,1451,3,194,97,18,1375,1383,10,16,0,0,1376,
1377,5,89,0,0,1377,1384,5,89,0,0,1378,1379,5,88,0,0,1379,1380,5,88,0,0,1380,
1384,5,88,0,0,1381,1382,5,88,0,0,1382,1384,5,88,0,0,1383,1376,1,0,0,0,1383,
1378,1,0,0,0,1383,1381,1,0,0,0,1384,1385,1,0,0,0,1385,1451,3,194,97,17,1386,
1387,10,15,0,0,1387,1388,7,9,0,0,1388,1451,3,194,97,16,1389,1390,10,13,0,
0,1390,1391,7,10,0,0,1391,1451,3,194,97,14,1392,1393,10,12,0,0,1393,1394,
5,106,0,0,1394,1451,3,194,97,13,1395,1396,10,11,0,0,1396,1397,5,108,0,0,
1397,1451,3,194,97,12,1398,1399,10,10,0,0,1399,1400,5,107,0,0,1400,1451,
3,194,97,11,1401,1402,10,9,0,0,1402,1403,5,98,0,0,1403,1451,3,194,97,10,
1404,1405,10,8,0,0,1405,1406,5,99,0,0,1406,1451,3,194,97,9,1407,1408,10,
7,0,0,1408,1409,5,92,0,0,1409,1410,3,194,97,0,1410,1411,5,93,0,0,1411,1412,
3,194,97,7,1412,1451,1,0,0,0,1413,1414,10,6,0,0,1414,1415,7,11,0,0,1415,
1451,3,194,97,6,1416,1417,10,26,0,0,1417,1429,5,86,0,0,1418,1430,3,160,80,
0,1419,1430,3,192,96,0,1420,1430,5,43,0,0,1421,1423,5,31,0,0,1422,1424,3,
232,116,0,1423,1422,1,0,0,0,1423,1424,1,0,0,0,1424,1425,1,0,0,0,1425,1430,
3,220,110,0,1426,1427,5,40,0,0,1427,1430,3,242,121,0,1428,1430,3,226,113,
0,1429,1418,1,0,0,0,1429,1419,1,0,0,0,1429,1420,1,0,0,0,1429,1421,1,0,0,
0,1429,1426,1,0,0,0,1429,1428,1,0,0,0,1430,1451,1,0,0,0,1431,1432,10,25,
0,0,1432,1433,5,82,0,0,1433,1434,3,194,97,0,1434,1435,5,83,0,0,1435,1451,
1,0,0,0,1436,1437,10,21,0,0,1437,1451,7,12,0,0,1438,1439,10,14,0,0,1439,
1442,5,26,0,0,1440,1443,3,236,118,0,1441,1443,3,196,98,0,1442,1440,1,0,0,
0,1442,1441,1,0,0,0,1443,1451,1,0,0,0,1444,1445,10,3,0,0,1445,1447,5,122,
0,0,1446,1448,3,240,120,0,1447,1446,1,0,0,0,1447,1448,1,0,0,0,1448,1449,
1,0,0,0,1449,1451,3,160,80,0,1450,1369,1,0,0,0,1450,1372,1,0,0,0,1450,1375,
1,0,0,0,1450,1386,1,0,0,0,1450,1389,1,0,0,0,1450,1392,1,0,0,0,1450,1395,
1,0,0,0,1450,1398,1,0,0,0,1450,1401,1,0,0,0,1450,1404,1,0,0,0,1450,1407,
1,0,0,0,1450,1413,1,0,0,0,1450,1416,1,0,0,0,1450,1431,1,0,0,0,1450,1436,
1,0,0,0,1450,1438,1,0,0,0,1450,1444,1,0,0,0,1451,1454,1,0,0,0,1452,1450,
1,0,0,0,1452,1453,1,0,0,0,1453,195,1,0,0,0,1454,1452,1,0,0,0,1455,1457,3,
12,6,0,1456,1455,1,0,0,0,1457,1460,1,0,0,0,1458,1456,1,0,0,0,1458,1459,1,
0,0,0,1459,1461,1,0,0,0,1460,1458,1,0,0,0,1461,1465,3,236,118,0,1462,1464,
3,110,55,0,1463,1462,1,0,0,0,1464,1467,1,0,0,0,1465,1463,1,0,0,0,1465,1466,
1,0,0,0,1466,1468,1,0,0,0,1467,1465,1,0,0,0,1468,1469,3,160,80,0,1469,197,
1,0,0,0,1470,1471,3,200,100,0,1471,1472,5,121,0,0,1472,1473,3,202,101,0,
1473,199,1,0,0,0,1474,1497,3,160,80,0,1475,1477,5,78,0,0,1476,1478,3,90,
45,0,1477,1476,1,0,0,0,1477,1478,1,0,0,0,1478,1479,1,0,0,0,1479,1497,5,79,
0,0,1480,1481,5,78,0,0,1481,1486,3,160,80,0,1482,1483,5,85,0,0,1483,1485,
3,160,80,0,1484,1482,1,0,0,0,1485,1488,1,0,0,0,1486,1484,1,0,0,0,1486,1487,
1,0,0,0,1487,1489,1,0,0,0,1488,1486,1,0,0,0,1489,1490,5,79,0,0,1490,1497,
1,0,0,0,1491,1493,5,78,0,0,1492,1494,3,96,48,0,1493,1492,1,0,0,0,1493,1494,
1,0,0,0,1494,1495,1,0,0,0,1495,1497,5,79,0,0,1496,1474,1,0,0,0,1496,1475,
1,0,0,0,1496,1480,1,0,0,0,1496,1491,1,0,0,0,1497,201,1,0,0,0,1498,1501,3,
194,97,0,1499,1501,3,154,77,0,1500,1498,1,0,0,0,1500,1499,1,0,0,0,1501,203,
1,0,0,0,1502,1503,5,78,0,0,1503,1504,3,194,97,0,1504,1505,5,79,0,0,1505,
1521,1,0,0,0,1506,1521,5,43,0,0,1507,1521,5,40,0,0,1508,1521,3,102,51,0,
1509,1521,3,160,80,0,1510,1511,3,44,22,0,1511,1512,5,86,0,0,1512,1513,5,
9,0,0,1513,1521,1,0,0,0,1514,1518,3,232,116,0,1515,1519,3,244,122,0,1516,
1517,5,43,0,0,1517,1519,3,246,123,0,1518,1515,1,0,0,0,1518,1516,1,0,0,0,
1519,1521,1,0,0,0,1520,1502,1,0,0,0,1520,1506,1,0,0,0,1520,1507,1,0,0,0,
1520,1508,1,0,0,0,1520,1509,1,0,0,0,1520,1510,1,0,0,0,1520,1514,1,0,0,0,
1521,205,1,0,0,0,1522,1523,5,41,0,0,1523,1524,3,188,94,0,1524,1528,5,80,
0,0,1525,1527,3,208,104,0,1526,1525,1,0,0,0,1527,1530,1,0,0,0,1528,1526,
1,0,0,0,1528,1529,1,0,0,0,1529,1531,1,0,0,0,1530,1528,1,0,0,0,1531,1532,
5,81,0,0,1532,207,1,0,0,0,1533,1537,5,6,0,0,1534,1538,3,190,95,0,1535,1538,
5,77,0,0,1536,1538,3,210,105,0,1537,1534,1,0,0,0,1537,1535,1,0,0,0,1537,
1536,1,0,0,0,1538,1539,1,0,0,0,1539,1540,7,13,0,0,1540,1545,3,212,106,0,
1541,1542,5,12,0,0,1542,1543,7,13,0,0,1543,1545,3,212,106,0,1544,1533,1,
0,0,0,1544,1541,1,0,0,0,1545,209,1,0,0,0,1546,1547,6,105,-1,0,1547,1548,
5,78,0,0,1548,1549,3,210,105,0,1549,1550,5,79,0,0,1550,1573,1,0,0,0,1551,
1553,3,12,6,0,1552,1551,1,0,0,0,1553,1556,1,0,0,0,1554,1552,1,0,0,0,1554,
1555,1,0,0,0,1555,1557,1,0,0,0,1556,1554,1,0,0,0,1557,1561,3,236,118,0,1558,
1560,3,110,55,0,1559,1558,1,0,0,0,1560,1563,1,0,0,0,1561,1559,1,0,0,0,1561,
1562,1,0,0,0,1562,1564,1,0,0,0,1563,1561,1,0,0,0,1564,1569,3,160,80,0,1565,
1566,5,98,0,0,1566,1568,3,194,97,0,1567,1565,1,0,0,0,1568,1571,1,0,0,0,1569,
1567,1,0,0,0,1569,1570,1,0,0,0,1570,1573,1,0,0,0,1571,1569,1,0,0,0,1572,
1546,1,0,0,0,1572,1554,1,0,0,0,1573,1579,1,0,0,0,1574,1575,10,1,0,0,1575,
1576,5,98,0,0,1576,1578,3,194,97,0,1577,1574,1,0,0,0,1578,1581,1,0,0,0,1579,
1577,1,0,0,0,1579,1580,1,0,0,0,1580,211,1,0,0,0,1581,1579,1,0,0,0,1582,1590,
3,154,77,0,1583,1585,3,156,78,0,1584,1583,1,0,0,0,1585,1588,1,0,0,0,1586,
1584,1,0,0,0,1586,1587,1,0,0,0,1587,1590,1,0,0,0,1588,1586,1,0,0,0,1589,
1582,1,0,0,0,1589,1586,1,0,0,0,1590,213,1,0,0,0,1591,1592,3,80,40,0,1592,
1593,5,86,0,0,1593,1595,1,0,0,0,1594,1591,1,0,0,0,1594,1595,1,0,0,0,1595,
1599,1,0,0,0,1596,1598,3,110,55,0,1597,1596,1,0,0,0,1598,1601,1,0,0,0,1599,
1597,1,0,0,0,1599,1600,1,0,0,0,1600,1602,1,0,0,0,1601,1599,1,0,0,0,1602,
1604,3,160,80,0,1603,1605,3,240,120,0,1604,1603,1,0,0,0,1604,1605,1,0,0,
0,1605,215,1,0,0,0,1606,1607,3,232,116,0,1607,1608,3,218,109,0,1608,1609,
3,224,112,0,1609,1616,1,0,0,0,1610,1613,3,218,109,0,1611,1614,3,222,111,
0,1612,1614,3,224,112,0,1613,1611,1,0,0,0,1613,1612,1,0,0,0,1614,1616,1,
0,0,0,1615,1606,1,0,0,0,1615,1610,1,0,0,0,1616,217,1,0,0,0,1617,1619,3,160,
80,0,1618,1620,3,228,114,0,1619,1618,1,0,0,0,1619,1620,1,0,0,0,1620,1628,
1,0,0,0,1621,1622,5,86,0,0,1622,1624,3,160,80,0,1623,1625,3,228,114,0,1624,
1623,1,0,0,0,1624,1625,1,0,0,0,1625,1627,1,0,0,0,1626,1621,1,0,0,0,1627,
1630,1,0,0,0,1628,1626,1,0,0,0,1628,1629,1,0,0,0,1629,1633,1,0,0,0,1630,
1628,1,0,0,0,1631,1633,3,238,119,0,1632,1617,1,0,0,0,1632,1631,1,0,0,0,1633,
219,1,0,0,0,1634,1636,3,160,80,0,1635,1637,3,230,115,0,1636,1635,1,0,0,0,
1636,1637,1,0,0,0,1637,1638,1,0,0,0,1638,1639,3,224,112,0,1639,221,1,0,0,
0,1640,1668,5,82,0,0,1641,1646,5,83,0,0,1642,1643,5,82,0,0,1643,1645,5,83,
0,0,1644,1642,1,0,0,0,1645,1648,1,0,0,0,1646,1644,1,0,0,0,1646,1647,1,0,
0,0,1647,1649,1,0,0,0,1648,1646,1,0,0,0,1649,1669,3,78,39,0,1650,1651,3,
194,97,0,1651,1658,5,83,0,0,1652,1653,5,82,0,0,1653,1654,3,194,97,0,1654,
1655,5,83,0,0,1655,1657,1,0,0,0,1656,1652,1,0,0,0,1657,1660,1,0,0,0,1658,
1656,1,0,0,0,1658,1659,1,0,0,0,1659,1665,1,0,0,0,1660,1658,1,0,0,0,1661,
1662,5,82,0,0,1662,1664,5,83,0,0,1663,1661,1,0,0,0,1664,1667,1,0,0,0,1665,
1663,1,0,0,0,1665,1666,1,0,0,0,1666,1669,1,0,0,0,1667,1665,1,0,0,0,1668,
1641,1,0,0,0,1668,1650,1,0,0,0,1669,223,1,0,0,0,1670,1672,3,246,123,0,1671,
1673,3,32,16,0,1672,1671,1,0,0,0,1672,1673,1,0,0,0,1673,225,1,0,0,0,1674,
1675,3,232,116,0,1675,1676,3,244,122,0,1676,227,1,0,0,0,1677,1678,5,89,0,
0,1678,1681,5,88,0,0,1679,1681,3,240,120,0,1680,1677,1,0,0,0,1680,1679,1,
0,0,0,1681,229,1,0,0,0,1682,1683,5,89,0,0,1683,1686,5,88,0,0,1684,1686,3,
232,116,0,1685,1682,1,0,0,0,1685,1684,1,0,0,0,1686,231,1,0,0,0,1687,1688,
5,89,0,0,1688,1689,3,234,117,0,1689,1690,5,88,0,0,1690,233,1,0,0,0,1691,
1696,3,236,118,0,1692,1693,5,85,0,0,1693,1695,3,236,118,0,1694,1692,1,0,
0,0,1695,1698,1,0,0,0,1696,1694,1,0,0,0,1696,1697,1,0,0,0,1697,235,1,0,0,
0,1698,1696,1,0,0,0,1699,1701,3,110,55,0,1700,1699,1,0,0,0,1701,1704,1,0,
0,0,1702,1700,1,0,0,0,1702,1703,1,0,0,0,1703,1707,1,0,0,0,1704,1702,1,0,
0,0,1705,1708,3,80,40,0,1706,1708,3,238,119,0,1707,1705,1,0,0,0,1707,1706,
1,0,0,0,1708,1719,1,0,0,0,1709,1711,3,110,55,0,1710,1709,1,0,0,0,1711,1714,
1,0,0,0,1712,1710,1,0,0,0,1712,1713,1,0,0,0,1713,1715,1,0,0,0,1714,1712,
1,0,0,0,1715,1716,5,82,0,0,1716,1718,5,83,0,0,1717,1712,1,0,0,0,1718,1721,
1,0,0,0,1719,1717,1,0,0,0,1719,1720,1,0,0,0,1720,237,1,0,0,0,1721,1719,1,
0,0,0,1722,1723,7,14,0,0,1723,239,1,0,0,0,1724,1725,5,89,0,0,1725,1730,3,
82,41,0,1726,1727,5,85,0,0,1727,1729,3,82,41,0,1728,1726,1,0,0,0,1729,1732,
1,0,0,0,1730,1728,1,0,0,0,1730,1731,1,0,0,0,1731,1733,1,0,0,0,1732,1730,
1,0,0,0,1733,1734,5,88,0,0,1734,241,1,0,0,0,1735,1745,3,246,123,0,1736,1738,
5,86,0,0,1737,1739,3,240,120,0,1738,1737,1,0,0,0,1738,1739,1,0,0,0,1739,
1740,1,0,0,0,1740,1742,3,160,80,0,1741,1743,3,246,123,0,1742,1741,1,0,0,
0,1742,1743,1,0,0,0,1743,1745,1,0,0,0,1744,1735,1,0,0,0,1744,1736,1,0,0,
0,1745,243,1,0,0,0,1746,1747,5,40,0,0,1747,1752,3,242,121,0,1748,1749,3,
160,80,0,1749,1750,3,246,123,0,1750,1752,1,0,0,0,1751,1746,1,0,0,0,1751,
1748,1,0,0,0,1752,245,1,0,0,0,1753,1755,5,78,0,0,1754,1756,3,190,95,0,1755,
1754,1,0,0,0,1755,1756,1,0,0,0,1756,1757,1,0,0,0,1757,1758,5,79,0,0,1758,
247,1,0,0,0,219,249,254,260,266,271,280,285,292,300,303,310,322,326,331,
335,339,343,353,361,369,373,380,387,391,394,397,406,412,417,420,426,432,
436,444,453,460,466,470,482,491,496,502,506,518,529,534,544,552,562,571,
582,587,596,606,611,620,626,633,638,646,650,652,658,663,667,674,680,682,
689,694,699,702,704,714,724,729,732,737,746,753,764,770,781,791,802,811,
816,819,826,836,844,847,850,863,871,876,884,888,892,896,900,902,906,912,
920,930,939,949,957,971,978,983,989,998,1008,1017,1027,1032,1043,1050,1056,
1059,1066,1075,1098,1101,1104,1112,1116,1124,1130,1141,1150,1155,1168,1174,
1181,1194,1203,1212,1218,1226,1232,1237,1242,1250,1255,1259,1263,1267,1269,
1273,1278,1283,1298,1304,1311,1317,1320,1331,1339,1354,1358,1363,1367,1383,
1423,1429,1442,1447,1450,1452,1458,1465,1477,1486,1493,1496,1500,1518,1520,
1528,1537,1544,1554,1561,1569,1572,1579,1586,1589,1594,1599,1604,1613,1615,
1619,1624,1628,1632,1636,1646,1658,1665,1668,1672,1680,1685,1696,1702,1707,
1712,1719,1730,1738,1742,1744,1751,1755];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class JavaParser extends antlr4.Parser {

    static grammarFileName = "JavaParser.g4";
    static literalNames = [ null, "'abstract'", "'assert'", "'boolean'", 
                            "'break'", "'byte'", "'case'", "'catch'", "'char'", 
                            "'class'", "'const'", "'continue'", "'default'", 
                            "'do'", "'double'", "'else'", "'enum'", "'extends'", 
                            "'final'", "'finally'", "'float'", "'for'", 
                            "'if'", "'goto'", "'implements'", "'import'", 
                            "'instanceof'", "'int'", "'interface'", "'long'", 
                            "'native'", "'new'", "'package'", "'private'", 
                            "'protected'", "'public'", "'return'", "'short'", 
                            "'static'", "'strictfp'", "'super'", "'switch'", 
                            "'synchronized'", "'this'", "'throw'", "'throws'", 
                            "'transient'", "'try'", "'void'", "'volatile'", 
                            "'while'", "'module'", "'open'", "'requires'", 
                            "'exports'", "'opens'", "'to'", "'uses'", "'provides'", 
                            "'with'", "'transitive'", "'var'", "'yield'", 
                            "'record'", "'sealed'", "'permits'", "'non-sealed'", 
                            null, null, null, null, null, null, null, null, 
                            null, null, "'null'", "'('", "')'", "'{'", "'}'", 
                            "'['", "']'", "';'", "','", "'.'", "'='", "'>'", 
                            "'<'", "'!'", "'~'", "'?'", "':'", "'=='", "'<='", 
                            "'>='", "'!='", "'&&'", "'||'", "'++'", "'--'", 
                            "'+'", "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", 
                            "'%'", "'+='", "'-='", "'*='", "'/='", "'&='", 
                            "'|='", "'^='", "'%='", "'<<='", "'>>='", "'>>>='", 
                            "'->'", "'::'", "'@'", "'...'" ];
    static symbolicNames = [ null, "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", 
                             "BYTE", "CASE", "CATCH", "CHAR", "CLASS", "CONST", 
                             "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", 
                             "ENUM", "EXTENDS", "FINAL", "FINALLY", "FLOAT", 
                             "FOR", "IF", "GOTO", "IMPLEMENTS", "IMPORT", 
                             "INSTANCEOF", "INT", "INTERFACE", "LONG", "NATIVE", 
                             "NEW", "PACKAGE", "PRIVATE", "PROTECTED", "PUBLIC", 
                             "RETURN", "SHORT", "STATIC", "STRICTFP", "SUPER", 
                             "SWITCH", "SYNCHRONIZED", "THIS", "THROW", 
                             "THROWS", "TRANSIENT", "TRY", "VOID", "VOLATILE", 
                             "WHILE", "MODULE", "OPEN", "REQUIRES", "EXPORTS", 
                             "OPENS", "TO", "USES", "PROVIDES", "WITH", 
                             "TRANSITIVE", "VAR", "YIELD", "RECORD", "SEALED", 
                             "PERMITS", "NON_SEALED", "DECIMAL_LITERAL", 
                             "HEX_LITERAL", "OCT_LITERAL", "BINARY_LITERAL", 
                             "FLOAT_LITERAL", "HEX_FLOAT_LITERAL", "BOOL_LITERAL", 
                             "CHAR_LITERAL", "STRING_LITERAL", "TEXT_BLOCK", 
                             "NULL_LITERAL", "LPAREN", "RPAREN", "LBRACE", 
                             "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", 
                             "DOT", "ASSIGN", "GT", "LT", "BANG", "TILDE", 
                             "QUESTION", "COLON", "EQUAL", "LE", "GE", "NOTEQUAL", 
                             "AND", "OR", "INC", "DEC", "ADD", "SUB", "MUL", 
                             "DIV", "BITAND", "BITOR", "CARET", "MOD", "ADD_ASSIGN", 
                             "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", 
                             "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", 
                             "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", "ARROW", 
                             "COLONCOLON", "AT", "ELLIPSIS", "WS", "COMMENT", 
                             "LINE_COMMENT", "IDENTIFIER" ];
    static ruleNames = [ "compilationUnit", "packageDeclaration", "importDeclaration", 
                         "typeDeclaration", "modifier", "classOrInterfaceModifier", 
                         "variableModifier", "classDeclaration", "typeParameters", 
                         "typeParameter", "typeBound", "enumDeclaration", 
                         "enumConstants", "enumConstant", "enumBodyDeclarations", 
                         "interfaceDeclaration", "classBody", "interfaceBody", 
                         "classBodyDeclaration", "memberDeclaration", "methodDeclaration", 
                         "methodBody", "typeTypeOrVoid", "genericMethodDeclaration", 
                         "genericConstructorDeclaration", "constructorDeclaration", 
                         "fieldDeclaration", "interfaceBodyDeclaration", 
                         "interfaceMemberDeclaration", "constDeclaration", 
                         "constantDeclarator", "interfaceMethodDeclaration", 
                         "interfaceMethodModifier", "genericInterfaceMethodDeclaration", 
                         "interfaceCommonBodyDeclaration", "variableDeclarators", 
                         "variableDeclarator", "variableDeclaratorId", "variableInitializer", 
                         "arrayInitializer", "classOrInterfaceType", "typeArgument", 
                         "qualifiedNameList", "formalParameters", "receiverParameter", 
                         "formalParameterList", "formalParameter", "lastFormalParameter", 
                         "lambdaLVTIList", "lambdaLVTIParameter", "qualifiedName", 
                         "literal", "integerLiteral", "floatLiteral", "altAnnotationQualifiedName", 
                         "annotation", "elementValuePairs", "elementValuePair", 
                         "elementValue", "elementValueArrayInitializer", 
                         "annotationTypeDeclaration", "annotationTypeBody", 
                         "annotationTypeElementDeclaration", "annotationTypeElementRest", 
                         "annotationMethodOrConstantRest", "annotationMethodRest", 
                         "annotationConstantRest", "defaultValue", "moduleDeclaration", 
                         "moduleBody", "moduleDirective", "requiresModifier", 
                         "recordDeclaration", "recordHeader", "recordComponentList", 
                         "recordComponent", "recordBody", "block", "blockStatement", 
                         "localVariableDeclaration", "identifier", "localTypeDeclaration", 
                         "statement", "catchClause", "catchType", "finallyBlock", 
                         "resourceSpecification", "resources", "resource", 
                         "switchBlockStatementGroup", "switchLabel", "forControl", 
                         "forInit", "enhancedForControl", "parExpression", 
                         "expressionList", "methodCall", "expression", "pattern", 
                         "lambdaExpression", "lambdaParameters", "lambdaBody", 
                         "primary", "switchExpression", "switchLabeledRule", 
                         "guardedPattern", "switchRuleOutcome", "classType", 
                         "creator", "createdName", "innerCreator", "arrayCreatorRest", 
                         "classCreatorRest", "explicitGenericInvocation", 
                         "typeArgumentsOrDiamond", "nonWildcardTypeArgumentsOrDiamond", 
                         "nonWildcardTypeArguments", "typeList", "typeType", 
                         "primitiveType", "typeArguments", "superSuffix", 
                         "explicitGenericInvocationSuffix", "arguments" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = JavaParser.ruleNames;
        this.literalNames = JavaParser.literalNames;
        this.symbolicNames = JavaParser.symbolicNames;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 97:
    	    		return this.expression_sempred(localctx, predIndex);
    	case 105:
    	    		return this.guardedPattern_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 18);
    		case 1:
    			return this.precpred(this._ctx, 17);
    		case 2:
    			return this.precpred(this._ctx, 16);
    		case 3:
    			return this.precpred(this._ctx, 15);
    		case 4:
    			return this.precpred(this._ctx, 13);
    		case 5:
    			return this.precpred(this._ctx, 12);
    		case 6:
    			return this.precpred(this._ctx, 11);
    		case 7:
    			return this.precpred(this._ctx, 10);
    		case 8:
    			return this.precpred(this._ctx, 9);
    		case 9:
    			return this.precpred(this._ctx, 8);
    		case 10:
    			return this.precpred(this._ctx, 7);
    		case 11:
    			return this.precpred(this._ctx, 6);
    		case 12:
    			return this.precpred(this._ctx, 26);
    		case 13:
    			return this.precpred(this._ctx, 25);
    		case 14:
    			return this.precpred(this._ctx, 21);
    		case 15:
    			return this.precpred(this._ctx, 14);
    		case 16:
    			return this.precpred(this._ctx, 3);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    guardedPattern_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 17:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	compilationUnit() {
	    let localctx = new CompilationUnitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, JavaParser.RULE_compilationUnit);
	    var _la = 0;
	    try {
	        this.state = 266;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 249;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	            if(la_===1) {
	                this.state = 248;
	                this.packageDeclaration();

	            }
	            this.state = 254;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===25) {
	                this.state = 251;
	                this.importDeclaration();
	                this.state = 256;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 260;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) === 0 && ((1 << _la) & 268763650) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 4294705255) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 524291) !== 0) || _la===123 || _la===128) {
	                this.state = 257;
	                this.typeDeclaration();
	                this.state = 262;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 263;
	            this.moduleDeclaration();
	            this.state = 264;
	            this.match(JavaParser.EOF);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	packageDeclaration() {
	    let localctx = new PackageDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, JavaParser.RULE_packageDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 271;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 51)) & ~0x1f) === 0 && ((1 << (_la - 51)) & 32767) !== 0) || _la===123 || _la===128) {
	            this.state = 268;
	            this.annotation();
	            this.state = 273;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 274;
	        this.match(JavaParser.PACKAGE);
	        this.state = 275;
	        this.qualifiedName();
	        this.state = 276;
	        this.match(JavaParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importDeclaration() {
	    let localctx = new ImportDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, JavaParser.RULE_importDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 278;
	        this.match(JavaParser.IMPORT);
	        this.state = 280;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===38) {
	            this.state = 279;
	            this.match(JavaParser.STATIC);
	        }

	        this.state = 282;
	        this.qualifiedName();
	        this.state = 285;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===86) {
	            this.state = 283;
	            this.match(JavaParser.DOT);
	            this.state = 284;
	            this.match(JavaParser.MUL);
	        }

	        this.state = 287;
	        this.match(JavaParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeDeclaration() {
	    let localctx = new TypeDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, JavaParser.RULE_typeDeclaration);
	    try {
	        this.state = 303;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 9:
	        case 16:
	        case 18:
	        case 28:
	        case 33:
	        case 34:
	        case 35:
	        case 38:
	        case 39:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 123:
	        case 128:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 292;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,7,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 289;
	                    this.classOrInterfaceModifier(); 
	                }
	                this.state = 294;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,7,this._ctx);
	            }

	            this.state = 300;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 9:
	                this.state = 295;
	                this.classDeclaration();
	                break;
	            case 16:
	                this.state = 296;
	                this.enumDeclaration();
	                break;
	            case 28:
	                this.state = 297;
	                this.interfaceDeclaration();
	                break;
	            case 123:
	                this.state = 298;
	                this.annotationTypeDeclaration();
	                break;
	            case 63:
	                this.state = 299;
	                this.recordDeclaration();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 84:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 302;
	            this.match(JavaParser.SEMI);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modifier() {
	    let localctx = new ModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, JavaParser.RULE_modifier);
	    try {
	        this.state = 310;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 18:
	        case 33:
	        case 34:
	        case 35:
	        case 38:
	        case 39:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 123:
	        case 128:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 305;
	            this.classOrInterfaceModifier();
	            break;
	        case 30:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 306;
	            this.match(JavaParser.NATIVE);
	            break;
	        case 42:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 307;
	            this.match(JavaParser.SYNCHRONIZED);
	            break;
	        case 46:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 308;
	            this.match(JavaParser.TRANSIENT);
	            break;
	        case 49:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 309;
	            this.match(JavaParser.VOLATILE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classOrInterfaceModifier() {
	    let localctx = new ClassOrInterfaceModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, JavaParser.RULE_classOrInterfaceModifier);
	    try {
	        this.state = 322;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 312;
	            this.annotation();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 313;
	            this.match(JavaParser.PUBLIC);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 314;
	            this.match(JavaParser.PROTECTED);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 315;
	            this.match(JavaParser.PRIVATE);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 316;
	            this.match(JavaParser.STATIC);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 317;
	            this.match(JavaParser.ABSTRACT);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 318;
	            this.match(JavaParser.FINAL);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 319;
	            this.match(JavaParser.STRICTFP);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 320;
	            this.match(JavaParser.SEALED);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 321;
	            this.match(JavaParser.NON_SEALED);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableModifier() {
	    let localctx = new VariableModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, JavaParser.RULE_variableModifier);
	    try {
	        this.state = 326;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 18:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 324;
	            this.match(JavaParser.FINAL);
	            break;
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 123:
	        case 128:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 325;
	            this.annotation();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classDeclaration() {
	    let localctx = new ClassDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, JavaParser.RULE_classDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 328;
	        this.match(JavaParser.CLASS);
	        this.state = 329;
	        this.identifier();
	        this.state = 331;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===89) {
	            this.state = 330;
	            this.typeParameters();
	        }

	        this.state = 335;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17) {
	            this.state = 333;
	            this.match(JavaParser.EXTENDS);
	            this.state = 334;
	            this.typeType();
	        }

	        this.state = 339;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 337;
	            this.match(JavaParser.IMPLEMENTS);
	            this.state = 338;
	            this.typeList();
	        }

	        this.state = 343;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===65) {
	            this.state = 341;
	            this.match(JavaParser.PERMITS);
	            this.state = 342;
	            this.typeList();
	        }

	        this.state = 345;
	        this.classBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameters() {
	    let localctx = new TypeParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, JavaParser.RULE_typeParameters);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 347;
	        this.match(JavaParser.LT);
	        this.state = 348;
	        this.typeParameter();
	        this.state = 353;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===85) {
	            this.state = 349;
	            this.match(JavaParser.COMMA);
	            this.state = 350;
	            this.typeParameter();
	            this.state = 355;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 356;
	        this.match(JavaParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameter() {
	    let localctx = new TypeParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, JavaParser.RULE_typeParameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 361;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,18,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 358;
	                this.annotation(); 
	            }
	            this.state = 363;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,18,this._ctx);
	        }

	        this.state = 364;
	        this.identifier();
	        this.state = 373;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17) {
	            this.state = 365;
	            this.match(JavaParser.EXTENDS);
	            this.state = 369;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,19,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 366;
	                    this.annotation(); 
	                }
	                this.state = 371;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,19,this._ctx);
	            }

	            this.state = 372;
	            this.typeBound();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeBound() {
	    let localctx = new TypeBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, JavaParser.RULE_typeBound);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 375;
	        this.typeType();
	        this.state = 380;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===106) {
	            this.state = 376;
	            this.match(JavaParser.BITAND);
	            this.state = 377;
	            this.typeType();
	            this.state = 382;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumDeclaration() {
	    let localctx = new EnumDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, JavaParser.RULE_enumDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 383;
	        this.match(JavaParser.ENUM);
	        this.state = 384;
	        this.identifier();
	        this.state = 387;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 385;
	            this.match(JavaParser.IMPLEMENTS);
	            this.state = 386;
	            this.typeList();
	        }

	        this.state = 389;
	        this.match(JavaParser.LBRACE);
	        this.state = 391;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 51)) & ~0x1f) === 0 && ((1 << (_la - 51)) & 32767) !== 0) || _la===123 || _la===128) {
	            this.state = 390;
	            this.enumConstants();
	        }

	        this.state = 394;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===85) {
	            this.state = 393;
	            this.match(JavaParser.COMMA);
	        }

	        this.state = 397;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===84) {
	            this.state = 396;
	            this.enumBodyDeclarations();
	        }

	        this.state = 399;
	        this.match(JavaParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumConstants() {
	    let localctx = new EnumConstantsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, JavaParser.RULE_enumConstants);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 401;
	        this.enumConstant();
	        this.state = 406;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,26,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 402;
	                this.match(JavaParser.COMMA);
	                this.state = 403;
	                this.enumConstant(); 
	            }
	            this.state = 408;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,26,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumConstant() {
	    let localctx = new EnumConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, JavaParser.RULE_enumConstant);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 412;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,27,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 409;
	                this.annotation(); 
	            }
	            this.state = 414;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,27,this._ctx);
	        }

	        this.state = 415;
	        this.identifier();
	        this.state = 417;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===78) {
	            this.state = 416;
	            this.arguments();
	        }

	        this.state = 420;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===80) {
	            this.state = 419;
	            this.classBody();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumBodyDeclarations() {
	    let localctx = new EnumBodyDeclarationsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, JavaParser.RULE_enumBodyDeclarations);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 422;
	        this.match(JavaParser.SEMI);
	        this.state = 426;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2014659370) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 4294812279) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 17334275) !== 0) || _la===123 || _la===128) {
	            this.state = 423;
	            this.classBodyDeclaration();
	            this.state = 428;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceDeclaration() {
	    let localctx = new InterfaceDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, JavaParser.RULE_interfaceDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 429;
	        this.match(JavaParser.INTERFACE);
	        this.state = 430;
	        this.identifier();
	        this.state = 432;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===89) {
	            this.state = 431;
	            this.typeParameters();
	        }

	        this.state = 436;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17) {
	            this.state = 434;
	            this.match(JavaParser.EXTENDS);
	            this.state = 435;
	            this.typeList();
	        }

	        this.state = 438;
	        this.interfaceBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classBody() {
	    let localctx = new ClassBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, JavaParser.RULE_classBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 440;
	        this.match(JavaParser.LBRACE);
	        this.state = 444;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2014659370) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 4294812279) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 17334275) !== 0) || _la===123 || _la===128) {
	            this.state = 441;
	            this.classBodyDeclaration();
	            this.state = 446;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 447;
	        this.match(JavaParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceBody() {
	    let localctx = new InterfaceBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, JavaParser.RULE_interfaceBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 449;
	        this.match(JavaParser.LBRACE);
	        this.state = 453;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2014663466) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 4294812279) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 17301507) !== 0) || _la===123 || _la===128) {
	            this.state = 450;
	            this.interfaceBodyDeclaration();
	            this.state = 455;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 456;
	        this.match(JavaParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classBodyDeclaration() {
	    let localctx = new ClassBodyDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, JavaParser.RULE_classBodyDeclaration);
	    var _la = 0;
	    try {
	        this.state = 470;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 458;
	            this.match(JavaParser.SEMI);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 460;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===38) {
	                this.state = 459;
	                this.match(JavaParser.STATIC);
	            }

	            this.state = 462;
	            this.block();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 466;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,36,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 463;
	                    this.modifier(); 
	                }
	                this.state = 468;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,36,this._ctx);
	            }

	            this.state = 469;
	            this.memberDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	memberDeclaration() {
	    let localctx = new MemberDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, JavaParser.RULE_memberDeclaration);
	    try {
	        this.state = 482;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 472;
	            this.methodDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 473;
	            this.genericMethodDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 474;
	            this.fieldDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 475;
	            this.constructorDeclaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 476;
	            this.genericConstructorDeclaration();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 477;
	            this.interfaceDeclaration();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 478;
	            this.annotationTypeDeclaration();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 479;
	            this.classDeclaration();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 480;
	            this.enumDeclaration();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 481;
	            this.recordDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodDeclaration() {
	    let localctx = new MethodDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, JavaParser.RULE_methodDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 484;
	        this.typeTypeOrVoid();
	        this.state = 485;
	        this.identifier();
	        this.state = 486;
	        this.formalParameters();
	        this.state = 491;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===82) {
	            this.state = 487;
	            this.match(JavaParser.LBRACK);
	            this.state = 488;
	            this.match(JavaParser.RBRACK);
	            this.state = 493;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 496;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===45) {
	            this.state = 494;
	            this.match(JavaParser.THROWS);
	            this.state = 495;
	            this.qualifiedNameList();
	        }

	        this.state = 498;
	        this.methodBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodBody() {
	    let localctx = new MethodBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, JavaParser.RULE_methodBody);
	    try {
	        this.state = 502;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 80:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 500;
	            this.block();
	            break;
	        case 84:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 501;
	            this.match(JavaParser.SEMI);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeTypeOrVoid() {
	    let localctx = new TypeTypeOrVoidContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, JavaParser.RULE_typeTypeOrVoid);
	    try {
	        this.state = 506;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 5:
	        case 8:
	        case 14:
	        case 20:
	        case 27:
	        case 29:
	        case 37:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 123:
	        case 128:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 504;
	            this.typeType();
	            break;
	        case 48:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 505;
	            this.match(JavaParser.VOID);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	genericMethodDeclaration() {
	    let localctx = new GenericMethodDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, JavaParser.RULE_genericMethodDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 508;
	        this.typeParameters();
	        this.state = 509;
	        this.methodDeclaration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	genericConstructorDeclaration() {
	    let localctx = new GenericConstructorDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, JavaParser.RULE_genericConstructorDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 511;
	        this.typeParameters();
	        this.state = 512;
	        this.constructorDeclaration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructorDeclaration() {
	    let localctx = new ConstructorDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, JavaParser.RULE_constructorDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 514;
	        this.identifier();
	        this.state = 515;
	        this.formalParameters();
	        this.state = 518;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===45) {
	            this.state = 516;
	            this.match(JavaParser.THROWS);
	            this.state = 517;
	            this.qualifiedNameList();
	        }

	        this.state = 520;
	        localctx.constructorBody = this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldDeclaration() {
	    let localctx = new FieldDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, JavaParser.RULE_fieldDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 522;
	        this.typeType();
	        this.state = 523;
	        this.variableDeclarators();
	        this.state = 524;
	        this.match(JavaParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceBodyDeclaration() {
	    let localctx = new InterfaceBodyDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, JavaParser.RULE_interfaceBodyDeclaration);
	    try {
	        this.state = 534;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 3:
	        case 5:
	        case 8:
	        case 9:
	        case 12:
	        case 14:
	        case 16:
	        case 18:
	        case 20:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 33:
	        case 34:
	        case 35:
	        case 37:
	        case 38:
	        case 39:
	        case 42:
	        case 46:
	        case 48:
	        case 49:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 89:
	        case 123:
	        case 128:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 529;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,44,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 526;
	                    this.modifier(); 
	                }
	                this.state = 531;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,44,this._ctx);
	            }

	            this.state = 532;
	            this.interfaceMemberDeclaration();
	            break;
	        case 84:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 533;
	            this.match(JavaParser.SEMI);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceMemberDeclaration() {
	    let localctx = new InterfaceMemberDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, JavaParser.RULE_interfaceMemberDeclaration);
	    try {
	        this.state = 544;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 536;
	            this.constDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 537;
	            this.interfaceMethodDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 538;
	            this.genericInterfaceMethodDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 539;
	            this.interfaceDeclaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 540;
	            this.annotationTypeDeclaration();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 541;
	            this.classDeclaration();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 542;
	            this.enumDeclaration();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 543;
	            this.recordDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constDeclaration() {
	    let localctx = new ConstDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, JavaParser.RULE_constDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 546;
	        this.typeType();
	        this.state = 547;
	        this.constantDeclarator();
	        this.state = 552;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===85) {
	            this.state = 548;
	            this.match(JavaParser.COMMA);
	            this.state = 549;
	            this.constantDeclarator();
	            this.state = 554;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 555;
	        this.match(JavaParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantDeclarator() {
	    let localctx = new ConstantDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, JavaParser.RULE_constantDeclarator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 557;
	        this.identifier();
	        this.state = 562;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===82) {
	            this.state = 558;
	            this.match(JavaParser.LBRACK);
	            this.state = 559;
	            this.match(JavaParser.RBRACK);
	            this.state = 564;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 565;
	        this.match(JavaParser.ASSIGN);
	        this.state = 566;
	        this.variableInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceMethodDeclaration() {
	    let localctx = new InterfaceMethodDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, JavaParser.RULE_interfaceMethodDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 571;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,49,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 568;
	                this.interfaceMethodModifier(); 
	            }
	            this.state = 573;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,49,this._ctx);
	        }

	        this.state = 574;
	        this.interfaceCommonBodyDeclaration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceMethodModifier() {
	    let localctx = new InterfaceMethodModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, JavaParser.RULE_interfaceMethodModifier);
	    try {
	        this.state = 582;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 123:
	        case 128:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 576;
	            this.annotation();
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 577;
	            this.match(JavaParser.PUBLIC);
	            break;
	        case 1:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 578;
	            this.match(JavaParser.ABSTRACT);
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 579;
	            this.match(JavaParser.DEFAULT);
	            break;
	        case 38:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 580;
	            this.match(JavaParser.STATIC);
	            break;
	        case 39:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 581;
	            this.match(JavaParser.STRICTFP);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	genericInterfaceMethodDeclaration() {
	    let localctx = new GenericInterfaceMethodDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, JavaParser.RULE_genericInterfaceMethodDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 587;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1 || _la===12 || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 2147418137) !== 0) || _la===123 || _la===128) {
	            this.state = 584;
	            this.interfaceMethodModifier();
	            this.state = 589;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 590;
	        this.typeParameters();
	        this.state = 591;
	        this.interfaceCommonBodyDeclaration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceCommonBodyDeclaration() {
	    let localctx = new InterfaceCommonBodyDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, JavaParser.RULE_interfaceCommonBodyDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 596;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,52,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 593;
	                this.annotation(); 
	            }
	            this.state = 598;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,52,this._ctx);
	        }

	        this.state = 599;
	        this.typeTypeOrVoid();
	        this.state = 600;
	        this.identifier();
	        this.state = 601;
	        this.formalParameters();
	        this.state = 606;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===82) {
	            this.state = 602;
	            this.match(JavaParser.LBRACK);
	            this.state = 603;
	            this.match(JavaParser.RBRACK);
	            this.state = 608;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 611;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===45) {
	            this.state = 609;
	            this.match(JavaParser.THROWS);
	            this.state = 610;
	            this.qualifiedNameList();
	        }

	        this.state = 613;
	        this.methodBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclarators() {
	    let localctx = new VariableDeclaratorsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, JavaParser.RULE_variableDeclarators);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 615;
	        this.variableDeclarator();
	        this.state = 620;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===85) {
	            this.state = 616;
	            this.match(JavaParser.COMMA);
	            this.state = 617;
	            this.variableDeclarator();
	            this.state = 622;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclarator() {
	    let localctx = new VariableDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, JavaParser.RULE_variableDeclarator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 623;
	        this.variableDeclaratorId();
	        this.state = 626;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===87) {
	            this.state = 624;
	            this.match(JavaParser.ASSIGN);
	            this.state = 625;
	            this.variableInitializer();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclaratorId() {
	    let localctx = new VariableDeclaratorIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, JavaParser.RULE_variableDeclaratorId);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 628;
	        this.identifier();
	        this.state = 633;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===82) {
	            this.state = 629;
	            this.match(JavaParser.LBRACK);
	            this.state = 630;
	            this.match(JavaParser.RBRACK);
	            this.state = 635;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableInitializer() {
	    let localctx = new VariableInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, JavaParser.RULE_variableInitializer);
	    try {
	        this.state = 638;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 80:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 636;
	            this.arrayInitializer();
	            break;
	        case 3:
	        case 5:
	        case 8:
	        case 14:
	        case 20:
	        case 27:
	        case 29:
	        case 31:
	        case 37:
	        case 40:
	        case 41:
	        case 43:
	        case 48:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 89:
	        case 90:
	        case 91:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 123:
	        case 128:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 637;
	            this.expression(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayInitializer() {
	    let localctx = new ArrayInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, JavaParser.RULE_arrayInitializer);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 640;
	        this.match(JavaParser.LBRACE);
	        this.state = 652;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 3758082137) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 2154826751) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 138412039) !== 0)) {
	            this.state = 641;
	            this.variableInitializer();
	            this.state = 646;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,59,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 642;
	                    this.match(JavaParser.COMMA);
	                    this.state = 643;
	                    this.variableInitializer(); 
	                }
	                this.state = 648;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,59,this._ctx);
	            }

	            this.state = 650;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===85) {
	                this.state = 649;
	                this.match(JavaParser.COMMA);
	            }

	        }

	        this.state = 654;
	        this.match(JavaParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classOrInterfaceType() {
	    let localctx = new ClassOrInterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, JavaParser.RULE_classOrInterfaceType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 656;
	        this.identifier();
	        this.state = 658;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
	        if(la_===1) {
	            this.state = 657;
	            this.typeArguments();

	        }
	        this.state = 667;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,64,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 660;
	                this.match(JavaParser.DOT);
	                this.state = 661;
	                this.identifier();
	                this.state = 663;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	                if(la_===1) {
	                    this.state = 662;
	                    this.typeArguments();

	                } 
	            }
	            this.state = 669;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,64,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeArgument() {
	    let localctx = new TypeArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, JavaParser.RULE_typeArgument);
	    var _la = 0;
	    try {
	        this.state = 682;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 670;
	            this.typeType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 674;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(((((_la - 51)) & ~0x1f) === 0 && ((1 << (_la - 51)) & 32767) !== 0) || _la===123 || _la===128) {
	                this.state = 671;
	                this.annotation();
	                this.state = 676;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 677;
	            this.match(JavaParser.QUESTION);
	            this.state = 680;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===17 || _la===40) {
	                this.state = 678;
	                _la = this._input.LA(1);
	                if(!(_la===17 || _la===40)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 679;
	                this.typeType();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedNameList() {
	    let localctx = new QualifiedNameListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, JavaParser.RULE_qualifiedNameList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 684;
	        this.qualifiedName();
	        this.state = 689;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===85) {
	            this.state = 685;
	            this.match(JavaParser.COMMA);
	            this.state = 686;
	            this.qualifiedName();
	            this.state = 691;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameters() {
	    let localctx = new FormalParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, JavaParser.RULE_formalParameters);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 692;
	        this.match(JavaParser.LPAREN);
	        this.state = 704;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 694;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 672153896) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 536854529) !== 0) || _la===123 || _la===128) {
	                this.state = 693;
	                this.receiverParameter();
	            }

	            break;

	        case 2:
	            this.state = 696;
	            this.receiverParameter();
	            this.state = 699;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===85) {
	                this.state = 697;
	                this.match(JavaParser.COMMA);
	                this.state = 698;
	                this.formalParameterList();
	            }

	            break;

	        case 3:
	            this.state = 702;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 672416040) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 536854529) !== 0) || _la===123 || _la===128) {
	                this.state = 701;
	                this.formalParameterList();
	            }

	            break;

	        }
	        this.state = 706;
	        this.match(JavaParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	receiverParameter() {
	    let localctx = new ReceiverParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, JavaParser.RULE_receiverParameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 708;
	        this.typeType();
	        this.state = 714;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 51)) & ~0x1f) === 0 && ((1 << (_la - 51)) & 32767) !== 0) || _la===128) {
	            this.state = 709;
	            this.identifier();
	            this.state = 710;
	            this.match(JavaParser.DOT);
	            this.state = 716;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 717;
	        this.match(JavaParser.THIS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameterList() {
	    let localctx = new FormalParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, JavaParser.RULE_formalParameterList);
	    var _la = 0;
	    try {
	        this.state = 732;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 719;
	            this.formalParameter();
	            this.state = 724;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,74,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 720;
	                    this.match(JavaParser.COMMA);
	                    this.state = 721;
	                    this.formalParameter(); 
	                }
	                this.state = 726;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,74,this._ctx);
	            }

	            this.state = 729;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===85) {
	                this.state = 727;
	                this.match(JavaParser.COMMA);
	                this.state = 728;
	                this.lastFormalParameter();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 731;
	            this.lastFormalParameter();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameter() {
	    let localctx = new FormalParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, JavaParser.RULE_formalParameter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 737;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,77,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 734;
	                this.variableModifier(); 
	            }
	            this.state = 739;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,77,this._ctx);
	        }

	        this.state = 740;
	        this.typeType();
	        this.state = 741;
	        this.variableDeclaratorId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lastFormalParameter() {
	    let localctx = new LastFormalParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, JavaParser.RULE_lastFormalParameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 746;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,78,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 743;
	                this.variableModifier(); 
	            }
	            this.state = 748;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,78,this._ctx);
	        }

	        this.state = 749;
	        this.typeType();
	        this.state = 753;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 51)) & ~0x1f) === 0 && ((1 << (_la - 51)) & 32767) !== 0) || _la===123 || _la===128) {
	            this.state = 750;
	            this.annotation();
	            this.state = 755;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 756;
	        this.match(JavaParser.ELLIPSIS);
	        this.state = 757;
	        this.variableDeclaratorId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaLVTIList() {
	    let localctx = new LambdaLVTIListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, JavaParser.RULE_lambdaLVTIList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 759;
	        this.lambdaLVTIParameter();
	        this.state = 764;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===85) {
	            this.state = 760;
	            this.match(JavaParser.COMMA);
	            this.state = 761;
	            this.lambdaLVTIParameter();
	            this.state = 766;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaLVTIParameter() {
	    let localctx = new LambdaLVTIParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, JavaParser.RULE_lambdaLVTIParameter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 770;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,81,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 767;
	                this.variableModifier(); 
	            }
	            this.state = 772;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,81,this._ctx);
	        }

	        this.state = 773;
	        this.match(JavaParser.VAR);
	        this.state = 774;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedName() {
	    let localctx = new QualifiedNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, JavaParser.RULE_qualifiedName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 776;
	        this.identifier();
	        this.state = 781;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,82,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 777;
	                this.match(JavaParser.DOT);
	                this.state = 778;
	                this.identifier(); 
	            }
	            this.state = 783;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,82,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, JavaParser.RULE_literal);
	    try {
	        this.state = 791;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 784;
	            this.integerLiteral();
	            break;
	        case 71:
	        case 72:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 785;
	            this.floatLiteral();
	            break;
	        case 74:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 786;
	            this.match(JavaParser.CHAR_LITERAL);
	            break;
	        case 75:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 787;
	            this.match(JavaParser.STRING_LITERAL);
	            break;
	        case 73:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 788;
	            this.match(JavaParser.BOOL_LITERAL);
	            break;
	        case 77:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 789;
	            this.match(JavaParser.NULL_LITERAL);
	            break;
	        case 76:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 790;
	            this.match(JavaParser.TEXT_BLOCK);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integerLiteral() {
	    let localctx = new IntegerLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, JavaParser.RULE_integerLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 793;
	        _la = this._input.LA(1);
	        if(!(((((_la - 67)) & ~0x1f) === 0 && ((1 << (_la - 67)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	floatLiteral() {
	    let localctx = new FloatLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, JavaParser.RULE_floatLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 795;
	        _la = this._input.LA(1);
	        if(!(_la===71 || _la===72)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	altAnnotationQualifiedName() {
	    let localctx = new AltAnnotationQualifiedNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, JavaParser.RULE_altAnnotationQualifiedName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 802;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 51)) & ~0x1f) === 0 && ((1 << (_la - 51)) & 32767) !== 0) || _la===128) {
	            this.state = 797;
	            this.identifier();
	            this.state = 798;
	            this.match(JavaParser.DOT);
	            this.state = 804;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 805;
	        this.match(JavaParser.AT);
	        this.state = 806;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotation() {
	    let localctx = new AnnotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, JavaParser.RULE_annotation);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 811;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 808;
	            this.match(JavaParser.AT);
	            this.state = 809;
	            this.qualifiedName();
	            break;

	        case 2:
	            this.state = 810;
	            this.altAnnotationQualifiedName();
	            break;

	        }
	        this.state = 819;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===78) {
	            this.state = 813;
	            this.match(JavaParser.LPAREN);
	            this.state = 816;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
	            if(la_===1) {
	                this.state = 814;
	                this.elementValuePairs();

	            } else if(la_===2) {
	                this.state = 815;
	                this.elementValue();

	            }
	            this.state = 818;
	            this.match(JavaParser.RPAREN);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementValuePairs() {
	    let localctx = new ElementValuePairsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, JavaParser.RULE_elementValuePairs);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 821;
	        this.elementValuePair();
	        this.state = 826;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===85) {
	            this.state = 822;
	            this.match(JavaParser.COMMA);
	            this.state = 823;
	            this.elementValuePair();
	            this.state = 828;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementValuePair() {
	    let localctx = new ElementValuePairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, JavaParser.RULE_elementValuePair);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 829;
	        this.identifier();
	        this.state = 830;
	        this.match(JavaParser.ASSIGN);
	        this.state = 831;
	        this.elementValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementValue() {
	    let localctx = new ElementValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, JavaParser.RULE_elementValue);
	    try {
	        this.state = 836;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 833;
	            this.expression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 834;
	            this.annotation();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 835;
	            this.elementValueArrayInitializer();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementValueArrayInitializer() {
	    let localctx = new ElementValueArrayInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, JavaParser.RULE_elementValueArrayInitializer);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 838;
	        this.match(JavaParser.LBRACE);
	        this.state = 847;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 3758082137) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 2154826751) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 138412039) !== 0)) {
	            this.state = 839;
	            this.elementValue();
	            this.state = 844;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,90,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 840;
	                    this.match(JavaParser.COMMA);
	                    this.state = 841;
	                    this.elementValue(); 
	                }
	                this.state = 846;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,90,this._ctx);
	            }

	        }

	        this.state = 850;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===85) {
	            this.state = 849;
	            this.match(JavaParser.COMMA);
	        }

	        this.state = 852;
	        this.match(JavaParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationTypeDeclaration() {
	    let localctx = new AnnotationTypeDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, JavaParser.RULE_annotationTypeDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 854;
	        this.match(JavaParser.AT);
	        this.state = 855;
	        this.match(JavaParser.INTERFACE);
	        this.state = 856;
	        this.identifier();
	        this.state = 857;
	        this.annotationTypeBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationTypeBody() {
	    let localctx = new AnnotationTypeBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, JavaParser.RULE_annotationTypeBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 859;
	        this.match(JavaParser.LBRACE);
	        this.state = 863;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2014659370) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 4294779511) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 524291) !== 0) || _la===123 || _la===128) {
	            this.state = 860;
	            this.annotationTypeElementDeclaration();
	            this.state = 865;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 866;
	        this.match(JavaParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationTypeElementDeclaration() {
	    let localctx = new AnnotationTypeElementDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, JavaParser.RULE_annotationTypeElementDeclaration);
	    try {
	        this.state = 876;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 3:
	        case 5:
	        case 8:
	        case 9:
	        case 14:
	        case 16:
	        case 18:
	        case 20:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 33:
	        case 34:
	        case 35:
	        case 37:
	        case 38:
	        case 39:
	        case 42:
	        case 46:
	        case 49:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 123:
	        case 128:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 871;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,94,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 868;
	                    this.modifier(); 
	                }
	                this.state = 873;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,94,this._ctx);
	            }

	            this.state = 874;
	            this.annotationTypeElementRest();
	            break;
	        case 84:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 875;
	            this.match(JavaParser.SEMI);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationTypeElementRest() {
	    let localctx = new AnnotationTypeElementRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, JavaParser.RULE_annotationTypeElementRest);
	    try {
	        this.state = 902;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 878;
	            this.typeType();
	            this.state = 879;
	            this.annotationMethodOrConstantRest();
	            this.state = 880;
	            this.match(JavaParser.SEMI);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 882;
	            this.classDeclaration();
	            this.state = 884;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
	            if(la_===1) {
	                this.state = 883;
	                this.match(JavaParser.SEMI);

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 886;
	            this.interfaceDeclaration();
	            this.state = 888;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,97,this._ctx);
	            if(la_===1) {
	                this.state = 887;
	                this.match(JavaParser.SEMI);

	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 890;
	            this.enumDeclaration();
	            this.state = 892;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
	            if(la_===1) {
	                this.state = 891;
	                this.match(JavaParser.SEMI);

	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 894;
	            this.annotationTypeDeclaration();
	            this.state = 896;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
	            if(la_===1) {
	                this.state = 895;
	                this.match(JavaParser.SEMI);

	            }
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 898;
	            this.recordDeclaration();
	            this.state = 900;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
	            if(la_===1) {
	                this.state = 899;
	                this.match(JavaParser.SEMI);

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationMethodOrConstantRest() {
	    let localctx = new AnnotationMethodOrConstantRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, JavaParser.RULE_annotationMethodOrConstantRest);
	    try {
	        this.state = 906;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 904;
	            this.annotationMethodRest();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 905;
	            this.annotationConstantRest();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationMethodRest() {
	    let localctx = new AnnotationMethodRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, JavaParser.RULE_annotationMethodRest);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 908;
	        this.identifier();
	        this.state = 909;
	        this.match(JavaParser.LPAREN);
	        this.state = 910;
	        this.match(JavaParser.RPAREN);
	        this.state = 912;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===12) {
	            this.state = 911;
	            this.defaultValue();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationConstantRest() {
	    let localctx = new AnnotationConstantRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, JavaParser.RULE_annotationConstantRest);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 914;
	        this.variableDeclarators();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultValue() {
	    let localctx = new DefaultValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, JavaParser.RULE_defaultValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 916;
	        this.match(JavaParser.DEFAULT);
	        this.state = 917;
	        this.elementValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleDeclaration() {
	    let localctx = new ModuleDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, JavaParser.RULE_moduleDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 920;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===52) {
	            this.state = 919;
	            this.match(JavaParser.OPEN);
	        }

	        this.state = 922;
	        this.match(JavaParser.MODULE);
	        this.state = 923;
	        this.qualifiedName();
	        this.state = 924;
	        this.moduleBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleBody() {
	    let localctx = new ModuleBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, JavaParser.RULE_moduleBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 926;
	        this.match(JavaParser.LBRACE);
	        this.state = 930;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 53)) & ~0x1f) === 0 && ((1 << (_la - 53)) & 55) !== 0)) {
	            this.state = 927;
	            this.moduleDirective();
	            this.state = 932;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 933;
	        this.match(JavaParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleDirective() {
	    let localctx = new ModuleDirectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, JavaParser.RULE_moduleDirective);
	    var _la = 0;
	    try {
	        this.state = 971;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 53:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 935;
	            this.match(JavaParser.REQUIRES);
	            this.state = 939;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,106,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 936;
	                    this.requiresModifier(); 
	                }
	                this.state = 941;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,106,this._ctx);
	            }

	            this.state = 942;
	            this.qualifiedName();
	            this.state = 943;
	            this.match(JavaParser.SEMI);
	            break;
	        case 54:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 945;
	            this.match(JavaParser.EXPORTS);
	            this.state = 946;
	            this.qualifiedName();
	            this.state = 949;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===56) {
	                this.state = 947;
	                this.match(JavaParser.TO);
	                this.state = 948;
	                this.qualifiedName();
	            }

	            this.state = 951;
	            this.match(JavaParser.SEMI);
	            break;
	        case 55:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 953;
	            this.match(JavaParser.OPENS);
	            this.state = 954;
	            this.qualifiedName();
	            this.state = 957;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===56) {
	                this.state = 955;
	                this.match(JavaParser.TO);
	                this.state = 956;
	                this.qualifiedName();
	            }

	            this.state = 959;
	            this.match(JavaParser.SEMI);
	            break;
	        case 57:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 961;
	            this.match(JavaParser.USES);
	            this.state = 962;
	            this.qualifiedName();
	            this.state = 963;
	            this.match(JavaParser.SEMI);
	            break;
	        case 58:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 965;
	            this.match(JavaParser.PROVIDES);
	            this.state = 966;
	            this.qualifiedName();
	            this.state = 967;
	            this.match(JavaParser.WITH);
	            this.state = 968;
	            this.qualifiedName();
	            this.state = 969;
	            this.match(JavaParser.SEMI);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	requiresModifier() {
	    let localctx = new RequiresModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, JavaParser.RULE_requiresModifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 973;
	        _la = this._input.LA(1);
	        if(!(_la===38 || _la===60)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordDeclaration() {
	    let localctx = new RecordDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, JavaParser.RULE_recordDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 975;
	        this.match(JavaParser.RECORD);
	        this.state = 976;
	        this.identifier();
	        this.state = 978;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===89) {
	            this.state = 977;
	            this.typeParameters();
	        }

	        this.state = 980;
	        this.recordHeader();
	        this.state = 983;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 981;
	            this.match(JavaParser.IMPLEMENTS);
	            this.state = 982;
	            this.typeList();
	        }

	        this.state = 985;
	        this.recordBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordHeader() {
	    let localctx = new RecordHeaderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, JavaParser.RULE_recordHeader);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 987;
	        this.match(JavaParser.LPAREN);
	        this.state = 989;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 672153896) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 536854529) !== 0) || _la===123 || _la===128) {
	            this.state = 988;
	            this.recordComponentList();
	        }

	        this.state = 991;
	        this.match(JavaParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordComponentList() {
	    let localctx = new RecordComponentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, JavaParser.RULE_recordComponentList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 993;
	        this.recordComponent();
	        this.state = 998;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===85) {
	            this.state = 994;
	            this.match(JavaParser.COMMA);
	            this.state = 995;
	            this.recordComponent();
	            this.state = 1000;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordComponent() {
	    let localctx = new RecordComponentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, JavaParser.RULE_recordComponent);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1001;
	        this.typeType();
	        this.state = 1002;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordBody() {
	    let localctx = new RecordBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, JavaParser.RULE_recordBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1004;
	        this.match(JavaParser.LBRACE);
	        this.state = 1008;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2014659370) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 4294812279) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 17334275) !== 0) || _la===123 || _la===128) {
	            this.state = 1005;
	            this.classBodyDeclaration();
	            this.state = 1010;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1011;
	        this.match(JavaParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block() {
	    let localctx = new BlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, JavaParser.RULE_block);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1013;
	        this.match(JavaParser.LBRACE);
	        this.state = 1017;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 3094637374) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 4294889471) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 118013951) !== 0) || ((((_la - 100)) & ~0x1f) === 0 && ((1 << (_la - 100)) & 276824079) !== 0)) {
	            this.state = 1014;
	            this.blockStatement();
	            this.state = 1019;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1020;
	        this.match(JavaParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blockStatement() {
	    let localctx = new BlockStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, JavaParser.RULE_blockStatement);
	    try {
	        this.state = 1027;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1022;
	            this.localVariableDeclaration();
	            this.state = 1023;
	            this.match(JavaParser.SEMI);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1025;
	            this.statement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1026;
	            this.localTypeDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localVariableDeclaration() {
	    let localctx = new LocalVariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, JavaParser.RULE_localVariableDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1032;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,117,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1029;
	                this.variableModifier(); 
	            }
	            this.state = 1034;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,117,this._ctx);
	        }

	        this.state = 1043;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1035;
	            this.typeType();
	            this.state = 1036;
	            this.variableDeclarators();
	            break;

	        case 2:
	            this.state = 1038;
	            this.match(JavaParser.VAR);
	            this.state = 1039;
	            this.identifier();
	            this.state = 1040;
	            this.match(JavaParser.ASSIGN);
	            this.state = 1041;
	            this.expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, JavaParser.RULE_identifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1045;
	        _la = this._input.LA(1);
	        if(!(((((_la - 51)) & ~0x1f) === 0 && ((1 << (_la - 51)) & 32767) !== 0) || _la===128)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localTypeDeclaration() {
	    let localctx = new LocalTypeDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, JavaParser.RULE_localTypeDeclaration);
	    try {
	        this.state = 1059;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 9:
	        case 18:
	        case 28:
	        case 33:
	        case 34:
	        case 35:
	        case 38:
	        case 39:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 123:
	        case 128:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1050;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,119,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1047;
	                    this.classOrInterfaceModifier(); 
	                }
	                this.state = 1052;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,119,this._ctx);
	            }

	            this.state = 1056;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 9:
	                this.state = 1053;
	                this.classDeclaration();
	                break;
	            case 28:
	                this.state = 1054;
	                this.interfaceDeclaration();
	                break;
	            case 63:
	                this.state = 1055;
	                this.recordDeclaration();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 84:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1058;
	            this.match(JavaParser.SEMI);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, JavaParser.RULE_statement);
	    var _la = 0;
	    try {
	        this.state = 1174;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,135,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1061;
	            localctx.blockLabel = this.block();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1062;
	            this.match(JavaParser.ASSERT);
	            this.state = 1063;
	            this.expression(0);
	            this.state = 1066;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===93) {
	                this.state = 1064;
	                this.match(JavaParser.COLON);
	                this.state = 1065;
	                this.expression(0);
	            }

	            this.state = 1068;
	            this.match(JavaParser.SEMI);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1070;
	            this.match(JavaParser.IF);
	            this.state = 1071;
	            this.parExpression();
	            this.state = 1072;
	            this.statement();
	            this.state = 1075;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
	            if(la_===1) {
	                this.state = 1073;
	                this.match(JavaParser.ELSE);
	                this.state = 1074;
	                this.statement();

	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1077;
	            this.match(JavaParser.FOR);
	            this.state = 1078;
	            this.match(JavaParser.LPAREN);
	            this.state = 1079;
	            this.forControl();
	            this.state = 1080;
	            this.match(JavaParser.RPAREN);
	            this.state = 1081;
	            this.statement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1083;
	            this.match(JavaParser.WHILE);
	            this.state = 1084;
	            this.parExpression();
	            this.state = 1085;
	            this.statement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1087;
	            this.match(JavaParser.DO);
	            this.state = 1088;
	            this.statement();
	            this.state = 1089;
	            this.match(JavaParser.WHILE);
	            this.state = 1090;
	            this.parExpression();
	            this.state = 1091;
	            this.match(JavaParser.SEMI);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1093;
	            this.match(JavaParser.TRY);
	            this.state = 1094;
	            this.block();
	            this.state = 1104;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 7:
	                this.state = 1096; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                do {
	                    this.state = 1095;
	                    this.catchClause();
	                    this.state = 1098; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                } while(_la===7);
	                this.state = 1101;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===19) {
	                    this.state = 1100;
	                    this.finallyBlock();
	                }

	                break;
	            case 19:
	                this.state = 1103;
	                this.finallyBlock();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1106;
	            this.match(JavaParser.TRY);
	            this.state = 1107;
	            this.resourceSpecification();
	            this.state = 1108;
	            this.block();
	            this.state = 1112;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===7) {
	                this.state = 1109;
	                this.catchClause();
	                this.state = 1114;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1116;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===19) {
	                this.state = 1115;
	                this.finallyBlock();
	            }

	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1118;
	            this.match(JavaParser.SWITCH);
	            this.state = 1119;
	            this.parExpression();
	            this.state = 1120;
	            this.match(JavaParser.LBRACE);
	            this.state = 1124;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,129,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1121;
	                    this.switchBlockStatementGroup(); 
	                }
	                this.state = 1126;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,129,this._ctx);
	            }

	            this.state = 1130;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===6 || _la===12) {
	                this.state = 1127;
	                this.switchLabel();
	                this.state = 1132;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1133;
	            this.match(JavaParser.RBRACE);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1135;
	            this.match(JavaParser.SYNCHRONIZED);
	            this.state = 1136;
	            this.parExpression();
	            this.state = 1137;
	            this.block();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1139;
	            this.match(JavaParser.RETURN);
	            this.state = 1141;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 3758082137) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 2154824703) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 138412039) !== 0)) {
	                this.state = 1140;
	                this.expression(0);
	            }

	            this.state = 1143;
	            this.match(JavaParser.SEMI);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1144;
	            this.match(JavaParser.THROW);
	            this.state = 1145;
	            this.expression(0);
	            this.state = 1146;
	            this.match(JavaParser.SEMI);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1148;
	            this.match(JavaParser.BREAK);
	            this.state = 1150;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 51)) & ~0x1f) === 0 && ((1 << (_la - 51)) & 32767) !== 0) || _la===128) {
	                this.state = 1149;
	                this.identifier();
	            }

	            this.state = 1152;
	            this.match(JavaParser.SEMI);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1153;
	            this.match(JavaParser.CONTINUE);
	            this.state = 1155;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 51)) & ~0x1f) === 0 && ((1 << (_la - 51)) & 32767) !== 0) || _la===128) {
	                this.state = 1154;
	                this.identifier();
	            }

	            this.state = 1157;
	            this.match(JavaParser.SEMI);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1158;
	            this.match(JavaParser.YIELD);
	            this.state = 1159;
	            this.expression(0);
	            this.state = 1160;
	            this.match(JavaParser.SEMI);
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1162;
	            this.match(JavaParser.SEMI);
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1163;
	            localctx.statementExpression = this.expression(0);
	            this.state = 1164;
	            this.match(JavaParser.SEMI);
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1166;
	            this.switchExpression();
	            this.state = 1168;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,134,this._ctx);
	            if(la_===1) {
	                this.state = 1167;
	                this.match(JavaParser.SEMI);

	            }
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 1170;
	            localctx.identifierLabel = this.identifier();
	            this.state = 1171;
	            this.match(JavaParser.COLON);
	            this.state = 1172;
	            this.statement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catchClause() {
	    let localctx = new CatchClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, JavaParser.RULE_catchClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1176;
	        this.match(JavaParser.CATCH);
	        this.state = 1177;
	        this.match(JavaParser.LPAREN);
	        this.state = 1181;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,136,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1178;
	                this.variableModifier(); 
	            }
	            this.state = 1183;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,136,this._ctx);
	        }

	        this.state = 1184;
	        this.catchType();
	        this.state = 1185;
	        this.identifier();
	        this.state = 1186;
	        this.match(JavaParser.RPAREN);
	        this.state = 1187;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catchType() {
	    let localctx = new CatchTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, JavaParser.RULE_catchType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1189;
	        this.qualifiedName();
	        this.state = 1194;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===107) {
	            this.state = 1190;
	            this.match(JavaParser.BITOR);
	            this.state = 1191;
	            this.qualifiedName();
	            this.state = 1196;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	finallyBlock() {
	    let localctx = new FinallyBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, JavaParser.RULE_finallyBlock);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1197;
	        this.match(JavaParser.FINALLY);
	        this.state = 1198;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resourceSpecification() {
	    let localctx = new ResourceSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, JavaParser.RULE_resourceSpecification);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1200;
	        this.match(JavaParser.LPAREN);
	        this.state = 1201;
	        this.resources();
	        this.state = 1203;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===84) {
	            this.state = 1202;
	            this.match(JavaParser.SEMI);
	        }

	        this.state = 1205;
	        this.match(JavaParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resources() {
	    let localctx = new ResourcesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, JavaParser.RULE_resources);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1207;
	        this.resource();
	        this.state = 1212;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,139,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1208;
	                this.match(JavaParser.SEMI);
	                this.state = 1209;
	                this.resource(); 
	            }
	            this.state = 1214;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,139,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resource() {
	    let localctx = new ResourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, JavaParser.RULE_resource);
	    try {
	        this.state = 1232;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,142,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1218;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,140,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1215;
	                    this.variableModifier(); 
	                }
	                this.state = 1220;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,140,this._ctx);
	            }

	            this.state = 1226;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1221;
	                this.classOrInterfaceType();
	                this.state = 1222;
	                this.variableDeclaratorId();
	                break;

	            case 2:
	                this.state = 1224;
	                this.match(JavaParser.VAR);
	                this.state = 1225;
	                this.identifier();
	                break;

	            }
	            this.state = 1228;
	            this.match(JavaParser.ASSIGN);
	            this.state = 1229;
	            this.expression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1231;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchBlockStatementGroup() {
	    let localctx = new SwitchBlockStatementGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, JavaParser.RULE_switchBlockStatementGroup);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1235; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1234;
	            this.switchLabel();
	            this.state = 1237; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===6 || _la===12);
	        this.state = 1240; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1239;
	            this.blockStatement();
	            this.state = 1242; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) === 0 && ((1 << _la) & 3094637374) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 4294889471) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 118013951) !== 0) || ((((_la - 100)) & ~0x1f) === 0 && ((1 << (_la - 100)) & 276824079) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchLabel() {
	    let localctx = new SwitchLabelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, JavaParser.RULE_switchLabel);
	    try {
	        this.state = 1255;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 6:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1244;
	            this.match(JavaParser.CASE);
	            this.state = 1250;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,145,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1245;
	                localctx.constantExpression = this.expression(0);
	                break;

	            case 2:
	                this.state = 1246;
	                localctx.enumConstantName = this.match(JavaParser.IDENTIFIER);
	                break;

	            case 3:
	                this.state = 1247;
	                this.typeType();
	                this.state = 1248;
	                localctx.varName = this.identifier();
	                break;

	            }
	            this.state = 1252;
	            this.match(JavaParser.COLON);
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1253;
	            this.match(JavaParser.DEFAULT);
	            this.state = 1254;
	            this.match(JavaParser.COLON);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forControl() {
	    let localctx = new ForControlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, JavaParser.RULE_forControl);
	    var _la = 0;
	    try {
	        this.state = 1269;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,150,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1257;
	            this.enhancedForControl();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1259;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819899688) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 3758082137) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 2154824703) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 138412039) !== 0)) {
	                this.state = 1258;
	                this.forInit();
	            }

	            this.state = 1261;
	            this.match(JavaParser.SEMI);
	            this.state = 1263;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 3758082137) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 2154824703) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 138412039) !== 0)) {
	                this.state = 1262;
	                this.expression(0);
	            }

	            this.state = 1265;
	            this.match(JavaParser.SEMI);
	            this.state = 1267;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 3758082137) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 2154824703) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 138412039) !== 0)) {
	                this.state = 1266;
	                localctx.forUpdate = this.expressionList();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forInit() {
	    let localctx = new ForInitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, JavaParser.RULE_forInit);
	    try {
	        this.state = 1273;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,151,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1271;
	            this.localVariableDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1272;
	            this.expressionList();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enhancedForControl() {
	    let localctx = new EnhancedForControlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, JavaParser.RULE_enhancedForControl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1278;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,152,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1275;
	                this.variableModifier(); 
	            }
	            this.state = 1280;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,152,this._ctx);
	        }

	        this.state = 1283;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,153,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1281;
	            this.typeType();
	            break;

	        case 2:
	            this.state = 1282;
	            this.match(JavaParser.VAR);
	            break;

	        }
	        this.state = 1285;
	        this.variableDeclaratorId();
	        this.state = 1286;
	        this.match(JavaParser.COLON);
	        this.state = 1287;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parExpression() {
	    let localctx = new ParExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, JavaParser.RULE_parExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1289;
	        this.match(JavaParser.LPAREN);
	        this.state = 1290;
	        this.expression(0);
	        this.state = 1291;
	        this.match(JavaParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionList() {
	    let localctx = new ExpressionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, JavaParser.RULE_expressionList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1293;
	        this.expression(0);
	        this.state = 1298;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===85) {
	            this.state = 1294;
	            this.match(JavaParser.COMMA);
	            this.state = 1295;
	            this.expression(0);
	            this.state = 1300;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodCall() {
	    let localctx = new MethodCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, JavaParser.RULE_methodCall);
	    var _la = 0;
	    try {
	        this.state = 1320;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 128:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1301;
	            this.identifier();
	            this.state = 1302;
	            this.match(JavaParser.LPAREN);
	            this.state = 1304;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 3758082137) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 2154824703) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 138412039) !== 0)) {
	                this.state = 1303;
	                this.expressionList();
	            }

	            this.state = 1306;
	            this.match(JavaParser.RPAREN);
	            break;
	        case 43:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1308;
	            this.match(JavaParser.THIS);
	            this.state = 1309;
	            this.match(JavaParser.LPAREN);
	            this.state = 1311;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 3758082137) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 2154824703) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 138412039) !== 0)) {
	                this.state = 1310;
	                this.expressionList();
	            }

	            this.state = 1313;
	            this.match(JavaParser.RPAREN);
	            break;
	        case 40:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1314;
	            this.match(JavaParser.SUPER);
	            this.state = 1315;
	            this.match(JavaParser.LPAREN);
	            this.state = 1317;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 3758082137) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 2154824703) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 138412039) !== 0)) {
	                this.state = 1316;
	                this.expressionList();
	            }

	            this.state = 1319;
	            this.match(JavaParser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 194;
	    this.enterRecursionRule(localctx, 194, JavaParser.RULE_expression, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1367;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,164,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1323;
	            this.primary();
	            break;

	        case 2:
	            this.state = 1324;
	            this.methodCall();
	            break;

	        case 3:
	            this.state = 1325;
	            this.match(JavaParser.NEW);
	            this.state = 1326;
	            this.creator();
	            break;

	        case 4:
	            this.state = 1327;
	            this.match(JavaParser.LPAREN);
	            this.state = 1331;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,159,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1328;
	                    this.annotation(); 
	                }
	                this.state = 1333;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,159,this._ctx);
	            }

	            this.state = 1334;
	            this.typeType();
	            this.state = 1339;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===106) {
	                this.state = 1335;
	                this.match(JavaParser.BITAND);
	                this.state = 1336;
	                this.typeType();
	                this.state = 1341;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1342;
	            this.match(JavaParser.RPAREN);
	            this.state = 1343;
	            this.expression(22);
	            break;

	        case 5:
	            this.state = 1345;
	            localctx.prefix = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 100)) & ~0x1f) === 0 && ((1 << (_la - 100)) & 15) !== 0))) {
	                localctx.prefix = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1346;
	            this.expression(20);
	            break;

	        case 6:
	            this.state = 1347;
	            localctx.prefix = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===90 || _la===91)) {
	                localctx.prefix = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1348;
	            this.expression(19);
	            break;

	        case 7:
	            this.state = 1349;
	            this.lambdaExpression();
	            break;

	        case 8:
	            this.state = 1350;
	            this.switchExpression();
	            break;

	        case 9:
	            this.state = 1351;
	            this.typeType();
	            this.state = 1352;
	            this.match(JavaParser.COLONCOLON);
	            this.state = 1358;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 51:
	            case 52:
	            case 53:
	            case 54:
	            case 55:
	            case 56:
	            case 57:
	            case 58:
	            case 59:
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 64:
	            case 65:
	            case 89:
	            case 128:
	                this.state = 1354;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===89) {
	                    this.state = 1353;
	                    this.typeArguments();
	                }

	                this.state = 1356;
	                this.identifier();
	                break;
	            case 31:
	                this.state = 1357;
	                this.match(JavaParser.NEW);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 10:
	            this.state = 1360;
	            this.classType();
	            this.state = 1361;
	            this.match(JavaParser.COLONCOLON);
	            this.state = 1363;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===89) {
	                this.state = 1362;
	                this.typeArguments();
	            }

	            this.state = 1365;
	            this.match(JavaParser.NEW);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1452;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,171,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 1450;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1369;
	                    if (!( this.precpred(this._ctx, 18))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
	                    }
	                    this.state = 1370;
	                    localctx.bop = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 104)) & ~0x1f) === 0 && ((1 << (_la - 104)) & 35) !== 0))) {
	                        localctx.bop = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1371;
	                    this.expression(19);
	                    break;

	                case 2:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1372;
	                    if (!( this.precpred(this._ctx, 17))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
	                    }
	                    this.state = 1373;
	                    localctx.bop = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===102 || _la===103)) {
	                        localctx.bop = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1374;
	                    this.expression(18);
	                    break;

	                case 3:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1375;
	                    if (!( this.precpred(this._ctx, 16))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
	                    }
	                    this.state = 1383;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 1376;
	                        this.match(JavaParser.LT);
	                        this.state = 1377;
	                        this.match(JavaParser.LT);
	                        break;

	                    case 2:
	                        this.state = 1378;
	                        this.match(JavaParser.GT);
	                        this.state = 1379;
	                        this.match(JavaParser.GT);
	                        this.state = 1380;
	                        this.match(JavaParser.GT);
	                        break;

	                    case 3:
	                        this.state = 1381;
	                        this.match(JavaParser.GT);
	                        this.state = 1382;
	                        this.match(JavaParser.GT);
	                        break;

	                    }
	                    this.state = 1385;
	                    this.expression(17);
	                    break;

	                case 4:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1386;
	                    if (!( this.precpred(this._ctx, 15))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
	                    }
	                    this.state = 1387;
	                    localctx.bop = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 88)) & ~0x1f) === 0 && ((1 << (_la - 88)) & 387) !== 0))) {
	                        localctx.bop = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1388;
	                    this.expression(16);
	                    break;

	                case 5:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1389;
	                    if (!( this.precpred(this._ctx, 13))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                    }
	                    this.state = 1390;
	                    localctx.bop = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===94 || _la===97)) {
	                        localctx.bop = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1391;
	                    this.expression(14);
	                    break;

	                case 6:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1392;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 1393;
	                    localctx.bop = this.match(JavaParser.BITAND);
	                    this.state = 1394;
	                    this.expression(13);
	                    break;

	                case 7:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1395;
	                    if (!( this.precpred(this._ctx, 11))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
	                    }
	                    this.state = 1396;
	                    localctx.bop = this.match(JavaParser.CARET);
	                    this.state = 1397;
	                    this.expression(12);
	                    break;

	                case 8:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1398;
	                    if (!( this.precpred(this._ctx, 10))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
	                    }
	                    this.state = 1399;
	                    localctx.bop = this.match(JavaParser.BITOR);
	                    this.state = 1400;
	                    this.expression(11);
	                    break;

	                case 9:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1401;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 1402;
	                    localctx.bop = this.match(JavaParser.AND);
	                    this.state = 1403;
	                    this.expression(10);
	                    break;

	                case 10:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1404;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 1405;
	                    localctx.bop = this.match(JavaParser.OR);
	                    this.state = 1406;
	                    this.expression(9);
	                    break;

	                case 11:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1407;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 1408;
	                    localctx.bop = this.match(JavaParser.QUESTION);
	                    this.state = 1409;
	                    this.expression(0);
	                    this.state = 1410;
	                    this.match(JavaParser.COLON);
	                    this.state = 1411;
	                    this.expression(7);
	                    break;

	                case 12:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1413;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 1414;
	                    localctx.bop = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 87)) & ~0x1f) === 0 && ((1 << (_la - 87)) & 4286578689) !== 0) || _la===119 || _la===120)) {
	                        localctx.bop = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1415;
	                    this.expression(6);
	                    break;

	                case 13:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1416;
	                    if (!( this.precpred(this._ctx, 26))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
	                    }
	                    this.state = 1417;
	                    localctx.bop = this.match(JavaParser.DOT);
	                    this.state = 1429;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,167,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 1418;
	                        this.identifier();
	                        break;

	                    case 2:
	                        this.state = 1419;
	                        this.methodCall();
	                        break;

	                    case 3:
	                        this.state = 1420;
	                        this.match(JavaParser.THIS);
	                        break;

	                    case 4:
	                        this.state = 1421;
	                        this.match(JavaParser.NEW);
	                        this.state = 1423;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        if(_la===89) {
	                            this.state = 1422;
	                            this.nonWildcardTypeArguments();
	                        }

	                        this.state = 1425;
	                        this.innerCreator();
	                        break;

	                    case 5:
	                        this.state = 1426;
	                        this.match(JavaParser.SUPER);
	                        this.state = 1427;
	                        this.superSuffix();
	                        break;

	                    case 6:
	                        this.state = 1428;
	                        this.explicitGenericInvocation();
	                        break;

	                    }
	                    break;

	                case 14:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1431;
	                    if (!( this.precpred(this._ctx, 25))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
	                    }
	                    this.state = 1432;
	                    this.match(JavaParser.LBRACK);
	                    this.state = 1433;
	                    this.expression(0);
	                    this.state = 1434;
	                    this.match(JavaParser.RBRACK);
	                    break;

	                case 15:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1436;
	                    if (!( this.precpred(this._ctx, 21))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
	                    }
	                    this.state = 1437;
	                    localctx.postfix = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===100 || _la===101)) {
	                        localctx.postfix = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    break;

	                case 16:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1438;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 1439;
	                    localctx.bop = this.match(JavaParser.INSTANCEOF);
	                    this.state = 1442;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,168,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 1440;
	                        this.typeType();
	                        break;

	                    case 2:
	                        this.state = 1441;
	                        this.pattern();
	                        break;

	                    }
	                    break;

	                case 17:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1444;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 1445;
	                    this.match(JavaParser.COLONCOLON);
	                    this.state = 1447;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===89) {
	                        this.state = 1446;
	                        this.typeArguments();
	                    }

	                    this.state = 1449;
	                    this.identifier();
	                    break;

	                } 
	            }
	            this.state = 1454;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,171,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	pattern() {
	    let localctx = new PatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, JavaParser.RULE_pattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1458;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,172,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1455;
	                this.variableModifier(); 
	            }
	            this.state = 1460;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,172,this._ctx);
	        }

	        this.state = 1461;
	        this.typeType();
	        this.state = 1465;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,173,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1462;
	                this.annotation(); 
	            }
	            this.state = 1467;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,173,this._ctx);
	        }

	        this.state = 1468;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaExpression() {
	    let localctx = new LambdaExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, JavaParser.RULE_lambdaExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1470;
	        this.lambdaParameters();
	        this.state = 1471;
	        this.match(JavaParser.ARROW);
	        this.state = 1472;
	        this.lambdaBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaParameters() {
	    let localctx = new LambdaParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, JavaParser.RULE_lambdaParameters);
	    var _la = 0;
	    try {
	        this.state = 1496;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,177,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1474;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1475;
	            this.match(JavaParser.LPAREN);
	            this.state = 1477;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 672416040) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 536854529) !== 0) || _la===123 || _la===128) {
	                this.state = 1476;
	                this.formalParameterList();
	            }

	            this.state = 1479;
	            this.match(JavaParser.RPAREN);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1480;
	            this.match(JavaParser.LPAREN);
	            this.state = 1481;
	            this.identifier();
	            this.state = 1486;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===85) {
	                this.state = 1482;
	                this.match(JavaParser.COMMA);
	                this.state = 1483;
	                this.identifier();
	                this.state = 1488;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1489;
	            this.match(JavaParser.RPAREN);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1491;
	            this.match(JavaParser.LPAREN);
	            this.state = 1493;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===18 || ((((_la - 51)) & ~0x1f) === 0 && ((1 << (_la - 51)) & 32767) !== 0) || _la===123 || _la===128) {
	                this.state = 1492;
	                this.lambdaLVTIList();
	            }

	            this.state = 1495;
	            this.match(JavaParser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaBody() {
	    let localctx = new LambdaBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, JavaParser.RULE_lambdaBody);
	    try {
	        this.state = 1500;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 5:
	        case 8:
	        case 14:
	        case 20:
	        case 27:
	        case 29:
	        case 31:
	        case 37:
	        case 40:
	        case 41:
	        case 43:
	        case 48:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 89:
	        case 90:
	        case 91:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 123:
	        case 128:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1498;
	            this.expression(0);
	            break;
	        case 80:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1499;
	            this.block();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primary() {
	    let localctx = new PrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, JavaParser.RULE_primary);
	    try {
	        this.state = 1520;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,180,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1502;
	            this.match(JavaParser.LPAREN);
	            this.state = 1503;
	            this.expression(0);
	            this.state = 1504;
	            this.match(JavaParser.RPAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1506;
	            this.match(JavaParser.THIS);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1507;
	            this.match(JavaParser.SUPER);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1508;
	            this.literal();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1509;
	            this.identifier();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1510;
	            this.typeTypeOrVoid();
	            this.state = 1511;
	            this.match(JavaParser.DOT);
	            this.state = 1512;
	            this.match(JavaParser.CLASS);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1514;
	            this.nonWildcardTypeArguments();
	            this.state = 1518;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 40:
	            case 51:
	            case 52:
	            case 53:
	            case 54:
	            case 55:
	            case 56:
	            case 57:
	            case 58:
	            case 59:
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 64:
	            case 65:
	            case 128:
	                this.state = 1515;
	                this.explicitGenericInvocationSuffix();
	                break;
	            case 43:
	                this.state = 1516;
	                this.match(JavaParser.THIS);
	                this.state = 1517;
	                this.arguments();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchExpression() {
	    let localctx = new SwitchExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, JavaParser.RULE_switchExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1522;
	        this.match(JavaParser.SWITCH);
	        this.state = 1523;
	        this.parExpression();
	        this.state = 1524;
	        this.match(JavaParser.LBRACE);
	        this.state = 1528;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6 || _la===12) {
	            this.state = 1525;
	            this.switchLabeledRule();
	            this.state = 1530;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1531;
	        this.match(JavaParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchLabeledRule() {
	    let localctx = new SwitchLabeledRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, JavaParser.RULE_switchLabeledRule);
	    var _la = 0;
	    try {
	        this.state = 1544;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 6:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1533;
	            this.match(JavaParser.CASE);
	            this.state = 1537;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,182,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1534;
	                this.expressionList();
	                break;

	            case 2:
	                this.state = 1535;
	                this.match(JavaParser.NULL_LITERAL);
	                break;

	            case 3:
	                this.state = 1536;
	                this.guardedPattern(0);
	                break;

	            }
	            this.state = 1539;
	            _la = this._input.LA(1);
	            if(!(_la===93 || _la===121)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1540;
	            this.switchRuleOutcome();
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1541;
	            this.match(JavaParser.DEFAULT);
	            this.state = 1542;
	            _la = this._input.LA(1);
	            if(!(_la===93 || _la===121)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1543;
	            this.switchRuleOutcome();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	guardedPattern(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new GuardedPatternContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 210;
	    this.enterRecursionRule(localctx, 210, JavaParser.RULE_guardedPattern, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1572;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 78:
	            this.state = 1547;
	            this.match(JavaParser.LPAREN);
	            this.state = 1548;
	            this.guardedPattern(0);
	            this.state = 1549;
	            this.match(JavaParser.RPAREN);
	            break;
	        case 3:
	        case 5:
	        case 8:
	        case 14:
	        case 18:
	        case 20:
	        case 27:
	        case 29:
	        case 37:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 123:
	        case 128:
	            this.state = 1554;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,184,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1551;
	                    this.variableModifier(); 
	                }
	                this.state = 1556;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,184,this._ctx);
	            }

	            this.state = 1557;
	            this.typeType();
	            this.state = 1561;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,185,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1558;
	                    this.annotation(); 
	                }
	                this.state = 1563;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,185,this._ctx);
	            }

	            this.state = 1564;
	            this.identifier();
	            this.state = 1569;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,186,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1565;
	                    this.match(JavaParser.AND);
	                    this.state = 1566;
	                    this.expression(0); 
	                }
	                this.state = 1571;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,186,this._ctx);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1579;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,188,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new GuardedPatternContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_guardedPattern);
	                this.state = 1574;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1575;
	                this.match(JavaParser.AND);
	                this.state = 1576;
	                this.expression(0); 
	            }
	            this.state = 1581;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,188,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	switchRuleOutcome() {
	    let localctx = new SwitchRuleOutcomeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, JavaParser.RULE_switchRuleOutcome);
	    var _la = 0;
	    try {
	        this.state = 1589;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,190,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1582;
	            this.block();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1586;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) === 0 && ((1 << _la) & 3094637374) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 4294889471) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 118013951) !== 0) || ((((_la - 100)) & ~0x1f) === 0 && ((1 << (_la - 100)) & 276824079) !== 0)) {
	                this.state = 1583;
	                this.blockStatement();
	                this.state = 1588;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classType() {
	    let localctx = new ClassTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, JavaParser.RULE_classType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1594;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,191,this._ctx);
	        if(la_===1) {
	            this.state = 1591;
	            this.classOrInterfaceType();
	            this.state = 1592;
	            this.match(JavaParser.DOT);

	        }
	        this.state = 1599;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,192,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1596;
	                this.annotation(); 
	            }
	            this.state = 1601;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,192,this._ctx);
	        }

	        this.state = 1602;
	        this.identifier();
	        this.state = 1604;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===89) {
	            this.state = 1603;
	            this.typeArguments();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	creator() {
	    let localctx = new CreatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, JavaParser.RULE_creator);
	    try {
	        this.state = 1615;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 89:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1606;
	            this.nonWildcardTypeArguments();
	            this.state = 1607;
	            this.createdName();
	            this.state = 1608;
	            this.classCreatorRest();
	            break;
	        case 3:
	        case 5:
	        case 8:
	        case 14:
	        case 20:
	        case 27:
	        case 29:
	        case 37:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 128:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1610;
	            this.createdName();
	            this.state = 1613;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 82:
	                this.state = 1611;
	                this.arrayCreatorRest();
	                break;
	            case 78:
	                this.state = 1612;
	                this.classCreatorRest();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createdName() {
	    let localctx = new CreatedNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, JavaParser.RULE_createdName);
	    var _la = 0;
	    try {
	        this.state = 1632;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 128:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1617;
	            this.identifier();
	            this.state = 1619;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===89) {
	                this.state = 1618;
	                this.typeArgumentsOrDiamond();
	            }

	            this.state = 1628;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===86) {
	                this.state = 1621;
	                this.match(JavaParser.DOT);
	                this.state = 1622;
	                this.identifier();
	                this.state = 1624;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===89) {
	                    this.state = 1623;
	                    this.typeArgumentsOrDiamond();
	                }

	                this.state = 1630;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case 3:
	        case 5:
	        case 8:
	        case 14:
	        case 20:
	        case 27:
	        case 29:
	        case 37:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1631;
	            this.primitiveType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	innerCreator() {
	    let localctx = new InnerCreatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, JavaParser.RULE_innerCreator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1634;
	        this.identifier();
	        this.state = 1636;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===89) {
	            this.state = 1635;
	            this.nonWildcardTypeArgumentsOrDiamond();
	        }

	        this.state = 1638;
	        this.classCreatorRest();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayCreatorRest() {
	    let localctx = new ArrayCreatorRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, JavaParser.RULE_arrayCreatorRest);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1640;
	        this.match(JavaParser.LBRACK);
	        this.state = 1668;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 83:
	            this.state = 1641;
	            this.match(JavaParser.RBRACK);
	            this.state = 1646;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===82) {
	                this.state = 1642;
	                this.match(JavaParser.LBRACK);
	                this.state = 1643;
	                this.match(JavaParser.RBRACK);
	                this.state = 1648;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1649;
	            this.arrayInitializer();
	            break;
	        case 3:
	        case 5:
	        case 8:
	        case 14:
	        case 20:
	        case 27:
	        case 29:
	        case 31:
	        case 37:
	        case 40:
	        case 41:
	        case 43:
	        case 48:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 89:
	        case 90:
	        case 91:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 123:
	        case 128:
	            this.state = 1650;
	            this.expression(0);
	            this.state = 1651;
	            this.match(JavaParser.RBRACK);
	            this.state = 1658;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,202,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1652;
	                    this.match(JavaParser.LBRACK);
	                    this.state = 1653;
	                    this.expression(0);
	                    this.state = 1654;
	                    this.match(JavaParser.RBRACK); 
	                }
	                this.state = 1660;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,202,this._ctx);
	            }

	            this.state = 1665;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,203,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1661;
	                    this.match(JavaParser.LBRACK);
	                    this.state = 1662;
	                    this.match(JavaParser.RBRACK); 
	                }
	                this.state = 1667;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,203,this._ctx);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classCreatorRest() {
	    let localctx = new ClassCreatorRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, JavaParser.RULE_classCreatorRest);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1670;
	        this.arguments();
	        this.state = 1672;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,205,this._ctx);
	        if(la_===1) {
	            this.state = 1671;
	            this.classBody();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explicitGenericInvocation() {
	    let localctx = new ExplicitGenericInvocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, JavaParser.RULE_explicitGenericInvocation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1674;
	        this.nonWildcardTypeArguments();
	        this.state = 1675;
	        this.explicitGenericInvocationSuffix();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeArgumentsOrDiamond() {
	    let localctx = new TypeArgumentsOrDiamondContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, JavaParser.RULE_typeArgumentsOrDiamond);
	    try {
	        this.state = 1680;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,206,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1677;
	            this.match(JavaParser.LT);
	            this.state = 1678;
	            this.match(JavaParser.GT);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1679;
	            this.typeArguments();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonWildcardTypeArgumentsOrDiamond() {
	    let localctx = new NonWildcardTypeArgumentsOrDiamondContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, JavaParser.RULE_nonWildcardTypeArgumentsOrDiamond);
	    try {
	        this.state = 1685;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,207,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1682;
	            this.match(JavaParser.LT);
	            this.state = 1683;
	            this.match(JavaParser.GT);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1684;
	            this.nonWildcardTypeArguments();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonWildcardTypeArguments() {
	    let localctx = new NonWildcardTypeArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, JavaParser.RULE_nonWildcardTypeArguments);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1687;
	        this.match(JavaParser.LT);
	        this.state = 1688;
	        this.typeList();
	        this.state = 1689;
	        this.match(JavaParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeList() {
	    let localctx = new TypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, JavaParser.RULE_typeList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1691;
	        this.typeType();
	        this.state = 1696;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===85) {
	            this.state = 1692;
	            this.match(JavaParser.COMMA);
	            this.state = 1693;
	            this.typeType();
	            this.state = 1698;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeType() {
	    let localctx = new TypeTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, JavaParser.RULE_typeType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1702;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,209,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1699;
	                this.annotation(); 
	            }
	            this.state = 1704;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,209,this._ctx);
	        }

	        this.state = 1707;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 128:
	            this.state = 1705;
	            this.classOrInterfaceType();
	            break;
	        case 3:
	        case 5:
	        case 8:
	        case 14:
	        case 20:
	        case 27:
	        case 29:
	        case 37:
	            this.state = 1706;
	            this.primitiveType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1719;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,212,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1712;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(((((_la - 51)) & ~0x1f) === 0 && ((1 << (_la - 51)) & 32767) !== 0) || _la===123 || _la===128) {
	                    this.state = 1709;
	                    this.annotation();
	                    this.state = 1714;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1715;
	                this.match(JavaParser.LBRACK);
	                this.state = 1716;
	                this.match(JavaParser.RBRACK); 
	            }
	            this.state = 1721;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,212,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveType() {
	    let localctx = new PrimitiveTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, JavaParser.RULE_primitiveType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1722;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 672153896) !== 0) || _la===37)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeArguments() {
	    let localctx = new TypeArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, JavaParser.RULE_typeArguments);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1724;
	        this.match(JavaParser.LT);
	        this.state = 1725;
	        this.typeArgument();
	        this.state = 1730;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===85) {
	            this.state = 1726;
	            this.match(JavaParser.COMMA);
	            this.state = 1727;
	            this.typeArgument();
	            this.state = 1732;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1733;
	        this.match(JavaParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	superSuffix() {
	    let localctx = new SuperSuffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, JavaParser.RULE_superSuffix);
	    var _la = 0;
	    try {
	        this.state = 1744;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 78:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1735;
	            this.arguments();
	            break;
	        case 86:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1736;
	            this.match(JavaParser.DOT);
	            this.state = 1738;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===89) {
	                this.state = 1737;
	                this.typeArguments();
	            }

	            this.state = 1740;
	            this.identifier();
	            this.state = 1742;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,215,this._ctx);
	            if(la_===1) {
	                this.state = 1741;
	                this.arguments();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explicitGenericInvocationSuffix() {
	    let localctx = new ExplicitGenericInvocationSuffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, JavaParser.RULE_explicitGenericInvocationSuffix);
	    try {
	        this.state = 1751;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 40:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1746;
	            this.match(JavaParser.SUPER);
	            this.state = 1747;
	            this.superSuffix();
	            break;
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 128:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1748;
	            this.identifier();
	            this.state = 1749;
	            this.arguments();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arguments() {
	    let localctx = new ArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, JavaParser.RULE_arguments);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1753;
	        this.match(JavaParser.LPAREN);
	        this.state = 1755;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2819637544) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 3758082137) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 2154824703) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 138412039) !== 0)) {
	            this.state = 1754;
	            this.expressionList();
	        }

	        this.state = 1757;
	        this.match(JavaParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

JavaParser.EOF = antlr4.Token.EOF;
JavaParser.ABSTRACT = 1;
JavaParser.ASSERT = 2;
JavaParser.BOOLEAN = 3;
JavaParser.BREAK = 4;
JavaParser.BYTE = 5;
JavaParser.CASE = 6;
JavaParser.CATCH = 7;
JavaParser.CHAR = 8;
JavaParser.CLASS = 9;
JavaParser.CONST = 10;
JavaParser.CONTINUE = 11;
JavaParser.DEFAULT = 12;
JavaParser.DO = 13;
JavaParser.DOUBLE = 14;
JavaParser.ELSE = 15;
JavaParser.ENUM = 16;
JavaParser.EXTENDS = 17;
JavaParser.FINAL = 18;
JavaParser.FINALLY = 19;
JavaParser.FLOAT = 20;
JavaParser.FOR = 21;
JavaParser.IF = 22;
JavaParser.GOTO = 23;
JavaParser.IMPLEMENTS = 24;
JavaParser.IMPORT = 25;
JavaParser.INSTANCEOF = 26;
JavaParser.INT = 27;
JavaParser.INTERFACE = 28;
JavaParser.LONG = 29;
JavaParser.NATIVE = 30;
JavaParser.NEW = 31;
JavaParser.PACKAGE = 32;
JavaParser.PRIVATE = 33;
JavaParser.PROTECTED = 34;
JavaParser.PUBLIC = 35;
JavaParser.RETURN = 36;
JavaParser.SHORT = 37;
JavaParser.STATIC = 38;
JavaParser.STRICTFP = 39;
JavaParser.SUPER = 40;
JavaParser.SWITCH = 41;
JavaParser.SYNCHRONIZED = 42;
JavaParser.THIS = 43;
JavaParser.THROW = 44;
JavaParser.THROWS = 45;
JavaParser.TRANSIENT = 46;
JavaParser.TRY = 47;
JavaParser.VOID = 48;
JavaParser.VOLATILE = 49;
JavaParser.WHILE = 50;
JavaParser.MODULE = 51;
JavaParser.OPEN = 52;
JavaParser.REQUIRES = 53;
JavaParser.EXPORTS = 54;
JavaParser.OPENS = 55;
JavaParser.TO = 56;
JavaParser.USES = 57;
JavaParser.PROVIDES = 58;
JavaParser.WITH = 59;
JavaParser.TRANSITIVE = 60;
JavaParser.VAR = 61;
JavaParser.YIELD = 62;
JavaParser.RECORD = 63;
JavaParser.SEALED = 64;
JavaParser.PERMITS = 65;
JavaParser.NON_SEALED = 66;
JavaParser.DECIMAL_LITERAL = 67;
JavaParser.HEX_LITERAL = 68;
JavaParser.OCT_LITERAL = 69;
JavaParser.BINARY_LITERAL = 70;
JavaParser.FLOAT_LITERAL = 71;
JavaParser.HEX_FLOAT_LITERAL = 72;
JavaParser.BOOL_LITERAL = 73;
JavaParser.CHAR_LITERAL = 74;
JavaParser.STRING_LITERAL = 75;
JavaParser.TEXT_BLOCK = 76;
JavaParser.NULL_LITERAL = 77;
JavaParser.LPAREN = 78;
JavaParser.RPAREN = 79;
JavaParser.LBRACE = 80;
JavaParser.RBRACE = 81;
JavaParser.LBRACK = 82;
JavaParser.RBRACK = 83;
JavaParser.SEMI = 84;
JavaParser.COMMA = 85;
JavaParser.DOT = 86;
JavaParser.ASSIGN = 87;
JavaParser.GT = 88;
JavaParser.LT = 89;
JavaParser.BANG = 90;
JavaParser.TILDE = 91;
JavaParser.QUESTION = 92;
JavaParser.COLON = 93;
JavaParser.EQUAL = 94;
JavaParser.LE = 95;
JavaParser.GE = 96;
JavaParser.NOTEQUAL = 97;
JavaParser.AND = 98;
JavaParser.OR = 99;
JavaParser.INC = 100;
JavaParser.DEC = 101;
JavaParser.ADD = 102;
JavaParser.SUB = 103;
JavaParser.MUL = 104;
JavaParser.DIV = 105;
JavaParser.BITAND = 106;
JavaParser.BITOR = 107;
JavaParser.CARET = 108;
JavaParser.MOD = 109;
JavaParser.ADD_ASSIGN = 110;
JavaParser.SUB_ASSIGN = 111;
JavaParser.MUL_ASSIGN = 112;
JavaParser.DIV_ASSIGN = 113;
JavaParser.AND_ASSIGN = 114;
JavaParser.OR_ASSIGN = 115;
JavaParser.XOR_ASSIGN = 116;
JavaParser.MOD_ASSIGN = 117;
JavaParser.LSHIFT_ASSIGN = 118;
JavaParser.RSHIFT_ASSIGN = 119;
JavaParser.URSHIFT_ASSIGN = 120;
JavaParser.ARROW = 121;
JavaParser.COLONCOLON = 122;
JavaParser.AT = 123;
JavaParser.ELLIPSIS = 124;
JavaParser.WS = 125;
JavaParser.COMMENT = 126;
JavaParser.LINE_COMMENT = 127;
JavaParser.IDENTIFIER = 128;

JavaParser.RULE_compilationUnit = 0;
JavaParser.RULE_packageDeclaration = 1;
JavaParser.RULE_importDeclaration = 2;
JavaParser.RULE_typeDeclaration = 3;
JavaParser.RULE_modifier = 4;
JavaParser.RULE_classOrInterfaceModifier = 5;
JavaParser.RULE_variableModifier = 6;
JavaParser.RULE_classDeclaration = 7;
JavaParser.RULE_typeParameters = 8;
JavaParser.RULE_typeParameter = 9;
JavaParser.RULE_typeBound = 10;
JavaParser.RULE_enumDeclaration = 11;
JavaParser.RULE_enumConstants = 12;
JavaParser.RULE_enumConstant = 13;
JavaParser.RULE_enumBodyDeclarations = 14;
JavaParser.RULE_interfaceDeclaration = 15;
JavaParser.RULE_classBody = 16;
JavaParser.RULE_interfaceBody = 17;
JavaParser.RULE_classBodyDeclaration = 18;
JavaParser.RULE_memberDeclaration = 19;
JavaParser.RULE_methodDeclaration = 20;
JavaParser.RULE_methodBody = 21;
JavaParser.RULE_typeTypeOrVoid = 22;
JavaParser.RULE_genericMethodDeclaration = 23;
JavaParser.RULE_genericConstructorDeclaration = 24;
JavaParser.RULE_constructorDeclaration = 25;
JavaParser.RULE_fieldDeclaration = 26;
JavaParser.RULE_interfaceBodyDeclaration = 27;
JavaParser.RULE_interfaceMemberDeclaration = 28;
JavaParser.RULE_constDeclaration = 29;
JavaParser.RULE_constantDeclarator = 30;
JavaParser.RULE_interfaceMethodDeclaration = 31;
JavaParser.RULE_interfaceMethodModifier = 32;
JavaParser.RULE_genericInterfaceMethodDeclaration = 33;
JavaParser.RULE_interfaceCommonBodyDeclaration = 34;
JavaParser.RULE_variableDeclarators = 35;
JavaParser.RULE_variableDeclarator = 36;
JavaParser.RULE_variableDeclaratorId = 37;
JavaParser.RULE_variableInitializer = 38;
JavaParser.RULE_arrayInitializer = 39;
JavaParser.RULE_classOrInterfaceType = 40;
JavaParser.RULE_typeArgument = 41;
JavaParser.RULE_qualifiedNameList = 42;
JavaParser.RULE_formalParameters = 43;
JavaParser.RULE_receiverParameter = 44;
JavaParser.RULE_formalParameterList = 45;
JavaParser.RULE_formalParameter = 46;
JavaParser.RULE_lastFormalParameter = 47;
JavaParser.RULE_lambdaLVTIList = 48;
JavaParser.RULE_lambdaLVTIParameter = 49;
JavaParser.RULE_qualifiedName = 50;
JavaParser.RULE_literal = 51;
JavaParser.RULE_integerLiteral = 52;
JavaParser.RULE_floatLiteral = 53;
JavaParser.RULE_altAnnotationQualifiedName = 54;
JavaParser.RULE_annotation = 55;
JavaParser.RULE_elementValuePairs = 56;
JavaParser.RULE_elementValuePair = 57;
JavaParser.RULE_elementValue = 58;
JavaParser.RULE_elementValueArrayInitializer = 59;
JavaParser.RULE_annotationTypeDeclaration = 60;
JavaParser.RULE_annotationTypeBody = 61;
JavaParser.RULE_annotationTypeElementDeclaration = 62;
JavaParser.RULE_annotationTypeElementRest = 63;
JavaParser.RULE_annotationMethodOrConstantRest = 64;
JavaParser.RULE_annotationMethodRest = 65;
JavaParser.RULE_annotationConstantRest = 66;
JavaParser.RULE_defaultValue = 67;
JavaParser.RULE_moduleDeclaration = 68;
JavaParser.RULE_moduleBody = 69;
JavaParser.RULE_moduleDirective = 70;
JavaParser.RULE_requiresModifier = 71;
JavaParser.RULE_recordDeclaration = 72;
JavaParser.RULE_recordHeader = 73;
JavaParser.RULE_recordComponentList = 74;
JavaParser.RULE_recordComponent = 75;
JavaParser.RULE_recordBody = 76;
JavaParser.RULE_block = 77;
JavaParser.RULE_blockStatement = 78;
JavaParser.RULE_localVariableDeclaration = 79;
JavaParser.RULE_identifier = 80;
JavaParser.RULE_localTypeDeclaration = 81;
JavaParser.RULE_statement = 82;
JavaParser.RULE_catchClause = 83;
JavaParser.RULE_catchType = 84;
JavaParser.RULE_finallyBlock = 85;
JavaParser.RULE_resourceSpecification = 86;
JavaParser.RULE_resources = 87;
JavaParser.RULE_resource = 88;
JavaParser.RULE_switchBlockStatementGroup = 89;
JavaParser.RULE_switchLabel = 90;
JavaParser.RULE_forControl = 91;
JavaParser.RULE_forInit = 92;
JavaParser.RULE_enhancedForControl = 93;
JavaParser.RULE_parExpression = 94;
JavaParser.RULE_expressionList = 95;
JavaParser.RULE_methodCall = 96;
JavaParser.RULE_expression = 97;
JavaParser.RULE_pattern = 98;
JavaParser.RULE_lambdaExpression = 99;
JavaParser.RULE_lambdaParameters = 100;
JavaParser.RULE_lambdaBody = 101;
JavaParser.RULE_primary = 102;
JavaParser.RULE_switchExpression = 103;
JavaParser.RULE_switchLabeledRule = 104;
JavaParser.RULE_guardedPattern = 105;
JavaParser.RULE_switchRuleOutcome = 106;
JavaParser.RULE_classType = 107;
JavaParser.RULE_creator = 108;
JavaParser.RULE_createdName = 109;
JavaParser.RULE_innerCreator = 110;
JavaParser.RULE_arrayCreatorRest = 111;
JavaParser.RULE_classCreatorRest = 112;
JavaParser.RULE_explicitGenericInvocation = 113;
JavaParser.RULE_typeArgumentsOrDiamond = 114;
JavaParser.RULE_nonWildcardTypeArgumentsOrDiamond = 115;
JavaParser.RULE_nonWildcardTypeArguments = 116;
JavaParser.RULE_typeList = 117;
JavaParser.RULE_typeType = 118;
JavaParser.RULE_primitiveType = 119;
JavaParser.RULE_typeArguments = 120;
JavaParser.RULE_superSuffix = 121;
JavaParser.RULE_explicitGenericInvocationSuffix = 122;
JavaParser.RULE_arguments = 123;

class CompilationUnitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_compilationUnit;
    }

	packageDeclaration() {
	    return this.getTypedRuleContext(PackageDeclarationContext,0);
	};

	importDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ImportDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ImportDeclarationContext,i);
	    }
	};

	typeDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(TypeDeclarationContext,i);
	    }
	};

	moduleDeclaration() {
	    return this.getTypedRuleContext(ModuleDeclarationContext,0);
	};

	EOF() {
	    return this.getToken(JavaParser.EOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterCompilationUnit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitCompilationUnit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitCompilationUnit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PackageDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_packageDeclaration;
    }

	PACKAGE() {
	    return this.getToken(JavaParser.PACKAGE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	SEMI() {
	    return this.getToken(JavaParser.SEMI, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterPackageDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitPackageDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitPackageDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_importDeclaration;
    }

	IMPORT() {
	    return this.getToken(JavaParser.IMPORT, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	SEMI() {
	    return this.getToken(JavaParser.SEMI, 0);
	};

	STATIC() {
	    return this.getToken(JavaParser.STATIC, 0);
	};

	DOT() {
	    return this.getToken(JavaParser.DOT, 0);
	};

	MUL() {
	    return this.getToken(JavaParser.MUL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterImportDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitImportDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitImportDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_typeDeclaration;
    }

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	enumDeclaration() {
	    return this.getTypedRuleContext(EnumDeclarationContext,0);
	};

	interfaceDeclaration() {
	    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
	};

	annotationTypeDeclaration() {
	    return this.getTypedRuleContext(AnnotationTypeDeclarationContext,0);
	};

	recordDeclaration() {
	    return this.getTypedRuleContext(RecordDeclarationContext,0);
	};

	classOrInterfaceModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassOrInterfaceModifierContext);
	    } else {
	        return this.getTypedRuleContext(ClassOrInterfaceModifierContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(JavaParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterTypeDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitTypeDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitTypeDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_modifier;
    }

	classOrInterfaceModifier() {
	    return this.getTypedRuleContext(ClassOrInterfaceModifierContext,0);
	};

	NATIVE() {
	    return this.getToken(JavaParser.NATIVE, 0);
	};

	SYNCHRONIZED() {
	    return this.getToken(JavaParser.SYNCHRONIZED, 0);
	};

	TRANSIENT() {
	    return this.getToken(JavaParser.TRANSIENT, 0);
	};

	VOLATILE() {
	    return this.getToken(JavaParser.VOLATILE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassOrInterfaceModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_classOrInterfaceModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(JavaParser.PUBLIC, 0);
	};

	PROTECTED() {
	    return this.getToken(JavaParser.PROTECTED, 0);
	};

	PRIVATE() {
	    return this.getToken(JavaParser.PRIVATE, 0);
	};

	STATIC() {
	    return this.getToken(JavaParser.STATIC, 0);
	};

	ABSTRACT() {
	    return this.getToken(JavaParser.ABSTRACT, 0);
	};

	FINAL() {
	    return this.getToken(JavaParser.FINAL, 0);
	};

	STRICTFP() {
	    return this.getToken(JavaParser.STRICTFP, 0);
	};

	SEALED() {
	    return this.getToken(JavaParser.SEALED, 0);
	};

	NON_SEALED() {
	    return this.getToken(JavaParser.NON_SEALED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterClassOrInterfaceModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitClassOrInterfaceModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitClassOrInterfaceModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_variableModifier;
    }

	FINAL() {
	    return this.getToken(JavaParser.FINAL, 0);
	};

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterVariableModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitVariableModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitVariableModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_classDeclaration;
    }

	CLASS() {
	    return this.getToken(JavaParser.CLASS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	classBody() {
	    return this.getTypedRuleContext(ClassBodyContext,0);
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	EXTENDS() {
	    return this.getToken(JavaParser.EXTENDS, 0);
	};

	typeType() {
	    return this.getTypedRuleContext(TypeTypeContext,0);
	};

	IMPLEMENTS() {
	    return this.getToken(JavaParser.IMPLEMENTS, 0);
	};

	typeList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeListContext);
	    } else {
	        return this.getTypedRuleContext(TypeListContext,i);
	    }
	};

	PERMITS() {
	    return this.getToken(JavaParser.PERMITS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterClassDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitClassDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitClassDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_typeParameters;
    }

	LT() {
	    return this.getToken(JavaParser.LT, 0);
	};

	typeParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeParameterContext);
	    } else {
	        return this.getTypedRuleContext(TypeParameterContext,i);
	    }
	};

	GT() {
	    return this.getToken(JavaParser.GT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.COMMA);
	    } else {
	        return this.getToken(JavaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterTypeParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitTypeParameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitTypeParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_typeParameter;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	EXTENDS() {
	    return this.getToken(JavaParser.EXTENDS, 0);
	};

	typeBound() {
	    return this.getTypedRuleContext(TypeBoundContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterTypeParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitTypeParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitTypeParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_typeBound;
    }

	typeType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeTypeContext);
	    } else {
	        return this.getTypedRuleContext(TypeTypeContext,i);
	    }
	};

	BITAND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.BITAND);
	    } else {
	        return this.getToken(JavaParser.BITAND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterTypeBound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitTypeBound(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitTypeBound(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_enumDeclaration;
    }

	ENUM() {
	    return this.getToken(JavaParser.ENUM, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LBRACE() {
	    return this.getToken(JavaParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(JavaParser.RBRACE, 0);
	};

	IMPLEMENTS() {
	    return this.getToken(JavaParser.IMPLEMENTS, 0);
	};

	typeList() {
	    return this.getTypedRuleContext(TypeListContext,0);
	};

	enumConstants() {
	    return this.getTypedRuleContext(EnumConstantsContext,0);
	};

	COMMA() {
	    return this.getToken(JavaParser.COMMA, 0);
	};

	enumBodyDeclarations() {
	    return this.getTypedRuleContext(EnumBodyDeclarationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterEnumDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitEnumDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitEnumDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumConstantsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_enumConstants;
    }

	enumConstant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumConstantContext);
	    } else {
	        return this.getTypedRuleContext(EnumConstantContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.COMMA);
	    } else {
	        return this.getToken(JavaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterEnumConstants(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitEnumConstants(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitEnumConstants(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_enumConstant;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	classBody() {
	    return this.getTypedRuleContext(ClassBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterEnumConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitEnumConstant(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitEnumConstant(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumBodyDeclarationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_enumBodyDeclarations;
    }

	SEMI() {
	    return this.getToken(JavaParser.SEMI, 0);
	};

	classBodyDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassBodyDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ClassBodyDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterEnumBodyDeclarations(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitEnumBodyDeclarations(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitEnumBodyDeclarations(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterfaceDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_interfaceDeclaration;
    }

	INTERFACE() {
	    return this.getToken(JavaParser.INTERFACE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	interfaceBody() {
	    return this.getTypedRuleContext(InterfaceBodyContext,0);
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	EXTENDS() {
	    return this.getToken(JavaParser.EXTENDS, 0);
	};

	typeList() {
	    return this.getTypedRuleContext(TypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterInterfaceDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitInterfaceDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitInterfaceDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_classBody;
    }

	LBRACE() {
	    return this.getToken(JavaParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(JavaParser.RBRACE, 0);
	};

	classBodyDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassBodyDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ClassBodyDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterClassBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitClassBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitClassBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterfaceBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_interfaceBody;
    }

	LBRACE() {
	    return this.getToken(JavaParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(JavaParser.RBRACE, 0);
	};

	interfaceBodyDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InterfaceBodyDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(InterfaceBodyDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterInterfaceBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitInterfaceBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitInterfaceBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassBodyDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_classBodyDeclaration;
    }

	SEMI() {
	    return this.getToken(JavaParser.SEMI, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	STATIC() {
	    return this.getToken(JavaParser.STATIC, 0);
	};

	memberDeclaration() {
	    return this.getTypedRuleContext(MemberDeclarationContext,0);
	};

	modifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModifierContext);
	    } else {
	        return this.getTypedRuleContext(ModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterClassBodyDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitClassBodyDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitClassBodyDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MemberDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_memberDeclaration;
    }

	methodDeclaration() {
	    return this.getTypedRuleContext(MethodDeclarationContext,0);
	};

	genericMethodDeclaration() {
	    return this.getTypedRuleContext(GenericMethodDeclarationContext,0);
	};

	fieldDeclaration() {
	    return this.getTypedRuleContext(FieldDeclarationContext,0);
	};

	constructorDeclaration() {
	    return this.getTypedRuleContext(ConstructorDeclarationContext,0);
	};

	genericConstructorDeclaration() {
	    return this.getTypedRuleContext(GenericConstructorDeclarationContext,0);
	};

	interfaceDeclaration() {
	    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
	};

	annotationTypeDeclaration() {
	    return this.getTypedRuleContext(AnnotationTypeDeclarationContext,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	enumDeclaration() {
	    return this.getTypedRuleContext(EnumDeclarationContext,0);
	};

	recordDeclaration() {
	    return this.getTypedRuleContext(RecordDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterMemberDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitMemberDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitMemberDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_methodDeclaration;
    }

	typeTypeOrVoid() {
	    return this.getTypedRuleContext(TypeTypeOrVoidContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	formalParameters() {
	    return this.getTypedRuleContext(FormalParametersContext,0);
	};

	methodBody() {
	    return this.getTypedRuleContext(MethodBodyContext,0);
	};

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.LBRACK);
	    } else {
	        return this.getToken(JavaParser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.RBRACK);
	    } else {
	        return this.getToken(JavaParser.RBRACK, i);
	    }
	};


	THROWS() {
	    return this.getToken(JavaParser.THROWS, 0);
	};

	qualifiedNameList() {
	    return this.getTypedRuleContext(QualifiedNameListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterMethodDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitMethodDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitMethodDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_methodBody;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	SEMI() {
	    return this.getToken(JavaParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterMethodBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitMethodBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitMethodBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeTypeOrVoidContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_typeTypeOrVoid;
    }

	typeType() {
	    return this.getTypedRuleContext(TypeTypeContext,0);
	};

	VOID() {
	    return this.getToken(JavaParser.VOID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterTypeTypeOrVoid(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitTypeTypeOrVoid(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitTypeTypeOrVoid(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GenericMethodDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_genericMethodDeclaration;
    }

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	methodDeclaration() {
	    return this.getTypedRuleContext(MethodDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterGenericMethodDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitGenericMethodDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitGenericMethodDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GenericConstructorDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_genericConstructorDeclaration;
    }

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	constructorDeclaration() {
	    return this.getTypedRuleContext(ConstructorDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterGenericConstructorDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitGenericConstructorDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitGenericConstructorDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstructorDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_constructorDeclaration;
        this.constructorBody = null;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	formalParameters() {
	    return this.getTypedRuleContext(FormalParametersContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	THROWS() {
	    return this.getToken(JavaParser.THROWS, 0);
	};

	qualifiedNameList() {
	    return this.getTypedRuleContext(QualifiedNameListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterConstructorDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitConstructorDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitConstructorDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_fieldDeclaration;
    }

	typeType() {
	    return this.getTypedRuleContext(TypeTypeContext,0);
	};

	variableDeclarators() {
	    return this.getTypedRuleContext(VariableDeclaratorsContext,0);
	};

	SEMI() {
	    return this.getToken(JavaParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterFieldDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitFieldDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitFieldDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterfaceBodyDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_interfaceBodyDeclaration;
    }

	interfaceMemberDeclaration() {
	    return this.getTypedRuleContext(InterfaceMemberDeclarationContext,0);
	};

	modifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModifierContext);
	    } else {
	        return this.getTypedRuleContext(ModifierContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(JavaParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterInterfaceBodyDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitInterfaceBodyDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitInterfaceBodyDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterfaceMemberDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_interfaceMemberDeclaration;
    }

	constDeclaration() {
	    return this.getTypedRuleContext(ConstDeclarationContext,0);
	};

	interfaceMethodDeclaration() {
	    return this.getTypedRuleContext(InterfaceMethodDeclarationContext,0);
	};

	genericInterfaceMethodDeclaration() {
	    return this.getTypedRuleContext(GenericInterfaceMethodDeclarationContext,0);
	};

	interfaceDeclaration() {
	    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
	};

	annotationTypeDeclaration() {
	    return this.getTypedRuleContext(AnnotationTypeDeclarationContext,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	enumDeclaration() {
	    return this.getTypedRuleContext(EnumDeclarationContext,0);
	};

	recordDeclaration() {
	    return this.getTypedRuleContext(RecordDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterInterfaceMemberDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitInterfaceMemberDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitInterfaceMemberDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_constDeclaration;
    }

	typeType() {
	    return this.getTypedRuleContext(TypeTypeContext,0);
	};

	constantDeclarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstantDeclaratorContext);
	    } else {
	        return this.getTypedRuleContext(ConstantDeclaratorContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(JavaParser.SEMI, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.COMMA);
	    } else {
	        return this.getToken(JavaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterConstDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitConstDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitConstDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstantDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_constantDeclarator;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ASSIGN() {
	    return this.getToken(JavaParser.ASSIGN, 0);
	};

	variableInitializer() {
	    return this.getTypedRuleContext(VariableInitializerContext,0);
	};

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.LBRACK);
	    } else {
	        return this.getToken(JavaParser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.RBRACK);
	    } else {
	        return this.getToken(JavaParser.RBRACK, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterConstantDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitConstantDeclarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitConstantDeclarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterfaceMethodDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_interfaceMethodDeclaration;
    }

	interfaceCommonBodyDeclaration() {
	    return this.getTypedRuleContext(InterfaceCommonBodyDeclarationContext,0);
	};

	interfaceMethodModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InterfaceMethodModifierContext);
	    } else {
	        return this.getTypedRuleContext(InterfaceMethodModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterInterfaceMethodDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitInterfaceMethodDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitInterfaceMethodDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterfaceMethodModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_interfaceMethodModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(JavaParser.PUBLIC, 0);
	};

	ABSTRACT() {
	    return this.getToken(JavaParser.ABSTRACT, 0);
	};

	DEFAULT() {
	    return this.getToken(JavaParser.DEFAULT, 0);
	};

	STATIC() {
	    return this.getToken(JavaParser.STATIC, 0);
	};

	STRICTFP() {
	    return this.getToken(JavaParser.STRICTFP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterInterfaceMethodModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitInterfaceMethodModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitInterfaceMethodModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GenericInterfaceMethodDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_genericInterfaceMethodDeclaration;
    }

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	interfaceCommonBodyDeclaration() {
	    return this.getTypedRuleContext(InterfaceCommonBodyDeclarationContext,0);
	};

	interfaceMethodModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InterfaceMethodModifierContext);
	    } else {
	        return this.getTypedRuleContext(InterfaceMethodModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterGenericInterfaceMethodDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitGenericInterfaceMethodDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitGenericInterfaceMethodDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterfaceCommonBodyDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_interfaceCommonBodyDeclaration;
    }

	typeTypeOrVoid() {
	    return this.getTypedRuleContext(TypeTypeOrVoidContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	formalParameters() {
	    return this.getTypedRuleContext(FormalParametersContext,0);
	};

	methodBody() {
	    return this.getTypedRuleContext(MethodBodyContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.LBRACK);
	    } else {
	        return this.getToken(JavaParser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.RBRACK);
	    } else {
	        return this.getToken(JavaParser.RBRACK, i);
	    }
	};


	THROWS() {
	    return this.getToken(JavaParser.THROWS, 0);
	};

	qualifiedNameList() {
	    return this.getTypedRuleContext(QualifiedNameListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterInterfaceCommonBodyDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitInterfaceCommonBodyDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitInterfaceCommonBodyDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableDeclaratorsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_variableDeclarators;
    }

	variableDeclarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableDeclaratorContext);
	    } else {
	        return this.getTypedRuleContext(VariableDeclaratorContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.COMMA);
	    } else {
	        return this.getToken(JavaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterVariableDeclarators(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitVariableDeclarators(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitVariableDeclarators(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_variableDeclarator;
    }

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	ASSIGN() {
	    return this.getToken(JavaParser.ASSIGN, 0);
	};

	variableInitializer() {
	    return this.getTypedRuleContext(VariableInitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterVariableDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitVariableDeclarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitVariableDeclarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableDeclaratorIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_variableDeclaratorId;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.LBRACK);
	    } else {
	        return this.getToken(JavaParser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.RBRACK);
	    } else {
	        return this.getToken(JavaParser.RBRACK, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterVariableDeclaratorId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitVariableDeclaratorId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitVariableDeclaratorId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_variableInitializer;
    }

	arrayInitializer() {
	    return this.getTypedRuleContext(ArrayInitializerContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterVariableInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitVariableInitializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitVariableInitializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_arrayInitializer;
    }

	LBRACE() {
	    return this.getToken(JavaParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(JavaParser.RBRACE, 0);
	};

	variableInitializer = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableInitializerContext);
	    } else {
	        return this.getTypedRuleContext(VariableInitializerContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.COMMA);
	    } else {
	        return this.getToken(JavaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterArrayInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitArrayInitializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitArrayInitializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassOrInterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_classOrInterfaceType;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	typeArguments = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeArgumentsContext);
	    } else {
	        return this.getTypedRuleContext(TypeArgumentsContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.DOT);
	    } else {
	        return this.getToken(JavaParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterClassOrInterfaceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitClassOrInterfaceType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitClassOrInterfaceType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_typeArgument;
    }

	typeType() {
	    return this.getTypedRuleContext(TypeTypeContext,0);
	};

	QUESTION() {
	    return this.getToken(JavaParser.QUESTION, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	EXTENDS() {
	    return this.getToken(JavaParser.EXTENDS, 0);
	};

	SUPER() {
	    return this.getToken(JavaParser.SUPER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterTypeArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitTypeArgument(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitTypeArgument(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QualifiedNameListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_qualifiedNameList;
    }

	qualifiedName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedNameContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedNameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.COMMA);
	    } else {
	        return this.getToken(JavaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterQualifiedNameList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitQualifiedNameList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitQualifiedNameList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FormalParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_formalParameters;
    }

	LPAREN() {
	    return this.getToken(JavaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(JavaParser.RPAREN, 0);
	};

	receiverParameter() {
	    return this.getTypedRuleContext(ReceiverParameterContext,0);
	};

	COMMA() {
	    return this.getToken(JavaParser.COMMA, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterFormalParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitFormalParameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitFormalParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReceiverParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_receiverParameter;
    }

	typeType() {
	    return this.getTypedRuleContext(TypeTypeContext,0);
	};

	THIS() {
	    return this.getToken(JavaParser.THIS, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.DOT);
	    } else {
	        return this.getToken(JavaParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterReceiverParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitReceiverParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitReceiverParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FormalParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_formalParameterList;
    }

	formalParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FormalParameterContext);
	    } else {
	        return this.getTypedRuleContext(FormalParameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.COMMA);
	    } else {
	        return this.getToken(JavaParser.COMMA, i);
	    }
	};


	lastFormalParameter() {
	    return this.getTypedRuleContext(LastFormalParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterFormalParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitFormalParameterList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitFormalParameterList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FormalParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_formalParameter;
    }

	typeType() {
	    return this.getTypedRuleContext(TypeTypeContext,0);
	};

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterFormalParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitFormalParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitFormalParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LastFormalParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_lastFormalParameter;
    }

	typeType() {
	    return this.getTypedRuleContext(TypeTypeContext,0);
	};

	ELLIPSIS() {
	    return this.getToken(JavaParser.ELLIPSIS, 0);
	};

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterLastFormalParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitLastFormalParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitLastFormalParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LambdaLVTIListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_lambdaLVTIList;
    }

	lambdaLVTIParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LambdaLVTIParameterContext);
	    } else {
	        return this.getTypedRuleContext(LambdaLVTIParameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.COMMA);
	    } else {
	        return this.getToken(JavaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterLambdaLVTIList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitLambdaLVTIList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitLambdaLVTIList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LambdaLVTIParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_lambdaLVTIParameter;
    }

	VAR() {
	    return this.getToken(JavaParser.VAR, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterLambdaLVTIParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitLambdaLVTIParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitLambdaLVTIParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QualifiedNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_qualifiedName;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.DOT);
	    } else {
	        return this.getToken(JavaParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterQualifiedName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitQualifiedName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitQualifiedName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_literal;
    }

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	floatLiteral() {
	    return this.getTypedRuleContext(FloatLiteralContext,0);
	};

	CHAR_LITERAL() {
	    return this.getToken(JavaParser.CHAR_LITERAL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(JavaParser.STRING_LITERAL, 0);
	};

	BOOL_LITERAL() {
	    return this.getToken(JavaParser.BOOL_LITERAL, 0);
	};

	NULL_LITERAL() {
	    return this.getToken(JavaParser.NULL_LITERAL, 0);
	};

	TEXT_BLOCK() {
	    return this.getToken(JavaParser.TEXT_BLOCK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntegerLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_integerLiteral;
    }

	DECIMAL_LITERAL() {
	    return this.getToken(JavaParser.DECIMAL_LITERAL, 0);
	};

	HEX_LITERAL() {
	    return this.getToken(JavaParser.HEX_LITERAL, 0);
	};

	OCT_LITERAL() {
	    return this.getToken(JavaParser.OCT_LITERAL, 0);
	};

	BINARY_LITERAL() {
	    return this.getToken(JavaParser.BINARY_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterIntegerLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitIntegerLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitIntegerLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FloatLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_floatLiteral;
    }

	FLOAT_LITERAL() {
	    return this.getToken(JavaParser.FLOAT_LITERAL, 0);
	};

	HEX_FLOAT_LITERAL() {
	    return this.getToken(JavaParser.HEX_FLOAT_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterFloatLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitFloatLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitFloatLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AltAnnotationQualifiedNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_altAnnotationQualifiedName;
    }

	AT() {
	    return this.getToken(JavaParser.AT, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.DOT);
	    } else {
	        return this.getToken(JavaParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterAltAnnotationQualifiedName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitAltAnnotationQualifiedName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitAltAnnotationQualifiedName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnnotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_annotation;
    }

	AT() {
	    return this.getToken(JavaParser.AT, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	altAnnotationQualifiedName() {
	    return this.getTypedRuleContext(AltAnnotationQualifiedNameContext,0);
	};

	LPAREN() {
	    return this.getToken(JavaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(JavaParser.RPAREN, 0);
	};

	elementValuePairs() {
	    return this.getTypedRuleContext(ElementValuePairsContext,0);
	};

	elementValue() {
	    return this.getTypedRuleContext(ElementValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterAnnotation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitAnnotation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitAnnotation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementValuePairsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_elementValuePairs;
    }

	elementValuePair = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementValuePairContext);
	    } else {
	        return this.getTypedRuleContext(ElementValuePairContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.COMMA);
	    } else {
	        return this.getToken(JavaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterElementValuePairs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitElementValuePairs(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitElementValuePairs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementValuePairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_elementValuePair;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ASSIGN() {
	    return this.getToken(JavaParser.ASSIGN, 0);
	};

	elementValue() {
	    return this.getTypedRuleContext(ElementValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterElementValuePair(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitElementValuePair(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitElementValuePair(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_elementValue;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	elementValueArrayInitializer() {
	    return this.getTypedRuleContext(ElementValueArrayInitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterElementValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitElementValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitElementValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementValueArrayInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_elementValueArrayInitializer;
    }

	LBRACE() {
	    return this.getToken(JavaParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(JavaParser.RBRACE, 0);
	};

	elementValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementValueContext);
	    } else {
	        return this.getTypedRuleContext(ElementValueContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.COMMA);
	    } else {
	        return this.getToken(JavaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterElementValueArrayInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitElementValueArrayInitializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitElementValueArrayInitializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnnotationTypeDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_annotationTypeDeclaration;
    }

	AT() {
	    return this.getToken(JavaParser.AT, 0);
	};

	INTERFACE() {
	    return this.getToken(JavaParser.INTERFACE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	annotationTypeBody() {
	    return this.getTypedRuleContext(AnnotationTypeBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterAnnotationTypeDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitAnnotationTypeDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitAnnotationTypeDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnnotationTypeBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_annotationTypeBody;
    }

	LBRACE() {
	    return this.getToken(JavaParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(JavaParser.RBRACE, 0);
	};

	annotationTypeElementDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationTypeElementDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationTypeElementDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterAnnotationTypeBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitAnnotationTypeBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitAnnotationTypeBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnnotationTypeElementDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_annotationTypeElementDeclaration;
    }

	annotationTypeElementRest() {
	    return this.getTypedRuleContext(AnnotationTypeElementRestContext,0);
	};

	modifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModifierContext);
	    } else {
	        return this.getTypedRuleContext(ModifierContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(JavaParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterAnnotationTypeElementDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitAnnotationTypeElementDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitAnnotationTypeElementDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnnotationTypeElementRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_annotationTypeElementRest;
    }

	typeType() {
	    return this.getTypedRuleContext(TypeTypeContext,0);
	};

	annotationMethodOrConstantRest() {
	    return this.getTypedRuleContext(AnnotationMethodOrConstantRestContext,0);
	};

	SEMI() {
	    return this.getToken(JavaParser.SEMI, 0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	interfaceDeclaration() {
	    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
	};

	enumDeclaration() {
	    return this.getTypedRuleContext(EnumDeclarationContext,0);
	};

	annotationTypeDeclaration() {
	    return this.getTypedRuleContext(AnnotationTypeDeclarationContext,0);
	};

	recordDeclaration() {
	    return this.getTypedRuleContext(RecordDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterAnnotationTypeElementRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitAnnotationTypeElementRest(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitAnnotationTypeElementRest(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnnotationMethodOrConstantRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_annotationMethodOrConstantRest;
    }

	annotationMethodRest() {
	    return this.getTypedRuleContext(AnnotationMethodRestContext,0);
	};

	annotationConstantRest() {
	    return this.getTypedRuleContext(AnnotationConstantRestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterAnnotationMethodOrConstantRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitAnnotationMethodOrConstantRest(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitAnnotationMethodOrConstantRest(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnnotationMethodRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_annotationMethodRest;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LPAREN() {
	    return this.getToken(JavaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(JavaParser.RPAREN, 0);
	};

	defaultValue() {
	    return this.getTypedRuleContext(DefaultValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterAnnotationMethodRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitAnnotationMethodRest(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitAnnotationMethodRest(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnnotationConstantRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_annotationConstantRest;
    }

	variableDeclarators() {
	    return this.getTypedRuleContext(VariableDeclaratorsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterAnnotationConstantRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitAnnotationConstantRest(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitAnnotationConstantRest(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefaultValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_defaultValue;
    }

	DEFAULT() {
	    return this.getToken(JavaParser.DEFAULT, 0);
	};

	elementValue() {
	    return this.getTypedRuleContext(ElementValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterDefaultValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitDefaultValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitDefaultValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ModuleDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_moduleDeclaration;
    }

	MODULE() {
	    return this.getToken(JavaParser.MODULE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	moduleBody() {
	    return this.getTypedRuleContext(ModuleBodyContext,0);
	};

	OPEN() {
	    return this.getToken(JavaParser.OPEN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterModuleDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitModuleDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitModuleDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ModuleBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_moduleBody;
    }

	LBRACE() {
	    return this.getToken(JavaParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(JavaParser.RBRACE, 0);
	};

	moduleDirective = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModuleDirectiveContext);
	    } else {
	        return this.getTypedRuleContext(ModuleDirectiveContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterModuleBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitModuleBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitModuleBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ModuleDirectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_moduleDirective;
    }

	REQUIRES() {
	    return this.getToken(JavaParser.REQUIRES, 0);
	};

	qualifiedName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedNameContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedNameContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(JavaParser.SEMI, 0);
	};

	requiresModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RequiresModifierContext);
	    } else {
	        return this.getTypedRuleContext(RequiresModifierContext,i);
	    }
	};

	EXPORTS() {
	    return this.getToken(JavaParser.EXPORTS, 0);
	};

	TO() {
	    return this.getToken(JavaParser.TO, 0);
	};

	OPENS() {
	    return this.getToken(JavaParser.OPENS, 0);
	};

	USES() {
	    return this.getToken(JavaParser.USES, 0);
	};

	PROVIDES() {
	    return this.getToken(JavaParser.PROVIDES, 0);
	};

	WITH() {
	    return this.getToken(JavaParser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterModuleDirective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitModuleDirective(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitModuleDirective(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RequiresModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_requiresModifier;
    }

	TRANSITIVE() {
	    return this.getToken(JavaParser.TRANSITIVE, 0);
	};

	STATIC() {
	    return this.getToken(JavaParser.STATIC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterRequiresModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitRequiresModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitRequiresModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RecordDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_recordDeclaration;
    }

	RECORD() {
	    return this.getToken(JavaParser.RECORD, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	recordHeader() {
	    return this.getTypedRuleContext(RecordHeaderContext,0);
	};

	recordBody() {
	    return this.getTypedRuleContext(RecordBodyContext,0);
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	IMPLEMENTS() {
	    return this.getToken(JavaParser.IMPLEMENTS, 0);
	};

	typeList() {
	    return this.getTypedRuleContext(TypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterRecordDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitRecordDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitRecordDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RecordHeaderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_recordHeader;
    }

	LPAREN() {
	    return this.getToken(JavaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(JavaParser.RPAREN, 0);
	};

	recordComponentList() {
	    return this.getTypedRuleContext(RecordComponentListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterRecordHeader(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitRecordHeader(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitRecordHeader(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RecordComponentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_recordComponentList;
    }

	recordComponent = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RecordComponentContext);
	    } else {
	        return this.getTypedRuleContext(RecordComponentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.COMMA);
	    } else {
	        return this.getToken(JavaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterRecordComponentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitRecordComponentList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitRecordComponentList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RecordComponentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_recordComponent;
    }

	typeType() {
	    return this.getTypedRuleContext(TypeTypeContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterRecordComponent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitRecordComponent(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitRecordComponent(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RecordBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_recordBody;
    }

	LBRACE() {
	    return this.getToken(JavaParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(JavaParser.RBRACE, 0);
	};

	classBodyDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassBodyDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ClassBodyDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterRecordBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitRecordBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitRecordBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_block;
    }

	LBRACE() {
	    return this.getToken(JavaParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(JavaParser.RBRACE, 0);
	};

	blockStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockStatementContext);
	    } else {
	        return this.getTypedRuleContext(BlockStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BlockStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_blockStatement;
    }

	localVariableDeclaration() {
	    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
	};

	SEMI() {
	    return this.getToken(JavaParser.SEMI, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	localTypeDeclaration() {
	    return this.getTypedRuleContext(LocalTypeDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterBlockStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitBlockStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitBlockStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LocalVariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_localVariableDeclaration;
    }

	typeType() {
	    return this.getTypedRuleContext(TypeTypeContext,0);
	};

	variableDeclarators() {
	    return this.getTypedRuleContext(VariableDeclaratorsContext,0);
	};

	VAR() {
	    return this.getToken(JavaParser.VAR, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ASSIGN() {
	    return this.getToken(JavaParser.ASSIGN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterLocalVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitLocalVariableDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitLocalVariableDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_identifier;
    }

	IDENTIFIER() {
	    return this.getToken(JavaParser.IDENTIFIER, 0);
	};

	MODULE() {
	    return this.getToken(JavaParser.MODULE, 0);
	};

	OPEN() {
	    return this.getToken(JavaParser.OPEN, 0);
	};

	REQUIRES() {
	    return this.getToken(JavaParser.REQUIRES, 0);
	};

	EXPORTS() {
	    return this.getToken(JavaParser.EXPORTS, 0);
	};

	OPENS() {
	    return this.getToken(JavaParser.OPENS, 0);
	};

	TO() {
	    return this.getToken(JavaParser.TO, 0);
	};

	USES() {
	    return this.getToken(JavaParser.USES, 0);
	};

	PROVIDES() {
	    return this.getToken(JavaParser.PROVIDES, 0);
	};

	WITH() {
	    return this.getToken(JavaParser.WITH, 0);
	};

	TRANSITIVE() {
	    return this.getToken(JavaParser.TRANSITIVE, 0);
	};

	YIELD() {
	    return this.getToken(JavaParser.YIELD, 0);
	};

	SEALED() {
	    return this.getToken(JavaParser.SEALED, 0);
	};

	PERMITS() {
	    return this.getToken(JavaParser.PERMITS, 0);
	};

	RECORD() {
	    return this.getToken(JavaParser.RECORD, 0);
	};

	VAR() {
	    return this.getToken(JavaParser.VAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LocalTypeDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_localTypeDeclaration;
    }

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	interfaceDeclaration() {
	    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
	};

	recordDeclaration() {
	    return this.getTypedRuleContext(RecordDeclarationContext,0);
	};

	classOrInterfaceModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassOrInterfaceModifierContext);
	    } else {
	        return this.getTypedRuleContext(ClassOrInterfaceModifierContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(JavaParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterLocalTypeDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitLocalTypeDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitLocalTypeDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_statement;
        this.blockLabel = null;
        this.statementExpression = null;
        this.identifierLabel = null;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	ASSERT() {
	    return this.getToken(JavaParser.ASSERT, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(JavaParser.SEMI, 0);
	};

	COLON() {
	    return this.getToken(JavaParser.COLON, 0);
	};

	IF() {
	    return this.getToken(JavaParser.IF, 0);
	};

	parExpression() {
	    return this.getTypedRuleContext(ParExpressionContext,0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(JavaParser.ELSE, 0);
	};

	FOR() {
	    return this.getToken(JavaParser.FOR, 0);
	};

	LPAREN() {
	    return this.getToken(JavaParser.LPAREN, 0);
	};

	forControl() {
	    return this.getTypedRuleContext(ForControlContext,0);
	};

	RPAREN() {
	    return this.getToken(JavaParser.RPAREN, 0);
	};

	WHILE() {
	    return this.getToken(JavaParser.WHILE, 0);
	};

	DO() {
	    return this.getToken(JavaParser.DO, 0);
	};

	TRY() {
	    return this.getToken(JavaParser.TRY, 0);
	};

	finallyBlock() {
	    return this.getTypedRuleContext(FinallyBlockContext,0);
	};

	catchClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CatchClauseContext);
	    } else {
	        return this.getTypedRuleContext(CatchClauseContext,i);
	    }
	};

	resourceSpecification() {
	    return this.getTypedRuleContext(ResourceSpecificationContext,0);
	};

	SWITCH() {
	    return this.getToken(JavaParser.SWITCH, 0);
	};

	LBRACE() {
	    return this.getToken(JavaParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(JavaParser.RBRACE, 0);
	};

	switchBlockStatementGroup = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SwitchBlockStatementGroupContext);
	    } else {
	        return this.getTypedRuleContext(SwitchBlockStatementGroupContext,i);
	    }
	};

	switchLabel = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SwitchLabelContext);
	    } else {
	        return this.getTypedRuleContext(SwitchLabelContext,i);
	    }
	};

	SYNCHRONIZED() {
	    return this.getToken(JavaParser.SYNCHRONIZED, 0);
	};

	RETURN() {
	    return this.getToken(JavaParser.RETURN, 0);
	};

	THROW() {
	    return this.getToken(JavaParser.THROW, 0);
	};

	BREAK() {
	    return this.getToken(JavaParser.BREAK, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	CONTINUE() {
	    return this.getToken(JavaParser.CONTINUE, 0);
	};

	YIELD() {
	    return this.getToken(JavaParser.YIELD, 0);
	};

	switchExpression() {
	    return this.getTypedRuleContext(SwitchExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CatchClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_catchClause;
    }

	CATCH() {
	    return this.getToken(JavaParser.CATCH, 0);
	};

	LPAREN() {
	    return this.getToken(JavaParser.LPAREN, 0);
	};

	catchType() {
	    return this.getTypedRuleContext(CatchTypeContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	RPAREN() {
	    return this.getToken(JavaParser.RPAREN, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterCatchClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitCatchClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitCatchClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CatchTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_catchType;
    }

	qualifiedName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedNameContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedNameContext,i);
	    }
	};

	BITOR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.BITOR);
	    } else {
	        return this.getToken(JavaParser.BITOR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterCatchType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitCatchType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitCatchType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FinallyBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_finallyBlock;
    }

	FINALLY() {
	    return this.getToken(JavaParser.FINALLY, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterFinallyBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitFinallyBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitFinallyBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResourceSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_resourceSpecification;
    }

	LPAREN() {
	    return this.getToken(JavaParser.LPAREN, 0);
	};

	resources() {
	    return this.getTypedRuleContext(ResourcesContext,0);
	};

	RPAREN() {
	    return this.getToken(JavaParser.RPAREN, 0);
	};

	SEMI() {
	    return this.getToken(JavaParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterResourceSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitResourceSpecification(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitResourceSpecification(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResourcesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_resources;
    }

	resource = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ResourceContext);
	    } else {
	        return this.getTypedRuleContext(ResourceContext,i);
	    }
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.SEMI);
	    } else {
	        return this.getToken(JavaParser.SEMI, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterResources(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitResources(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitResources(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_resource;
    }

	ASSIGN() {
	    return this.getToken(JavaParser.ASSIGN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	classOrInterfaceType() {
	    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
	};

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	VAR() {
	    return this.getToken(JavaParser.VAR, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterResource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitResource(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitResource(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SwitchBlockStatementGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_switchBlockStatementGroup;
    }

	switchLabel = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SwitchLabelContext);
	    } else {
	        return this.getTypedRuleContext(SwitchLabelContext,i);
	    }
	};

	blockStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockStatementContext);
	    } else {
	        return this.getTypedRuleContext(BlockStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterSwitchBlockStatementGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitSwitchBlockStatementGroup(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitSwitchBlockStatementGroup(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SwitchLabelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_switchLabel;
        this.constantExpression = null;
        this.enumConstantName = null;
        this.varName = null;
    }

	CASE() {
	    return this.getToken(JavaParser.CASE, 0);
	};

	COLON() {
	    return this.getToken(JavaParser.COLON, 0);
	};

	typeType() {
	    return this.getTypedRuleContext(TypeTypeContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	IDENTIFIER() {
	    return this.getToken(JavaParser.IDENTIFIER, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	DEFAULT() {
	    return this.getToken(JavaParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterSwitchLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitSwitchLabel(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitSwitchLabel(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForControlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_forControl;
        this.forUpdate = null;
    }

	enhancedForControl() {
	    return this.getTypedRuleContext(EnhancedForControlContext,0);
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.SEMI);
	    } else {
	        return this.getToken(JavaParser.SEMI, i);
	    }
	};


	forInit() {
	    return this.getTypedRuleContext(ForInitContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterForControl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitForControl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitForControl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForInitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_forInit;
    }

	localVariableDeclaration() {
	    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterForInit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitForInit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitForInit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnhancedForControlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_enhancedForControl;
    }

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	COLON() {
	    return this.getToken(JavaParser.COLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	typeType() {
	    return this.getTypedRuleContext(TypeTypeContext,0);
	};

	VAR() {
	    return this.getToken(JavaParser.VAR, 0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterEnhancedForControl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitEnhancedForControl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitEnhancedForControl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_parExpression;
    }

	LPAREN() {
	    return this.getToken(JavaParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(JavaParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterParExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitParExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitParExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_expressionList;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.COMMA);
	    } else {
	        return this.getToken(JavaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterExpressionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitExpressionList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitExpressionList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_methodCall;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LPAREN() {
	    return this.getToken(JavaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(JavaParser.RPAREN, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	THIS() {
	    return this.getToken(JavaParser.THIS, 0);
	};

	SUPER() {
	    return this.getToken(JavaParser.SUPER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterMethodCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitMethodCall(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitMethodCall(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_expression;
        this.prefix = null;
        this.bop = null;
        this.postfix = null;
    }

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	methodCall() {
	    return this.getTypedRuleContext(MethodCallContext,0);
	};

	NEW() {
	    return this.getToken(JavaParser.NEW, 0);
	};

	creator() {
	    return this.getTypedRuleContext(CreatorContext,0);
	};

	LPAREN() {
	    return this.getToken(JavaParser.LPAREN, 0);
	};

	typeType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeTypeContext);
	    } else {
	        return this.getTypedRuleContext(TypeTypeContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(JavaParser.RPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	BITAND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.BITAND);
	    } else {
	        return this.getToken(JavaParser.BITAND, i);
	    }
	};


	ADD() {
	    return this.getToken(JavaParser.ADD, 0);
	};

	SUB() {
	    return this.getToken(JavaParser.SUB, 0);
	};

	INC() {
	    return this.getToken(JavaParser.INC, 0);
	};

	DEC() {
	    return this.getToken(JavaParser.DEC, 0);
	};

	TILDE() {
	    return this.getToken(JavaParser.TILDE, 0);
	};

	BANG() {
	    return this.getToken(JavaParser.BANG, 0);
	};

	lambdaExpression() {
	    return this.getTypedRuleContext(LambdaExpressionContext,0);
	};

	switchExpression() {
	    return this.getTypedRuleContext(SwitchExpressionContext,0);
	};

	COLONCOLON() {
	    return this.getToken(JavaParser.COLONCOLON, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	classType() {
	    return this.getTypedRuleContext(ClassTypeContext,0);
	};

	MUL() {
	    return this.getToken(JavaParser.MUL, 0);
	};

	DIV() {
	    return this.getToken(JavaParser.DIV, 0);
	};

	MOD() {
	    return this.getToken(JavaParser.MOD, 0);
	};

	LT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.LT);
	    } else {
	        return this.getToken(JavaParser.LT, i);
	    }
	};


	GT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.GT);
	    } else {
	        return this.getToken(JavaParser.GT, i);
	    }
	};


	LE() {
	    return this.getToken(JavaParser.LE, 0);
	};

	GE() {
	    return this.getToken(JavaParser.GE, 0);
	};

	EQUAL() {
	    return this.getToken(JavaParser.EQUAL, 0);
	};

	NOTEQUAL() {
	    return this.getToken(JavaParser.NOTEQUAL, 0);
	};

	CARET() {
	    return this.getToken(JavaParser.CARET, 0);
	};

	BITOR() {
	    return this.getToken(JavaParser.BITOR, 0);
	};

	AND() {
	    return this.getToken(JavaParser.AND, 0);
	};

	OR() {
	    return this.getToken(JavaParser.OR, 0);
	};

	COLON() {
	    return this.getToken(JavaParser.COLON, 0);
	};

	QUESTION() {
	    return this.getToken(JavaParser.QUESTION, 0);
	};

	ASSIGN() {
	    return this.getToken(JavaParser.ASSIGN, 0);
	};

	ADD_ASSIGN() {
	    return this.getToken(JavaParser.ADD_ASSIGN, 0);
	};

	SUB_ASSIGN() {
	    return this.getToken(JavaParser.SUB_ASSIGN, 0);
	};

	MUL_ASSIGN() {
	    return this.getToken(JavaParser.MUL_ASSIGN, 0);
	};

	DIV_ASSIGN() {
	    return this.getToken(JavaParser.DIV_ASSIGN, 0);
	};

	AND_ASSIGN() {
	    return this.getToken(JavaParser.AND_ASSIGN, 0);
	};

	OR_ASSIGN() {
	    return this.getToken(JavaParser.OR_ASSIGN, 0);
	};

	XOR_ASSIGN() {
	    return this.getToken(JavaParser.XOR_ASSIGN, 0);
	};

	RSHIFT_ASSIGN() {
	    return this.getToken(JavaParser.RSHIFT_ASSIGN, 0);
	};

	URSHIFT_ASSIGN() {
	    return this.getToken(JavaParser.URSHIFT_ASSIGN, 0);
	};

	LSHIFT_ASSIGN() {
	    return this.getToken(JavaParser.LSHIFT_ASSIGN, 0);
	};

	MOD_ASSIGN() {
	    return this.getToken(JavaParser.MOD_ASSIGN, 0);
	};

	DOT() {
	    return this.getToken(JavaParser.DOT, 0);
	};

	THIS() {
	    return this.getToken(JavaParser.THIS, 0);
	};

	innerCreator() {
	    return this.getTypedRuleContext(InnerCreatorContext,0);
	};

	SUPER() {
	    return this.getToken(JavaParser.SUPER, 0);
	};

	superSuffix() {
	    return this.getTypedRuleContext(SuperSuffixContext,0);
	};

	explicitGenericInvocation() {
	    return this.getTypedRuleContext(ExplicitGenericInvocationContext,0);
	};

	nonWildcardTypeArguments() {
	    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
	};

	LBRACK() {
	    return this.getToken(JavaParser.LBRACK, 0);
	};

	RBRACK() {
	    return this.getToken(JavaParser.RBRACK, 0);
	};

	INSTANCEOF() {
	    return this.getToken(JavaParser.INSTANCEOF, 0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_pattern;
    }

	typeType() {
	    return this.getTypedRuleContext(TypeTypeContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitPattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitPattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LambdaExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_lambdaExpression;
    }

	lambdaParameters() {
	    return this.getTypedRuleContext(LambdaParametersContext,0);
	};

	ARROW() {
	    return this.getToken(JavaParser.ARROW, 0);
	};

	lambdaBody() {
	    return this.getTypedRuleContext(LambdaBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterLambdaExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitLambdaExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitLambdaExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LambdaParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_lambdaParameters;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	LPAREN() {
	    return this.getToken(JavaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(JavaParser.RPAREN, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.COMMA);
	    } else {
	        return this.getToken(JavaParser.COMMA, i);
	    }
	};


	lambdaLVTIList() {
	    return this.getTypedRuleContext(LambdaLVTIListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterLambdaParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitLambdaParameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitLambdaParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LambdaBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_lambdaBody;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterLambdaBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitLambdaBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitLambdaBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_primary;
    }

	LPAREN() {
	    return this.getToken(JavaParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(JavaParser.RPAREN, 0);
	};

	THIS() {
	    return this.getToken(JavaParser.THIS, 0);
	};

	SUPER() {
	    return this.getToken(JavaParser.SUPER, 0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	typeTypeOrVoid() {
	    return this.getTypedRuleContext(TypeTypeOrVoidContext,0);
	};

	DOT() {
	    return this.getToken(JavaParser.DOT, 0);
	};

	CLASS() {
	    return this.getToken(JavaParser.CLASS, 0);
	};

	nonWildcardTypeArguments() {
	    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
	};

	explicitGenericInvocationSuffix() {
	    return this.getTypedRuleContext(ExplicitGenericInvocationSuffixContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitPrimary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitPrimary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SwitchExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_switchExpression;
    }

	SWITCH() {
	    return this.getToken(JavaParser.SWITCH, 0);
	};

	parExpression() {
	    return this.getTypedRuleContext(ParExpressionContext,0);
	};

	LBRACE() {
	    return this.getToken(JavaParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(JavaParser.RBRACE, 0);
	};

	switchLabeledRule = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SwitchLabeledRuleContext);
	    } else {
	        return this.getTypedRuleContext(SwitchLabeledRuleContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterSwitchExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitSwitchExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitSwitchExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SwitchLabeledRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_switchLabeledRule;
    }

	CASE() {
	    return this.getToken(JavaParser.CASE, 0);
	};

	switchRuleOutcome() {
	    return this.getTypedRuleContext(SwitchRuleOutcomeContext,0);
	};

	ARROW() {
	    return this.getToken(JavaParser.ARROW, 0);
	};

	COLON() {
	    return this.getToken(JavaParser.COLON, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	NULL_LITERAL() {
	    return this.getToken(JavaParser.NULL_LITERAL, 0);
	};

	guardedPattern() {
	    return this.getTypedRuleContext(GuardedPatternContext,0);
	};

	DEFAULT() {
	    return this.getToken(JavaParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterSwitchLabeledRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitSwitchLabeledRule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitSwitchLabeledRule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GuardedPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_guardedPattern;
    }

	LPAREN() {
	    return this.getToken(JavaParser.LPAREN, 0);
	};

	guardedPattern() {
	    return this.getTypedRuleContext(GuardedPatternContext,0);
	};

	RPAREN() {
	    return this.getToken(JavaParser.RPAREN, 0);
	};

	typeType() {
	    return this.getTypedRuleContext(TypeTypeContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.AND);
	    } else {
	        return this.getToken(JavaParser.AND, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterGuardedPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitGuardedPattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitGuardedPattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SwitchRuleOutcomeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_switchRuleOutcome;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	blockStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockStatementContext);
	    } else {
	        return this.getTypedRuleContext(BlockStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterSwitchRuleOutcome(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitSwitchRuleOutcome(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitSwitchRuleOutcome(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_classType;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	classOrInterfaceType() {
	    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
	};

	DOT() {
	    return this.getToken(JavaParser.DOT, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterClassType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitClassType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitClassType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_creator;
    }

	nonWildcardTypeArguments() {
	    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
	};

	createdName() {
	    return this.getTypedRuleContext(CreatedNameContext,0);
	};

	classCreatorRest() {
	    return this.getTypedRuleContext(ClassCreatorRestContext,0);
	};

	arrayCreatorRest() {
	    return this.getTypedRuleContext(ArrayCreatorRestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterCreator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitCreator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitCreator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreatedNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_createdName;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	typeArgumentsOrDiamond = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeArgumentsOrDiamondContext);
	    } else {
	        return this.getTypedRuleContext(TypeArgumentsOrDiamondContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.DOT);
	    } else {
	        return this.getToken(JavaParser.DOT, i);
	    }
	};


	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterCreatedName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitCreatedName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitCreatedName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InnerCreatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_innerCreator;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	classCreatorRest() {
	    return this.getTypedRuleContext(ClassCreatorRestContext,0);
	};

	nonWildcardTypeArgumentsOrDiamond() {
	    return this.getTypedRuleContext(NonWildcardTypeArgumentsOrDiamondContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterInnerCreator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitInnerCreator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitInnerCreator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayCreatorRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_arrayCreatorRest;
    }

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.LBRACK);
	    } else {
	        return this.getToken(JavaParser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.RBRACK);
	    } else {
	        return this.getToken(JavaParser.RBRACK, i);
	    }
	};


	arrayInitializer() {
	    return this.getTypedRuleContext(ArrayInitializerContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterArrayCreatorRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitArrayCreatorRest(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitArrayCreatorRest(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassCreatorRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_classCreatorRest;
    }

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	classBody() {
	    return this.getTypedRuleContext(ClassBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterClassCreatorRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitClassCreatorRest(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitClassCreatorRest(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExplicitGenericInvocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_explicitGenericInvocation;
    }

	nonWildcardTypeArguments() {
	    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
	};

	explicitGenericInvocationSuffix() {
	    return this.getTypedRuleContext(ExplicitGenericInvocationSuffixContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterExplicitGenericInvocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitExplicitGenericInvocation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitExplicitGenericInvocation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeArgumentsOrDiamondContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_typeArgumentsOrDiamond;
    }

	LT() {
	    return this.getToken(JavaParser.LT, 0);
	};

	GT() {
	    return this.getToken(JavaParser.GT, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterTypeArgumentsOrDiamond(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitTypeArgumentsOrDiamond(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitTypeArgumentsOrDiamond(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NonWildcardTypeArgumentsOrDiamondContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_nonWildcardTypeArgumentsOrDiamond;
    }

	LT() {
	    return this.getToken(JavaParser.LT, 0);
	};

	GT() {
	    return this.getToken(JavaParser.GT, 0);
	};

	nonWildcardTypeArguments() {
	    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterNonWildcardTypeArgumentsOrDiamond(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitNonWildcardTypeArgumentsOrDiamond(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitNonWildcardTypeArgumentsOrDiamond(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NonWildcardTypeArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_nonWildcardTypeArguments;
    }

	LT() {
	    return this.getToken(JavaParser.LT, 0);
	};

	typeList() {
	    return this.getTypedRuleContext(TypeListContext,0);
	};

	GT() {
	    return this.getToken(JavaParser.GT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterNonWildcardTypeArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitNonWildcardTypeArguments(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitNonWildcardTypeArguments(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_typeList;
    }

	typeType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeTypeContext);
	    } else {
	        return this.getTypedRuleContext(TypeTypeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.COMMA);
	    } else {
	        return this.getToken(JavaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterTypeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitTypeList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitTypeList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_typeType;
    }

	classOrInterfaceType() {
	    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
	};

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.LBRACK);
	    } else {
	        return this.getToken(JavaParser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.RBRACK);
	    } else {
	        return this.getToken(JavaParser.RBRACK, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterTypeType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitTypeType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitTypeType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimitiveTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_primitiveType;
    }

	BOOLEAN() {
	    return this.getToken(JavaParser.BOOLEAN, 0);
	};

	CHAR() {
	    return this.getToken(JavaParser.CHAR, 0);
	};

	BYTE() {
	    return this.getToken(JavaParser.BYTE, 0);
	};

	SHORT() {
	    return this.getToken(JavaParser.SHORT, 0);
	};

	INT() {
	    return this.getToken(JavaParser.INT, 0);
	};

	LONG() {
	    return this.getToken(JavaParser.LONG, 0);
	};

	FLOAT() {
	    return this.getToken(JavaParser.FLOAT, 0);
	};

	DOUBLE() {
	    return this.getToken(JavaParser.DOUBLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterPrimitiveType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitPrimitiveType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitPrimitiveType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_typeArguments;
    }

	LT() {
	    return this.getToken(JavaParser.LT, 0);
	};

	typeArgument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeArgumentContext);
	    } else {
	        return this.getTypedRuleContext(TypeArgumentContext,i);
	    }
	};

	GT() {
	    return this.getToken(JavaParser.GT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.COMMA);
	    } else {
	        return this.getToken(JavaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterTypeArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitTypeArguments(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitTypeArguments(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SuperSuffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_superSuffix;
    }

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	DOT() {
	    return this.getToken(JavaParser.DOT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterSuperSuffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitSuperSuffix(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitSuperSuffix(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExplicitGenericInvocationSuffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_explicitGenericInvocationSuffix;
    }

	SUPER() {
	    return this.getToken(JavaParser.SUPER, 0);
	};

	superSuffix() {
	    return this.getTypedRuleContext(SuperSuffixContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterExplicitGenericInvocationSuffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitExplicitGenericInvocationSuffix(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitExplicitGenericInvocationSuffix(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_arguments;
    }

	LPAREN() {
	    return this.getToken(JavaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(JavaParser.RPAREN, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.enterArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaParserListener ) {
	        listener.exitArguments(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof JavaParserVisitor ) {
	        return visitor.visitArguments(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




JavaParser.CompilationUnitContext = CompilationUnitContext; 
JavaParser.PackageDeclarationContext = PackageDeclarationContext; 
JavaParser.ImportDeclarationContext = ImportDeclarationContext; 
JavaParser.TypeDeclarationContext = TypeDeclarationContext; 
JavaParser.ModifierContext = ModifierContext; 
JavaParser.ClassOrInterfaceModifierContext = ClassOrInterfaceModifierContext; 
JavaParser.VariableModifierContext = VariableModifierContext; 
JavaParser.ClassDeclarationContext = ClassDeclarationContext; 
JavaParser.TypeParametersContext = TypeParametersContext; 
JavaParser.TypeParameterContext = TypeParameterContext; 
JavaParser.TypeBoundContext = TypeBoundContext; 
JavaParser.EnumDeclarationContext = EnumDeclarationContext; 
JavaParser.EnumConstantsContext = EnumConstantsContext; 
JavaParser.EnumConstantContext = EnumConstantContext; 
JavaParser.EnumBodyDeclarationsContext = EnumBodyDeclarationsContext; 
JavaParser.InterfaceDeclarationContext = InterfaceDeclarationContext; 
JavaParser.ClassBodyContext = ClassBodyContext; 
JavaParser.InterfaceBodyContext = InterfaceBodyContext; 
JavaParser.ClassBodyDeclarationContext = ClassBodyDeclarationContext; 
JavaParser.MemberDeclarationContext = MemberDeclarationContext; 
JavaParser.MethodDeclarationContext = MethodDeclarationContext; 
JavaParser.MethodBodyContext = MethodBodyContext; 
JavaParser.TypeTypeOrVoidContext = TypeTypeOrVoidContext; 
JavaParser.GenericMethodDeclarationContext = GenericMethodDeclarationContext; 
JavaParser.GenericConstructorDeclarationContext = GenericConstructorDeclarationContext; 
JavaParser.ConstructorDeclarationContext = ConstructorDeclarationContext; 
JavaParser.FieldDeclarationContext = FieldDeclarationContext; 
JavaParser.InterfaceBodyDeclarationContext = InterfaceBodyDeclarationContext; 
JavaParser.InterfaceMemberDeclarationContext = InterfaceMemberDeclarationContext; 
JavaParser.ConstDeclarationContext = ConstDeclarationContext; 
JavaParser.ConstantDeclaratorContext = ConstantDeclaratorContext; 
JavaParser.InterfaceMethodDeclarationContext = InterfaceMethodDeclarationContext; 
JavaParser.InterfaceMethodModifierContext = InterfaceMethodModifierContext; 
JavaParser.GenericInterfaceMethodDeclarationContext = GenericInterfaceMethodDeclarationContext; 
JavaParser.InterfaceCommonBodyDeclarationContext = InterfaceCommonBodyDeclarationContext; 
JavaParser.VariableDeclaratorsContext = VariableDeclaratorsContext; 
JavaParser.VariableDeclaratorContext = VariableDeclaratorContext; 
JavaParser.VariableDeclaratorIdContext = VariableDeclaratorIdContext; 
JavaParser.VariableInitializerContext = VariableInitializerContext; 
JavaParser.ArrayInitializerContext = ArrayInitializerContext; 
JavaParser.ClassOrInterfaceTypeContext = ClassOrInterfaceTypeContext; 
JavaParser.TypeArgumentContext = TypeArgumentContext; 
JavaParser.QualifiedNameListContext = QualifiedNameListContext; 
JavaParser.FormalParametersContext = FormalParametersContext; 
JavaParser.ReceiverParameterContext = ReceiverParameterContext; 
JavaParser.FormalParameterListContext = FormalParameterListContext; 
JavaParser.FormalParameterContext = FormalParameterContext; 
JavaParser.LastFormalParameterContext = LastFormalParameterContext; 
JavaParser.LambdaLVTIListContext = LambdaLVTIListContext; 
JavaParser.LambdaLVTIParameterContext = LambdaLVTIParameterContext; 
JavaParser.QualifiedNameContext = QualifiedNameContext; 
JavaParser.LiteralContext = LiteralContext; 
JavaParser.IntegerLiteralContext = IntegerLiteralContext; 
JavaParser.FloatLiteralContext = FloatLiteralContext; 
JavaParser.AltAnnotationQualifiedNameContext = AltAnnotationQualifiedNameContext; 
JavaParser.AnnotationContext = AnnotationContext; 
JavaParser.ElementValuePairsContext = ElementValuePairsContext; 
JavaParser.ElementValuePairContext = ElementValuePairContext; 
JavaParser.ElementValueContext = ElementValueContext; 
JavaParser.ElementValueArrayInitializerContext = ElementValueArrayInitializerContext; 
JavaParser.AnnotationTypeDeclarationContext = AnnotationTypeDeclarationContext; 
JavaParser.AnnotationTypeBodyContext = AnnotationTypeBodyContext; 
JavaParser.AnnotationTypeElementDeclarationContext = AnnotationTypeElementDeclarationContext; 
JavaParser.AnnotationTypeElementRestContext = AnnotationTypeElementRestContext; 
JavaParser.AnnotationMethodOrConstantRestContext = AnnotationMethodOrConstantRestContext; 
JavaParser.AnnotationMethodRestContext = AnnotationMethodRestContext; 
JavaParser.AnnotationConstantRestContext = AnnotationConstantRestContext; 
JavaParser.DefaultValueContext = DefaultValueContext; 
JavaParser.ModuleDeclarationContext = ModuleDeclarationContext; 
JavaParser.ModuleBodyContext = ModuleBodyContext; 
JavaParser.ModuleDirectiveContext = ModuleDirectiveContext; 
JavaParser.RequiresModifierContext = RequiresModifierContext; 
JavaParser.RecordDeclarationContext = RecordDeclarationContext; 
JavaParser.RecordHeaderContext = RecordHeaderContext; 
JavaParser.RecordComponentListContext = RecordComponentListContext; 
JavaParser.RecordComponentContext = RecordComponentContext; 
JavaParser.RecordBodyContext = RecordBodyContext; 
JavaParser.BlockContext = BlockContext; 
JavaParser.BlockStatementContext = BlockStatementContext; 
JavaParser.LocalVariableDeclarationContext = LocalVariableDeclarationContext; 
JavaParser.IdentifierContext = IdentifierContext; 
JavaParser.LocalTypeDeclarationContext = LocalTypeDeclarationContext; 
JavaParser.StatementContext = StatementContext; 
JavaParser.CatchClauseContext = CatchClauseContext; 
JavaParser.CatchTypeContext = CatchTypeContext; 
JavaParser.FinallyBlockContext = FinallyBlockContext; 
JavaParser.ResourceSpecificationContext = ResourceSpecificationContext; 
JavaParser.ResourcesContext = ResourcesContext; 
JavaParser.ResourceContext = ResourceContext; 
JavaParser.SwitchBlockStatementGroupContext = SwitchBlockStatementGroupContext; 
JavaParser.SwitchLabelContext = SwitchLabelContext; 
JavaParser.ForControlContext = ForControlContext; 
JavaParser.ForInitContext = ForInitContext; 
JavaParser.EnhancedForControlContext = EnhancedForControlContext; 
JavaParser.ParExpressionContext = ParExpressionContext; 
JavaParser.ExpressionListContext = ExpressionListContext; 
JavaParser.MethodCallContext = MethodCallContext; 
JavaParser.ExpressionContext = ExpressionContext; 
JavaParser.PatternContext = PatternContext; 
JavaParser.LambdaExpressionContext = LambdaExpressionContext; 
JavaParser.LambdaParametersContext = LambdaParametersContext; 
JavaParser.LambdaBodyContext = LambdaBodyContext; 
JavaParser.PrimaryContext = PrimaryContext; 
JavaParser.SwitchExpressionContext = SwitchExpressionContext; 
JavaParser.SwitchLabeledRuleContext = SwitchLabeledRuleContext; 
JavaParser.GuardedPatternContext = GuardedPatternContext; 
JavaParser.SwitchRuleOutcomeContext = SwitchRuleOutcomeContext; 
JavaParser.ClassTypeContext = ClassTypeContext; 
JavaParser.CreatorContext = CreatorContext; 
JavaParser.CreatedNameContext = CreatedNameContext; 
JavaParser.InnerCreatorContext = InnerCreatorContext; 
JavaParser.ArrayCreatorRestContext = ArrayCreatorRestContext; 
JavaParser.ClassCreatorRestContext = ClassCreatorRestContext; 
JavaParser.ExplicitGenericInvocationContext = ExplicitGenericInvocationContext; 
JavaParser.TypeArgumentsOrDiamondContext = TypeArgumentsOrDiamondContext; 
JavaParser.NonWildcardTypeArgumentsOrDiamondContext = NonWildcardTypeArgumentsOrDiamondContext; 
JavaParser.NonWildcardTypeArgumentsContext = NonWildcardTypeArgumentsContext; 
JavaParser.TypeListContext = TypeListContext; 
JavaParser.TypeTypeContext = TypeTypeContext; 
JavaParser.PrimitiveTypeContext = PrimitiveTypeContext; 
JavaParser.TypeArgumentsContext = TypeArgumentsContext; 
JavaParser.SuperSuffixContext = SuperSuffixContext; 
JavaParser.ExplicitGenericInvocationSuffixContext = ExplicitGenericInvocationSuffixContext; 
JavaParser.ArgumentsContext = ArgumentsContext; 
