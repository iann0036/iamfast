// Generated from grammars/Python3Parser.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';
import Python3ParserListener from './Python3ParserListener.js';
import Python3ParserVisitor from './Python3ParserVisitor.js';

const serializedATN = [4,1,99,1104,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,1,0,1,0,1,0,1,0,1,0,3,0,178,8,0,1,1,1,1,5,1,182,8,1,10,1,12,1,185,9,
1,1,1,1,1,1,2,1,2,5,2,191,8,2,10,2,12,2,194,9,2,1,2,1,2,1,3,1,3,1,3,1,3,
3,3,202,8,3,1,3,3,3,205,8,3,1,3,1,3,1,4,4,4,210,8,4,11,4,12,4,211,1,5,1,
5,1,5,1,5,3,5,218,8,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,3,7,228,8,7,1,7,1,
7,1,7,1,8,1,8,3,8,235,8,8,1,8,1,8,1,9,1,9,1,9,3,9,242,8,9,1,9,1,9,1,9,1,
9,3,9,248,8,9,5,9,250,8,9,10,9,12,9,253,9,9,1,9,1,9,1,9,3,9,258,8,9,1,9,
1,9,1,9,1,9,3,9,264,8,9,5,9,266,8,9,10,9,12,9,269,9,9,1,9,1,9,1,9,1,9,3,
9,275,8,9,3,9,277,8,9,3,9,279,8,9,1,9,1,9,1,9,3,9,284,8,9,3,9,286,8,9,3,
9,288,8,9,1,9,1,9,3,9,292,8,9,1,9,1,9,1,9,1,9,3,9,298,8,9,5,9,300,8,9,10,
9,12,9,303,9,9,1,9,1,9,1,9,1,9,3,9,309,8,9,3,9,311,8,9,3,9,313,8,9,1,9,1,
9,1,9,3,9,318,8,9,3,9,320,8,9,1,10,1,10,1,10,3,10,325,8,10,1,11,1,11,1,11,
3,11,330,8,11,1,11,1,11,1,11,1,11,3,11,336,8,11,5,11,338,8,11,10,11,12,11,
341,9,11,1,11,1,11,1,11,3,11,346,8,11,1,11,1,11,1,11,1,11,3,11,352,8,11,
5,11,354,8,11,10,11,12,11,357,9,11,1,11,1,11,1,11,1,11,3,11,363,8,11,3,11,
365,8,11,3,11,367,8,11,1,11,1,11,1,11,3,11,372,8,11,3,11,374,8,11,3,11,376,
8,11,1,11,1,11,3,11,380,8,11,1,11,1,11,1,11,1,11,3,11,386,8,11,5,11,388,
8,11,10,11,12,11,391,9,11,1,11,1,11,1,11,1,11,3,11,397,8,11,3,11,399,8,11,
3,11,401,8,11,1,11,1,11,1,11,3,11,406,8,11,3,11,408,8,11,1,12,1,12,1,13,
1,13,3,13,414,8,13,1,14,1,14,1,14,5,14,419,8,14,10,14,12,14,422,9,14,1,14,
3,14,425,8,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,437,
8,15,1,16,1,16,1,16,1,16,1,16,3,16,444,8,16,1,16,1,16,1,16,3,16,449,8,16,
5,16,451,8,16,10,16,12,16,454,9,16,3,16,456,8,16,1,17,1,17,1,17,1,17,3,17,
462,8,17,1,18,1,18,3,18,466,8,18,1,18,1,18,1,18,3,18,471,8,18,5,18,473,8,
18,10,18,12,18,476,9,18,1,18,3,18,479,8,18,1,19,1,19,1,20,1,20,1,20,1,21,
1,21,1,22,1,22,1,22,1,22,1,22,3,22,493,8,22,1,23,1,23,1,24,1,24,1,25,1,25,
3,25,501,8,25,1,26,1,26,1,27,1,27,1,27,1,27,3,27,509,8,27,3,27,511,8,27,
1,28,1,28,3,28,515,8,28,1,29,1,29,1,29,1,30,1,30,5,30,522,8,30,10,30,12,
30,525,9,30,1,30,1,30,4,30,529,8,30,11,30,12,30,530,3,30,533,8,30,1,30,1,
30,1,30,1,30,1,30,1,30,1,30,3,30,542,8,30,1,31,1,31,1,31,3,31,547,8,31,1,
32,1,32,1,32,3,32,552,8,32,1,33,1,33,1,33,5,33,557,8,33,10,33,12,33,560,
9,33,1,33,3,33,563,8,33,1,34,1,34,1,34,5,34,568,8,34,10,34,12,34,571,9,34,
1,35,1,35,1,35,5,35,576,8,35,10,35,12,35,579,9,35,1,36,1,36,1,36,1,36,5,
36,585,8,36,10,36,12,36,588,9,36,1,37,1,37,1,37,1,37,5,37,594,8,37,10,37,
12,37,597,9,37,1,38,1,38,1,38,1,38,3,38,603,8,38,1,39,1,39,1,39,1,39,1,39,
1,39,1,39,1,39,1,39,3,39,614,8,39,1,40,1,40,1,40,1,40,3,40,620,8,40,1,41,
1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,5,41,631,8,41,10,41,12,41,634,9,
41,1,41,1,41,1,41,3,41,639,8,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,
648,8,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,659,8,43,1,44,
1,44,1,44,1,44,1,44,1,44,1,44,4,44,668,8,44,11,44,12,44,669,1,44,1,44,1,
44,3,44,675,8,44,1,44,1,44,1,44,3,44,680,8,44,1,44,1,44,1,44,3,44,685,8,
44,1,45,1,45,1,45,1,45,5,45,691,8,45,10,45,12,45,694,9,45,1,45,1,45,1,45,
1,46,1,46,1,46,3,46,702,8,46,1,47,1,47,1,47,1,47,3,47,708,8,47,3,47,710,
8,47,1,48,1,48,1,48,1,48,4,48,716,8,48,11,48,12,48,717,1,48,1,48,3,48,722,
8,48,1,49,1,49,1,49,1,49,1,49,1,49,3,49,730,8,49,1,49,3,49,733,8,49,1,50,
1,50,3,50,737,8,50,1,51,1,51,3,51,741,8,51,1,51,1,51,1,51,1,52,1,52,3,52,
748,8,52,1,52,1,52,1,52,1,53,1,53,1,53,5,53,756,8,53,10,53,12,53,759,9,53,
1,54,1,54,1,54,5,54,764,8,54,10,54,12,54,767,9,54,1,55,1,55,1,55,3,55,772,
8,55,1,56,1,56,1,56,1,56,5,56,778,8,56,10,56,12,56,781,9,56,1,57,1,57,1,
57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,796,8,57,1,58,
1,58,1,58,1,59,1,59,1,59,5,59,804,8,59,10,59,12,59,807,9,59,1,60,1,60,1,
60,5,60,812,8,60,10,60,12,60,815,9,60,1,61,1,61,1,61,5,61,820,8,61,10,61,
12,61,823,9,61,1,62,1,62,1,62,5,62,828,8,62,10,62,12,62,831,9,62,1,63,1,
63,1,63,5,63,836,8,63,10,63,12,63,839,9,63,1,64,1,64,1,64,5,64,844,8,64,
10,64,12,64,847,9,64,1,65,1,65,1,65,3,65,852,8,65,1,66,1,66,1,66,3,66,857,
8,66,1,67,3,67,860,8,67,1,67,1,67,5,67,864,8,67,10,67,12,67,867,9,67,1,68,
1,68,1,68,3,68,872,8,68,1,68,1,68,1,68,3,68,877,8,68,1,68,1,68,1,68,3,68,
882,8,68,1,68,1,68,1,68,1,68,4,68,888,8,68,11,68,12,68,889,1,68,1,68,1,68,
1,68,3,68,896,8,68,1,69,1,69,3,69,900,8,69,1,69,1,69,1,69,1,69,3,69,906,
8,69,5,69,908,8,69,10,69,12,69,911,9,69,1,69,3,69,914,8,69,3,69,916,8,69,
1,70,1,70,3,70,920,8,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,929,8,70,
1,71,1,71,1,71,5,71,934,8,71,10,71,12,71,937,9,71,1,71,3,71,940,8,71,1,72,
1,72,3,72,944,8,72,1,72,1,72,3,72,948,8,72,1,72,3,72,951,8,72,3,72,953,8,
72,1,73,1,73,3,73,957,8,73,1,74,1,74,3,74,961,8,74,1,74,1,74,1,74,3,74,966,
8,74,5,74,968,8,74,10,74,12,74,971,9,74,1,74,3,74,974,8,74,1,75,1,75,1,75,
5,75,979,8,75,10,75,12,75,982,9,75,1,75,3,75,985,8,75,1,76,1,76,1,76,1,76,
1,76,1,76,3,76,993,8,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,1003,
8,76,5,76,1005,8,76,10,76,12,76,1008,9,76,1,76,3,76,1011,8,76,3,76,1013,
8,76,1,76,1,76,3,76,1017,8,76,1,76,1,76,1,76,1,76,3,76,1023,8,76,5,76,1025,
8,76,10,76,12,76,1028,9,76,1,76,3,76,1031,8,76,3,76,1033,8,76,3,76,1035,
8,76,1,77,1,77,1,77,1,77,3,77,1041,8,77,1,77,3,77,1044,8,77,1,77,1,77,1,
77,1,78,1,78,1,78,5,78,1052,8,78,10,78,12,78,1055,9,78,1,78,3,78,1058,8,
78,1,79,1,79,3,79,1062,8,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,
1072,8,79,1,80,1,80,3,80,1076,8,80,1,81,3,81,1079,8,81,1,81,1,81,1,81,1,
81,1,81,3,81,1086,8,81,1,82,1,82,1,82,3,82,1091,8,82,1,83,1,83,1,84,1,84,
3,84,1097,8,84,1,85,1,85,1,85,3,85,1102,8,85,1,85,0,0,86,0,2,4,6,8,10,12,
14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,
144,146,148,150,152,154,156,158,160,162,164,166,168,170,0,6,1,0,85,97,1,
0,51,52,1,0,66,67,1,0,68,69,3,0,53,53,70,72,83,83,2,0,68,69,73,73,1229,0,
177,1,0,0,0,2,183,1,0,0,0,4,188,1,0,0,0,6,197,1,0,0,0,8,209,1,0,0,0,10,213,
1,0,0,0,12,219,1,0,0,0,14,222,1,0,0,0,16,232,1,0,0,0,18,319,1,0,0,0,20,321,
1,0,0,0,22,407,1,0,0,0,24,409,1,0,0,0,26,413,1,0,0,0,28,415,1,0,0,0,30,436,
1,0,0,0,32,438,1,0,0,0,34,457,1,0,0,0,36,465,1,0,0,0,38,480,1,0,0,0,40,482,
1,0,0,0,42,485,1,0,0,0,44,492,1,0,0,0,46,494,1,0,0,0,48,496,1,0,0,0,50,498,
1,0,0,0,52,502,1,0,0,0,54,504,1,0,0,0,56,514,1,0,0,0,58,516,1,0,0,0,60,519,
1,0,0,0,62,543,1,0,0,0,64,548,1,0,0,0,66,553,1,0,0,0,68,564,1,0,0,0,70,572,
1,0,0,0,72,580,1,0,0,0,74,589,1,0,0,0,76,598,1,0,0,0,78,613,1,0,0,0,80,615,
1,0,0,0,82,621,1,0,0,0,84,640,1,0,0,0,86,649,1,0,0,0,88,660,1,0,0,0,90,686,
1,0,0,0,92,698,1,0,0,0,94,703,1,0,0,0,96,721,1,0,0,0,98,732,1,0,0,0,100,
736,1,0,0,0,102,738,1,0,0,0,104,745,1,0,0,0,106,752,1,0,0,0,108,760,1,0,
0,0,110,771,1,0,0,0,112,773,1,0,0,0,114,795,1,0,0,0,116,797,1,0,0,0,118,
800,1,0,0,0,120,808,1,0,0,0,122,816,1,0,0,0,124,824,1,0,0,0,126,832,1,0,
0,0,128,840,1,0,0,0,130,851,1,0,0,0,132,853,1,0,0,0,134,859,1,0,0,0,136,
895,1,0,0,0,138,899,1,0,0,0,140,928,1,0,0,0,142,930,1,0,0,0,144,952,1,0,
0,0,146,954,1,0,0,0,148,960,1,0,0,0,150,975,1,0,0,0,152,1034,1,0,0,0,154,
1036,1,0,0,0,156,1048,1,0,0,0,158,1071,1,0,0,0,160,1075,1,0,0,0,162,1078,
1,0,0,0,164,1087,1,0,0,0,166,1092,1,0,0,0,168,1094,1,0,0,0,170,1101,1,0,
0,0,172,178,5,41,0,0,173,178,3,28,14,0,174,175,3,78,39,0,175,176,5,41,0,
0,176,178,1,0,0,0,177,172,1,0,0,0,177,173,1,0,0,0,177,174,1,0,0,0,178,1,
1,0,0,0,179,182,5,41,0,0,180,182,3,26,13,0,181,179,1,0,0,0,181,180,1,0,0,
0,182,185,1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,0,184,186,1,0,0,0,185,183,
1,0,0,0,186,187,5,0,0,1,187,3,1,0,0,0,188,192,3,150,75,0,189,191,5,41,0,
0,190,189,1,0,0,0,191,194,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,195,
1,0,0,0,194,192,1,0,0,0,195,196,5,0,0,1,196,5,1,0,0,0,197,198,5,83,0,0,198,
204,3,70,35,0,199,201,5,54,0,0,200,202,3,156,78,0,201,200,1,0,0,0,201,202,
1,0,0,0,202,203,1,0,0,0,203,205,5,55,0,0,204,199,1,0,0,0,204,205,1,0,0,0,
205,206,1,0,0,0,206,207,5,41,0,0,207,7,1,0,0,0,208,210,3,6,3,0,209,208,1,
0,0,0,210,211,1,0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,9,1,0,0,0,213,
217,3,8,4,0,214,218,3,154,77,0,215,218,3,14,7,0,216,218,3,12,6,0,217,214,
1,0,0,0,217,215,1,0,0,0,217,216,1,0,0,0,218,11,1,0,0,0,219,220,5,39,0,0,
220,221,3,14,7,0,221,13,1,0,0,0,222,223,5,6,0,0,223,224,5,42,0,0,224,227,
3,16,8,0,225,226,5,84,0,0,226,228,3,98,49,0,227,225,1,0,0,0,227,228,1,0,
0,0,228,229,1,0,0,0,229,230,5,57,0,0,230,231,3,96,48,0,231,15,1,0,0,0,232,
234,5,54,0,0,233,235,3,18,9,0,234,233,1,0,0,0,234,235,1,0,0,0,235,236,1,
0,0,0,236,237,5,55,0,0,237,17,1,0,0,0,238,241,3,20,10,0,239,240,5,60,0,0,
240,242,3,98,49,0,241,239,1,0,0,0,241,242,1,0,0,0,242,251,1,0,0,0,243,244,
5,56,0,0,244,247,3,20,10,0,245,246,5,60,0,0,246,248,3,98,49,0,247,245,1,
0,0,0,247,248,1,0,0,0,248,250,1,0,0,0,249,243,1,0,0,0,250,253,1,0,0,0,251,
249,1,0,0,0,251,252,1,0,0,0,252,287,1,0,0,0,253,251,1,0,0,0,254,285,5,56,
0,0,255,257,5,53,0,0,256,258,3,20,10,0,257,256,1,0,0,0,257,258,1,0,0,0,258,
267,1,0,0,0,259,260,5,56,0,0,260,263,3,20,10,0,261,262,5,60,0,0,262,264,
3,98,49,0,263,261,1,0,0,0,263,264,1,0,0,0,264,266,1,0,0,0,265,259,1,0,0,
0,266,269,1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,278,1,0,0,0,269,267,
1,0,0,0,270,276,5,56,0,0,271,272,5,59,0,0,272,274,3,20,10,0,273,275,5,56,
0,0,274,273,1,0,0,0,274,275,1,0,0,0,275,277,1,0,0,0,276,271,1,0,0,0,276,
277,1,0,0,0,277,279,1,0,0,0,278,270,1,0,0,0,278,279,1,0,0,0,279,286,1,0,
0,0,280,281,5,59,0,0,281,283,3,20,10,0,282,284,5,56,0,0,283,282,1,0,0,0,
283,284,1,0,0,0,284,286,1,0,0,0,285,255,1,0,0,0,285,280,1,0,0,0,285,286,
1,0,0,0,286,288,1,0,0,0,287,254,1,0,0,0,287,288,1,0,0,0,288,320,1,0,0,0,
289,291,5,53,0,0,290,292,3,20,10,0,291,290,1,0,0,0,291,292,1,0,0,0,292,301,
1,0,0,0,293,294,5,56,0,0,294,297,3,20,10,0,295,296,5,60,0,0,296,298,3,98,
49,0,297,295,1,0,0,0,297,298,1,0,0,0,298,300,1,0,0,0,299,293,1,0,0,0,300,
303,1,0,0,0,301,299,1,0,0,0,301,302,1,0,0,0,302,312,1,0,0,0,303,301,1,0,
0,0,304,310,5,56,0,0,305,306,5,59,0,0,306,308,3,20,10,0,307,309,5,56,0,0,
308,307,1,0,0,0,308,309,1,0,0,0,309,311,1,0,0,0,310,305,1,0,0,0,310,311,
1,0,0,0,311,313,1,0,0,0,312,304,1,0,0,0,312,313,1,0,0,0,313,320,1,0,0,0,
314,315,5,59,0,0,315,317,3,20,10,0,316,318,5,56,0,0,317,316,1,0,0,0,317,
318,1,0,0,0,318,320,1,0,0,0,319,238,1,0,0,0,319,289,1,0,0,0,319,314,1,0,
0,0,320,19,1,0,0,0,321,324,5,42,0,0,322,323,5,57,0,0,323,325,3,98,49,0,324,
322,1,0,0,0,324,325,1,0,0,0,325,21,1,0,0,0,326,329,3,24,12,0,327,328,5,60,
0,0,328,330,3,98,49,0,329,327,1,0,0,0,329,330,1,0,0,0,330,339,1,0,0,0,331,
332,5,56,0,0,332,335,3,24,12,0,333,334,5,60,0,0,334,336,3,98,49,0,335,333,
1,0,0,0,335,336,1,0,0,0,336,338,1,0,0,0,337,331,1,0,0,0,338,341,1,0,0,0,
339,337,1,0,0,0,339,340,1,0,0,0,340,375,1,0,0,0,341,339,1,0,0,0,342,373,
5,56,0,0,343,345,5,53,0,0,344,346,3,24,12,0,345,344,1,0,0,0,345,346,1,0,
0,0,346,355,1,0,0,0,347,348,5,56,0,0,348,351,3,24,12,0,349,350,5,60,0,0,
350,352,3,98,49,0,351,349,1,0,0,0,351,352,1,0,0,0,352,354,1,0,0,0,353,347,
1,0,0,0,354,357,1,0,0,0,355,353,1,0,0,0,355,356,1,0,0,0,356,366,1,0,0,0,
357,355,1,0,0,0,358,364,5,56,0,0,359,360,5,59,0,0,360,362,3,24,12,0,361,
363,5,56,0,0,362,361,1,0,0,0,362,363,1,0,0,0,363,365,1,0,0,0,364,359,1,0,
0,0,364,365,1,0,0,0,365,367,1,0,0,0,366,358,1,0,0,0,366,367,1,0,0,0,367,
374,1,0,0,0,368,369,5,59,0,0,369,371,3,24,12,0,370,372,5,56,0,0,371,370,
1,0,0,0,371,372,1,0,0,0,372,374,1,0,0,0,373,343,1,0,0,0,373,368,1,0,0,0,
373,374,1,0,0,0,374,376,1,0,0,0,375,342,1,0,0,0,375,376,1,0,0,0,376,408,
1,0,0,0,377,379,5,53,0,0,378,380,3,24,12,0,379,378,1,0,0,0,379,380,1,0,0,
0,380,389,1,0,0,0,381,382,5,56,0,0,382,385,3,24,12,0,383,384,5,60,0,0,384,
386,3,98,49,0,385,383,1,0,0,0,385,386,1,0,0,0,386,388,1,0,0,0,387,381,1,
0,0,0,388,391,1,0,0,0,389,387,1,0,0,0,389,390,1,0,0,0,390,400,1,0,0,0,391,
389,1,0,0,0,392,398,5,56,0,0,393,394,5,59,0,0,394,396,3,24,12,0,395,397,
5,56,0,0,396,395,1,0,0,0,396,397,1,0,0,0,397,399,1,0,0,0,398,393,1,0,0,0,
398,399,1,0,0,0,399,401,1,0,0,0,400,392,1,0,0,0,400,401,1,0,0,0,401,408,
1,0,0,0,402,403,5,59,0,0,403,405,3,24,12,0,404,406,5,56,0,0,405,404,1,0,
0,0,405,406,1,0,0,0,406,408,1,0,0,0,407,326,1,0,0,0,407,377,1,0,0,0,407,
402,1,0,0,0,408,23,1,0,0,0,409,410,5,42,0,0,410,25,1,0,0,0,411,414,3,28,
14,0,412,414,3,78,39,0,413,411,1,0,0,0,413,412,1,0,0,0,414,27,1,0,0,0,415,
420,3,30,15,0,416,417,5,58,0,0,417,419,3,30,15,0,418,416,1,0,0,0,419,422,
1,0,0,0,420,418,1,0,0,0,420,421,1,0,0,0,421,424,1,0,0,0,422,420,1,0,0,0,
423,425,5,58,0,0,424,423,1,0,0,0,424,425,1,0,0,0,425,426,1,0,0,0,426,427,
5,41,0,0,427,29,1,0,0,0,428,437,3,32,16,0,429,437,3,40,20,0,430,437,3,42,
21,0,431,437,3,44,22,0,432,437,3,56,28,0,433,437,3,72,36,0,434,437,3,74,
37,0,435,437,3,76,38,0,436,428,1,0,0,0,436,429,1,0,0,0,436,430,1,0,0,0,436,
431,1,0,0,0,436,432,1,0,0,0,436,433,1,0,0,0,436,434,1,0,0,0,436,435,1,0,
0,0,437,31,1,0,0,0,438,455,3,36,18,0,439,456,3,34,17,0,440,443,3,38,19,0,
441,444,3,168,84,0,442,444,3,150,75,0,443,441,1,0,0,0,443,442,1,0,0,0,444,
456,1,0,0,0,445,448,5,60,0,0,446,449,3,168,84,0,447,449,3,36,18,0,448,446,
1,0,0,0,448,447,1,0,0,0,449,451,1,0,0,0,450,445,1,0,0,0,451,454,1,0,0,0,
452,450,1,0,0,0,452,453,1,0,0,0,453,456,1,0,0,0,454,452,1,0,0,0,455,439,
1,0,0,0,455,440,1,0,0,0,455,452,1,0,0,0,456,33,1,0,0,0,457,458,5,57,0,0,
458,461,3,98,49,0,459,460,5,60,0,0,460,462,3,98,49,0,461,459,1,0,0,0,461,
462,1,0,0,0,462,35,1,0,0,0,463,466,3,98,49,0,464,466,3,116,58,0,465,463,
1,0,0,0,465,464,1,0,0,0,466,474,1,0,0,0,467,470,5,56,0,0,468,471,3,98,49,
0,469,471,3,116,58,0,470,468,1,0,0,0,470,469,1,0,0,0,471,473,1,0,0,0,472,
467,1,0,0,0,473,476,1,0,0,0,474,472,1,0,0,0,474,475,1,0,0,0,475,478,1,0,
0,0,476,474,1,0,0,0,477,479,5,56,0,0,478,477,1,0,0,0,478,479,1,0,0,0,479,
37,1,0,0,0,480,481,7,0,0,0,481,39,1,0,0,0,482,483,5,35,0,0,483,484,3,148,
74,0,484,41,1,0,0,0,485,486,5,36,0,0,486,43,1,0,0,0,487,493,3,46,23,0,488,
493,3,48,24,0,489,493,3,50,25,0,490,493,3,54,27,0,491,493,3,52,26,0,492,
487,1,0,0,0,492,488,1,0,0,0,492,489,1,0,0,0,492,490,1,0,0,0,492,491,1,0,
0,0,493,45,1,0,0,0,494,495,5,38,0,0,495,47,1,0,0,0,496,497,5,37,0,0,497,
49,1,0,0,0,498,500,5,7,0,0,499,501,3,150,75,0,500,499,1,0,0,0,500,501,1,
0,0,0,501,51,1,0,0,0,502,503,3,168,84,0,503,53,1,0,0,0,504,510,5,8,0,0,505,
508,3,98,49,0,506,507,5,9,0,0,507,509,3,98,49,0,508,506,1,0,0,0,508,509,
1,0,0,0,509,511,1,0,0,0,510,505,1,0,0,0,510,511,1,0,0,0,511,55,1,0,0,0,512,
515,3,58,29,0,513,515,3,60,30,0,514,512,1,0,0,0,514,513,1,0,0,0,515,57,1,
0,0,0,516,517,5,10,0,0,517,518,3,68,34,0,518,59,1,0,0,0,519,532,5,9,0,0,
520,522,7,1,0,0,521,520,1,0,0,0,522,525,1,0,0,0,523,521,1,0,0,0,523,524,
1,0,0,0,524,526,1,0,0,0,525,523,1,0,0,0,526,533,3,70,35,0,527,529,7,1,0,
0,528,527,1,0,0,0,529,530,1,0,0,0,530,528,1,0,0,0,530,531,1,0,0,0,531,533,
1,0,0,0,532,523,1,0,0,0,532,528,1,0,0,0,533,534,1,0,0,0,534,541,5,10,0,0,
535,542,5,53,0,0,536,537,5,54,0,0,537,538,3,66,33,0,538,539,5,55,0,0,539,
542,1,0,0,0,540,542,3,66,33,0,541,535,1,0,0,0,541,536,1,0,0,0,541,540,1,
0,0,0,542,61,1,0,0,0,543,546,5,42,0,0,544,545,5,11,0,0,545,547,5,42,0,0,
546,544,1,0,0,0,546,547,1,0,0,0,547,63,1,0,0,0,548,551,3,70,35,0,549,550,
5,11,0,0,550,552,5,42,0,0,551,549,1,0,0,0,551,552,1,0,0,0,552,65,1,0,0,0,
553,558,3,62,31,0,554,555,5,56,0,0,555,557,3,62,31,0,556,554,1,0,0,0,557,
560,1,0,0,0,558,556,1,0,0,0,558,559,1,0,0,0,559,562,1,0,0,0,560,558,1,0,
0,0,561,563,5,56,0,0,562,561,1,0,0,0,562,563,1,0,0,0,563,67,1,0,0,0,564,
569,3,64,32,0,565,566,5,56,0,0,566,568,3,64,32,0,567,565,1,0,0,0,568,571,
1,0,0,0,569,567,1,0,0,0,569,570,1,0,0,0,570,69,1,0,0,0,571,569,1,0,0,0,572,
577,5,42,0,0,573,574,5,51,0,0,574,576,5,42,0,0,575,573,1,0,0,0,576,579,1,
0,0,0,577,575,1,0,0,0,577,578,1,0,0,0,578,71,1,0,0,0,579,577,1,0,0,0,580,
581,5,12,0,0,581,586,5,42,0,0,582,583,5,56,0,0,583,585,5,42,0,0,584,582,
1,0,0,0,585,588,1,0,0,0,586,584,1,0,0,0,586,587,1,0,0,0,587,73,1,0,0,0,588,
586,1,0,0,0,589,590,5,13,0,0,590,595,5,42,0,0,591,592,5,56,0,0,592,594,5,
42,0,0,593,591,1,0,0,0,594,597,1,0,0,0,595,593,1,0,0,0,595,596,1,0,0,0,596,
75,1,0,0,0,597,595,1,0,0,0,598,599,5,14,0,0,599,602,3,98,49,0,600,601,5,
56,0,0,601,603,3,98,49,0,602,600,1,0,0,0,602,603,1,0,0,0,603,77,1,0,0,0,
604,614,3,82,41,0,605,614,3,84,42,0,606,614,3,86,43,0,607,614,3,88,44,0,
608,614,3,90,45,0,609,614,3,14,7,0,610,614,3,154,77,0,611,614,3,10,5,0,612,
614,3,80,40,0,613,604,1,0,0,0,613,605,1,0,0,0,613,606,1,0,0,0,613,607,1,
0,0,0,613,608,1,0,0,0,613,609,1,0,0,0,613,610,1,0,0,0,613,611,1,0,0,0,613,
612,1,0,0,0,614,79,1,0,0,0,615,619,5,39,0,0,616,620,3,14,7,0,617,620,3,90,
45,0,618,620,3,86,43,0,619,616,1,0,0,0,619,617,1,0,0,0,619,618,1,0,0,0,620,
81,1,0,0,0,621,622,5,15,0,0,622,623,3,98,49,0,623,624,5,57,0,0,624,632,3,
96,48,0,625,626,5,16,0,0,626,627,3,98,49,0,627,628,5,57,0,0,628,629,3,96,
48,0,629,631,1,0,0,0,630,625,1,0,0,0,631,634,1,0,0,0,632,630,1,0,0,0,632,
633,1,0,0,0,633,638,1,0,0,0,634,632,1,0,0,0,635,636,5,17,0,0,636,637,5,57,
0,0,637,639,3,96,48,0,638,635,1,0,0,0,638,639,1,0,0,0,639,83,1,0,0,0,640,
641,5,18,0,0,641,642,3,98,49,0,642,643,5,57,0,0,643,647,3,96,48,0,644,645,
5,17,0,0,645,646,5,57,0,0,646,648,3,96,48,0,647,644,1,0,0,0,647,648,1,0,
0,0,648,85,1,0,0,0,649,650,5,19,0,0,650,651,3,148,74,0,651,652,5,20,0,0,
652,653,3,150,75,0,653,654,5,57,0,0,654,658,3,96,48,0,655,656,5,17,0,0,656,
657,5,57,0,0,657,659,3,96,48,0,658,655,1,0,0,0,658,659,1,0,0,0,659,87,1,
0,0,0,660,661,5,21,0,0,661,662,5,57,0,0,662,684,3,96,48,0,663,664,3,94,47,
0,664,665,5,57,0,0,665,666,3,96,48,0,666,668,1,0,0,0,667,663,1,0,0,0,668,
669,1,0,0,0,669,667,1,0,0,0,669,670,1,0,0,0,670,674,1,0,0,0,671,672,5,17,
0,0,672,673,5,57,0,0,673,675,3,96,48,0,674,671,1,0,0,0,674,675,1,0,0,0,675,
679,1,0,0,0,676,677,5,22,0,0,677,678,5,57,0,0,678,680,3,96,48,0,679,676,
1,0,0,0,679,680,1,0,0,0,680,685,1,0,0,0,681,682,5,22,0,0,682,683,5,57,0,
0,683,685,3,96,48,0,684,667,1,0,0,0,684,681,1,0,0,0,685,89,1,0,0,0,686,687,
5,23,0,0,687,692,3,92,46,0,688,689,5,56,0,0,689,691,3,92,46,0,690,688,1,
0,0,0,691,694,1,0,0,0,692,690,1,0,0,0,692,693,1,0,0,0,693,695,1,0,0,0,694,
692,1,0,0,0,695,696,5,57,0,0,696,697,3,96,48,0,697,91,1,0,0,0,698,701,3,
98,49,0,699,700,5,11,0,0,700,702,3,118,59,0,701,699,1,0,0,0,701,702,1,0,
0,0,702,93,1,0,0,0,703,709,5,24,0,0,704,707,3,98,49,0,705,706,5,11,0,0,706,
708,5,42,0,0,707,705,1,0,0,0,707,708,1,0,0,0,708,710,1,0,0,0,709,704,1,0,
0,0,709,710,1,0,0,0,710,95,1,0,0,0,711,722,3,28,14,0,712,713,5,41,0,0,713,
715,5,1,0,0,714,716,3,26,13,0,715,714,1,0,0,0,716,717,1,0,0,0,717,715,1,
0,0,0,717,718,1,0,0,0,718,719,1,0,0,0,719,720,5,2,0,0,720,722,1,0,0,0,721,
711,1,0,0,0,721,712,1,0,0,0,722,97,1,0,0,0,723,729,3,106,53,0,724,725,5,
15,0,0,725,726,3,106,53,0,726,727,5,17,0,0,727,728,3,98,49,0,728,730,1,0,
0,0,729,724,1,0,0,0,729,730,1,0,0,0,730,733,1,0,0,0,731,733,3,102,51,0,732,
723,1,0,0,0,732,731,1,0,0,0,733,99,1,0,0,0,734,737,3,106,53,0,735,737,3,
104,52,0,736,734,1,0,0,0,736,735,1,0,0,0,737,101,1,0,0,0,738,740,5,25,0,
0,739,741,3,22,11,0,740,739,1,0,0,0,740,741,1,0,0,0,741,742,1,0,0,0,742,
743,5,57,0,0,743,744,3,98,49,0,744,103,1,0,0,0,745,747,5,25,0,0,746,748,
3,22,11,0,747,746,1,0,0,0,747,748,1,0,0,0,748,749,1,0,0,0,749,750,5,57,0,
0,750,751,3,100,50,0,751,105,1,0,0,0,752,757,3,108,54,0,753,754,5,26,0,0,
754,756,3,108,54,0,755,753,1,0,0,0,756,759,1,0,0,0,757,755,1,0,0,0,757,758,
1,0,0,0,758,107,1,0,0,0,759,757,1,0,0,0,760,765,3,110,55,0,761,762,5,27,
0,0,762,764,3,110,55,0,763,761,1,0,0,0,764,767,1,0,0,0,765,763,1,0,0,0,765,
766,1,0,0,0,766,109,1,0,0,0,767,765,1,0,0,0,768,769,5,28,0,0,769,772,3,110,
55,0,770,772,3,112,56,0,771,768,1,0,0,0,771,770,1,0,0,0,772,111,1,0,0,0,
773,779,3,118,59,0,774,775,3,114,57,0,775,776,3,118,59,0,776,778,1,0,0,0,
777,774,1,0,0,0,778,781,1,0,0,0,779,777,1,0,0,0,779,780,1,0,0,0,780,113,
1,0,0,0,781,779,1,0,0,0,782,796,5,76,0,0,783,796,5,77,0,0,784,796,5,78,0,
0,785,796,5,79,0,0,786,796,5,80,0,0,787,796,5,81,0,0,788,796,5,82,0,0,789,
796,5,20,0,0,790,791,5,28,0,0,791,796,5,20,0,0,792,796,5,29,0,0,793,794,
5,29,0,0,794,796,5,28,0,0,795,782,1,0,0,0,795,783,1,0,0,0,795,784,1,0,0,
0,795,785,1,0,0,0,795,786,1,0,0,0,795,787,1,0,0,0,795,788,1,0,0,0,795,789,
1,0,0,0,795,790,1,0,0,0,795,792,1,0,0,0,795,793,1,0,0,0,796,115,1,0,0,0,
797,798,5,53,0,0,798,799,3,118,59,0,799,117,1,0,0,0,800,805,3,120,60,0,801,
802,5,63,0,0,802,804,3,120,60,0,803,801,1,0,0,0,804,807,1,0,0,0,805,803,
1,0,0,0,805,806,1,0,0,0,806,119,1,0,0,0,807,805,1,0,0,0,808,813,3,122,61,
0,809,810,5,64,0,0,810,812,3,122,61,0,811,809,1,0,0,0,812,815,1,0,0,0,813,
811,1,0,0,0,813,814,1,0,0,0,814,121,1,0,0,0,815,813,1,0,0,0,816,821,3,124,
62,0,817,818,5,65,0,0,818,820,3,124,62,0,819,817,1,0,0,0,820,823,1,0,0,0,
821,819,1,0,0,0,821,822,1,0,0,0,822,123,1,0,0,0,823,821,1,0,0,0,824,829,
3,126,63,0,825,826,7,2,0,0,826,828,3,126,63,0,827,825,1,0,0,0,828,831,1,
0,0,0,829,827,1,0,0,0,829,830,1,0,0,0,830,125,1,0,0,0,831,829,1,0,0,0,832,
837,3,128,64,0,833,834,7,3,0,0,834,836,3,128,64,0,835,833,1,0,0,0,836,839,
1,0,0,0,837,835,1,0,0,0,837,838,1,0,0,0,838,127,1,0,0,0,839,837,1,0,0,0,
840,845,3,130,65,0,841,842,7,4,0,0,842,844,3,130,65,0,843,841,1,0,0,0,844,
847,1,0,0,0,845,843,1,0,0,0,845,846,1,0,0,0,846,129,1,0,0,0,847,845,1,0,
0,0,848,849,7,5,0,0,849,852,3,130,65,0,850,852,3,132,66,0,851,848,1,0,0,
0,851,850,1,0,0,0,852,131,1,0,0,0,853,856,3,134,67,0,854,855,5,59,0,0,855,
857,3,130,65,0,856,854,1,0,0,0,856,857,1,0,0,0,857,133,1,0,0,0,858,860,5,
40,0,0,859,858,1,0,0,0,859,860,1,0,0,0,860,861,1,0,0,0,861,865,3,136,68,
0,862,864,3,140,70,0,863,862,1,0,0,0,864,867,1,0,0,0,865,863,1,0,0,0,865,
866,1,0,0,0,866,135,1,0,0,0,867,865,1,0,0,0,868,871,5,54,0,0,869,872,3,168,
84,0,870,872,3,138,69,0,871,869,1,0,0,0,871,870,1,0,0,0,871,872,1,0,0,0,
872,873,1,0,0,0,873,896,5,55,0,0,874,876,5,61,0,0,875,877,3,138,69,0,876,
875,1,0,0,0,876,877,1,0,0,0,877,878,1,0,0,0,878,896,5,62,0,0,879,881,5,74,
0,0,880,882,3,152,76,0,881,880,1,0,0,0,881,882,1,0,0,0,882,883,1,0,0,0,883,
896,5,75,0,0,884,896,5,42,0,0,885,896,5,4,0,0,886,888,5,3,0,0,887,886,1,
0,0,0,888,889,1,0,0,0,889,887,1,0,0,0,889,890,1,0,0,0,890,896,1,0,0,0,891,
896,5,52,0,0,892,896,5,30,0,0,893,896,5,31,0,0,894,896,5,32,0,0,895,868,
1,0,0,0,895,874,1,0,0,0,895,879,1,0,0,0,895,884,1,0,0,0,895,885,1,0,0,0,
895,887,1,0,0,0,895,891,1,0,0,0,895,892,1,0,0,0,895,893,1,0,0,0,895,894,
1,0,0,0,896,137,1,0,0,0,897,900,3,98,49,0,898,900,3,116,58,0,899,897,1,0,
0,0,899,898,1,0,0,0,900,915,1,0,0,0,901,916,3,162,81,0,902,905,5,56,0,0,
903,906,3,98,49,0,904,906,3,116,58,0,905,903,1,0,0,0,905,904,1,0,0,0,906,
908,1,0,0,0,907,902,1,0,0,0,908,911,1,0,0,0,909,907,1,0,0,0,909,910,1,0,
0,0,910,913,1,0,0,0,911,909,1,0,0,0,912,914,5,56,0,0,913,912,1,0,0,0,913,
914,1,0,0,0,914,916,1,0,0,0,915,901,1,0,0,0,915,909,1,0,0,0,916,139,1,0,
0,0,917,919,5,54,0,0,918,920,3,156,78,0,919,918,1,0,0,0,919,920,1,0,0,0,
920,921,1,0,0,0,921,929,5,55,0,0,922,923,5,61,0,0,923,924,3,142,71,0,924,
925,5,62,0,0,925,929,1,0,0,0,926,927,5,51,0,0,927,929,5,42,0,0,928,917,1,
0,0,0,928,922,1,0,0,0,928,926,1,0,0,0,929,141,1,0,0,0,930,935,3,144,72,0,
931,932,5,56,0,0,932,934,3,144,72,0,933,931,1,0,0,0,934,937,1,0,0,0,935,
933,1,0,0,0,935,936,1,0,0,0,936,939,1,0,0,0,937,935,1,0,0,0,938,940,5,56,
0,0,939,938,1,0,0,0,939,940,1,0,0,0,940,143,1,0,0,0,941,953,3,98,49,0,942,
944,3,98,49,0,943,942,1,0,0,0,943,944,1,0,0,0,944,945,1,0,0,0,945,947,5,
57,0,0,946,948,3,98,49,0,947,946,1,0,0,0,947,948,1,0,0,0,948,950,1,0,0,0,
949,951,3,146,73,0,950,949,1,0,0,0,950,951,1,0,0,0,951,953,1,0,0,0,952,941,
1,0,0,0,952,943,1,0,0,0,953,145,1,0,0,0,954,956,5,57,0,0,955,957,3,98,49,
0,956,955,1,0,0,0,956,957,1,0,0,0,957,147,1,0,0,0,958,961,3,118,59,0,959,
961,3,116,58,0,960,958,1,0,0,0,960,959,1,0,0,0,961,969,1,0,0,0,962,965,5,
56,0,0,963,966,3,118,59,0,964,966,3,116,58,0,965,963,1,0,0,0,965,964,1,0,
0,0,966,968,1,0,0,0,967,962,1,0,0,0,968,971,1,0,0,0,969,967,1,0,0,0,969,
970,1,0,0,0,970,973,1,0,0,0,971,969,1,0,0,0,972,974,5,56,0,0,973,972,1,0,
0,0,973,974,1,0,0,0,974,149,1,0,0,0,975,980,3,98,49,0,976,977,5,56,0,0,977,
979,3,98,49,0,978,976,1,0,0,0,979,982,1,0,0,0,980,978,1,0,0,0,980,981,1,
0,0,0,981,984,1,0,0,0,982,980,1,0,0,0,983,985,5,56,0,0,984,983,1,0,0,0,984,
985,1,0,0,0,985,151,1,0,0,0,986,987,3,98,49,0,987,988,5,57,0,0,988,989,3,
98,49,0,989,993,1,0,0,0,990,991,5,59,0,0,991,993,3,118,59,0,992,986,1,0,
0,0,992,990,1,0,0,0,993,1012,1,0,0,0,994,1013,3,162,81,0,995,1002,5,56,0,
0,996,997,3,98,49,0,997,998,5,57,0,0,998,999,3,98,49,0,999,1003,1,0,0,0,
1000,1001,5,59,0,0,1001,1003,3,118,59,0,1002,996,1,0,0,0,1002,1000,1,0,0,
0,1003,1005,1,0,0,0,1004,995,1,0,0,0,1005,1008,1,0,0,0,1006,1004,1,0,0,0,
1006,1007,1,0,0,0,1007,1010,1,0,0,0,1008,1006,1,0,0,0,1009,1011,5,56,0,0,
1010,1009,1,0,0,0,1010,1011,1,0,0,0,1011,1013,1,0,0,0,1012,994,1,0,0,0,1012,
1006,1,0,0,0,1013,1035,1,0,0,0,1014,1017,3,98,49,0,1015,1017,3,116,58,0,
1016,1014,1,0,0,0,1016,1015,1,0,0,0,1017,1032,1,0,0,0,1018,1033,3,162,81,
0,1019,1022,5,56,0,0,1020,1023,3,98,49,0,1021,1023,3,116,58,0,1022,1020,
1,0,0,0,1022,1021,1,0,0,0,1023,1025,1,0,0,0,1024,1019,1,0,0,0,1025,1028,
1,0,0,0,1026,1024,1,0,0,0,1026,1027,1,0,0,0,1027,1030,1,0,0,0,1028,1026,
1,0,0,0,1029,1031,5,56,0,0,1030,1029,1,0,0,0,1030,1031,1,0,0,0,1031,1033,
1,0,0,0,1032,1018,1,0,0,0,1032,1026,1,0,0,0,1033,1035,1,0,0,0,1034,992,1,
0,0,0,1034,1016,1,0,0,0,1035,153,1,0,0,0,1036,1037,5,33,0,0,1037,1043,5,
42,0,0,1038,1040,5,54,0,0,1039,1041,3,156,78,0,1040,1039,1,0,0,0,1040,1041,
1,0,0,0,1041,1042,1,0,0,0,1042,1044,5,55,0,0,1043,1038,1,0,0,0,1043,1044,
1,0,0,0,1044,1045,1,0,0,0,1045,1046,5,57,0,0,1046,1047,3,96,48,0,1047,155,
1,0,0,0,1048,1053,3,158,79,0,1049,1050,5,56,0,0,1050,1052,3,158,79,0,1051,
1049,1,0,0,0,1052,1055,1,0,0,0,1053,1051,1,0,0,0,1053,1054,1,0,0,0,1054,
1057,1,0,0,0,1055,1053,1,0,0,0,1056,1058,5,56,0,0,1057,1056,1,0,0,0,1057,
1058,1,0,0,0,1058,157,1,0,0,0,1059,1061,3,98,49,0,1060,1062,3,162,81,0,1061,
1060,1,0,0,0,1061,1062,1,0,0,0,1062,1072,1,0,0,0,1063,1064,3,98,49,0,1064,
1065,5,60,0,0,1065,1066,3,98,49,0,1066,1072,1,0,0,0,1067,1068,5,59,0,0,1068,
1072,3,98,49,0,1069,1070,5,53,0,0,1070,1072,3,98,49,0,1071,1059,1,0,0,0,
1071,1063,1,0,0,0,1071,1067,1,0,0,0,1071,1069,1,0,0,0,1072,159,1,0,0,0,1073,
1076,3,162,81,0,1074,1076,3,164,82,0,1075,1073,1,0,0,0,1075,1074,1,0,0,0,
1076,161,1,0,0,0,1077,1079,5,39,0,0,1078,1077,1,0,0,0,1078,1079,1,0,0,0,
1079,1080,1,0,0,0,1080,1081,5,19,0,0,1081,1082,3,148,74,0,1082,1083,5,20,
0,0,1083,1085,3,106,53,0,1084,1086,3,160,80,0,1085,1084,1,0,0,0,1085,1086,
1,0,0,0,1086,163,1,0,0,0,1087,1088,5,15,0,0,1088,1090,3,100,50,0,1089,1091,
3,160,80,0,1090,1089,1,0,0,0,1090,1091,1,0,0,0,1091,165,1,0,0,0,1092,1093,
5,42,0,0,1093,167,1,0,0,0,1094,1096,5,34,0,0,1095,1097,3,170,85,0,1096,1095,
1,0,0,0,1096,1097,1,0,0,0,1097,169,1,0,0,0,1098,1099,5,9,0,0,1099,1102,3,
98,49,0,1100,1102,3,150,75,0,1101,1098,1,0,0,0,1101,1100,1,0,0,0,1102,171,
1,0,0,0,166,177,181,183,192,201,204,211,217,227,234,241,247,251,257,263,
267,274,276,278,283,285,287,291,297,301,308,310,312,317,319,324,329,335,
339,345,351,355,362,364,366,371,373,375,379,385,389,396,398,400,405,407,
413,420,424,436,443,448,452,455,461,465,470,474,478,492,500,508,510,514,
523,530,532,541,546,551,558,562,569,577,586,595,602,613,619,632,638,647,
658,669,674,679,684,692,701,707,709,717,721,729,732,736,740,747,757,765,
771,779,795,805,813,821,829,837,845,851,856,859,865,871,876,881,889,895,
899,905,909,913,915,919,928,935,939,943,947,950,952,956,960,965,969,973,
980,984,992,1002,1006,1010,1012,1016,1022,1026,1030,1032,1034,1040,1043,
1053,1057,1061,1071,1075,1078,1085,1090,1096,1101];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class Python3Parser extends antlr4.Parser {

    static grammarFileName = "Python3Parser.g4";
    static literalNames = [ null, null, null, null, null, null, "'def'", 
                            "'return'", "'raise'", "'from'", "'import'", 
                            "'as'", "'global'", "'nonlocal'", "'assert'", 
                            "'if'", "'elif'", "'else'", "'while'", "'for'", 
                            "'in'", "'try'", "'finally'", "'with'", "'except'", 
                            "'lambda'", "'or'", "'and'", "'not'", "'is'", 
                            "'None'", "'True'", "'False'", "'class'", "'yield'", 
                            "'del'", "'pass'", "'continue'", "'break'", 
                            "'async'", "'await'", null, null, null, null, 
                            null, null, null, null, null, null, "'.'", "'...'", 
                            "'*'", "'('", "')'", "','", "':'", "';'", "'**'", 
                            "'='", "'['", "']'", "'|'", "'^'", "'&'", "'<<'", 
                            "'>>'", "'+'", "'-'", "'/'", "'%'", "'//'", 
                            "'~'", "'{'", "'}'", "'<'", "'>'", "'=='", "'>='", 
                            "'<='", "'<>'", "'!='", "'@'", "'->'", "'+='", 
                            "'-='", "'*='", "'@='", "'/='", "'%='", "'&='", 
                            "'|='", "'^='", "'<<='", "'>>='", "'**='", "'//='" ];
    static symbolicNames = [ null, "INDENT", "DEDENT", "STRING", "NUMBER", 
                             "INTEGER", "DEF", "RETURN", "RAISE", "FROM", 
                             "IMPORT", "AS", "GLOBAL", "NONLOCAL", "ASSERT", 
                             "IF", "ELIF", "ELSE", "WHILE", "FOR", "IN", 
                             "TRY", "FINALLY", "WITH", "EXCEPT", "LAMBDA", 
                             "OR", "AND", "NOT", "IS", "NONE", "TRUE", "FALSE", 
                             "CLASS", "YIELD", "DEL", "PASS", "CONTINUE", 
                             "BREAK", "ASYNC", "AWAIT", "NEWLINE", "NAME", 
                             "STRING_LITERAL", "BYTES_LITERAL", "DECIMAL_INTEGER", 
                             "OCT_INTEGER", "HEX_INTEGER", "BIN_INTEGER", 
                             "FLOAT_NUMBER", "IMAG_NUMBER", "DOT", "ELLIPSIS", 
                             "STAR", "OPEN_PAREN", "CLOSE_PAREN", "COMMA", 
                             "COLON", "SEMI_COLON", "POWER", "ASSIGN", "OPEN_BRACK", 
                             "CLOSE_BRACK", "OR_OP", "XOR", "AND_OP", "LEFT_SHIFT", 
                             "RIGHT_SHIFT", "ADD", "MINUS", "DIV", "MOD", 
                             "IDIV", "NOT_OP", "OPEN_BRACE", "CLOSE_BRACE", 
                             "LESS_THAN", "GREATER_THAN", "EQUALS", "GT_EQ", 
                             "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", 
                             "ADD_ASSIGN", "SUB_ASSIGN", "MULT_ASSIGN", 
                             "AT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", 
                             "OR_ASSIGN", "XOR_ASSIGN", "LEFT_SHIFT_ASSIGN", 
                             "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", "IDIV_ASSIGN", 
                             "SKIP_", "UNKNOWN_CHAR" ];
    static ruleNames = [ "single_input", "file_input", "eval_input", "decorator", 
                         "decorators", "decorated", "async_funcdef", "funcdef", 
                         "parameters", "typedargslist", "tfpdef", "varargslist", 
                         "vfpdef", "stmt", "simple_stmt", "small_stmt", 
                         "expr_stmt", "annassign", "testlist_star_expr", 
                         "augassign", "del_stmt", "pass_stmt", "flow_stmt", 
                         "break_stmt", "continue_stmt", "return_stmt", "yield_stmt", 
                         "raise_stmt", "import_stmt", "import_name", "import_from", 
                         "import_as_name", "dotted_as_name", "import_as_names", 
                         "dotted_as_names", "dotted_name", "global_stmt", 
                         "nonlocal_stmt", "assert_stmt", "compound_stmt", 
                         "async_stmt", "if_stmt", "while_stmt", "for_stmt", 
                         "try_stmt", "with_stmt", "with_item", "except_clause", 
                         "suite", "test", "test_nocond", "lambdef", "lambdef_nocond", 
                         "or_test", "and_test", "not_test", "comparison", 
                         "comp_op", "star_expr", "expr", "xor_expr", "and_expr", 
                         "shift_expr", "arith_expr", "term", "factor", "power", 
                         "atom_expr", "atom", "testlist_comp", "trailer", 
                         "subscriptlist", "subscript_", "sliceop", "exprlist", 
                         "testlist", "dictorsetmaker", "classdef", "arglist", 
                         "argument", "comp_iter", "comp_for", "comp_if", 
                         "encoding_decl", "yield_expr", "yield_arg" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = Python3Parser.ruleNames;
        this.literalNames = Python3Parser.literalNames;
        this.symbolicNames = Python3Parser.symbolicNames;
    }



	single_input() {
	    let localctx = new Single_inputContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, Python3Parser.RULE_single_input);
	    try {
	        this.state = 177;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 41:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 172;
	            this.match(Python3Parser.NEWLINE);
	            break;
	        case 3:
	        case 4:
	        case 7:
	        case 8:
	        case 9:
	        case 10:
	        case 12:
	        case 13:
	        case 14:
	        case 25:
	        case 28:
	        case 30:
	        case 31:
	        case 32:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 40:
	        case 42:
	        case 52:
	        case 53:
	        case 54:
	        case 61:
	        case 68:
	        case 69:
	        case 73:
	        case 74:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 173;
	            this.simple_stmt();
	            break;
	        case 6:
	        case 15:
	        case 18:
	        case 19:
	        case 21:
	        case 23:
	        case 33:
	        case 39:
	        case 83:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 174;
	            this.compound_stmt();
	            this.state = 175;
	            this.match(Python3Parser.NEWLINE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	file_input() {
	    let localctx = new File_inputContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, Python3Parser.RULE_file_input);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 183;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 3534551000) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 544212991) !== 0) || ((((_la - 68)) & ~0x1f) === 0 && ((1 << (_la - 68)) & 32867) !== 0)) {
	            this.state = 181;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 41:
	                this.state = 179;
	                this.match(Python3Parser.NEWLINE);
	                break;
	            case 3:
	            case 4:
	            case 6:
	            case 7:
	            case 8:
	            case 9:
	            case 10:
	            case 12:
	            case 13:
	            case 14:
	            case 15:
	            case 18:
	            case 19:
	            case 21:
	            case 23:
	            case 25:
	            case 28:
	            case 30:
	            case 31:
	            case 32:
	            case 33:
	            case 34:
	            case 35:
	            case 36:
	            case 37:
	            case 38:
	            case 39:
	            case 40:
	            case 42:
	            case 52:
	            case 53:
	            case 54:
	            case 61:
	            case 68:
	            case 69:
	            case 73:
	            case 74:
	            case 83:
	                this.state = 180;
	                this.stmt();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 185;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 186;
	        this.match(Python3Parser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eval_input() {
	    let localctx = new Eval_inputContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, Python3Parser.RULE_eval_input);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 188;
	        this.testlist();
	        this.state = 192;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===41) {
	            this.state = 189;
	            this.match(Python3Parser.NEWLINE);
	            this.state = 194;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 195;
	        this.match(Python3Parser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decorator() {
	    let localctx = new DecoratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, Python3Parser.RULE_decorator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 197;
	        this.match(Python3Parser.AT);
	        this.state = 198;
	        this.dotted_name();
	        this.state = 204;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===54) {
	            this.state = 199;
	            this.match(Python3Parser.OPEN_PAREN);
	            this.state = 201;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3523215384) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 678429953) !== 0) || ((((_la - 68)) & ~0x1f) === 0 && ((1 << (_la - 68)) & 99) !== 0)) {
	                this.state = 200;
	                this.arglist();
	            }

	            this.state = 203;
	            this.match(Python3Parser.CLOSE_PAREN);
	        }

	        this.state = 206;
	        this.match(Python3Parser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decorators() {
	    let localctx = new DecoratorsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, Python3Parser.RULE_decorators);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 209; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 208;
	            this.decorator();
	            this.state = 211; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===83);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decorated() {
	    let localctx = new DecoratedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, Python3Parser.RULE_decorated);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 213;
	        this.decorators();
	        this.state = 217;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	            this.state = 214;
	            this.classdef();
	            break;
	        case 6:
	            this.state = 215;
	            this.funcdef();
	            break;
	        case 39:
	            this.state = 216;
	            this.async_funcdef();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	async_funcdef() {
	    let localctx = new Async_funcdefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, Python3Parser.RULE_async_funcdef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 219;
	        this.match(Python3Parser.ASYNC);
	        this.state = 220;
	        this.funcdef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	funcdef() {
	    let localctx = new FuncdefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, Python3Parser.RULE_funcdef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 222;
	        this.match(Python3Parser.DEF);
	        this.state = 223;
	        this.match(Python3Parser.NAME);
	        this.state = 224;
	        this.parameters();
	        this.state = 227;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===84) {
	            this.state = 225;
	            this.match(Python3Parser.ARROW);
	            this.state = 226;
	            this.test();
	        }

	        this.state = 229;
	        this.match(Python3Parser.COLON);
	        this.state = 230;
	        this.suite();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameters() {
	    let localctx = new ParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, Python3Parser.RULE_parameters);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 232;
	        this.match(Python3Parser.OPEN_PAREN);
	        this.state = 234;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 133121) !== 0)) {
	            this.state = 233;
	            this.typedargslist();
	        }

	        this.state = 236;
	        this.match(Python3Parser.CLOSE_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typedargslist() {
	    let localctx = new TypedargslistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, Python3Parser.RULE_typedargslist);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 319;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 42:
	            this.state = 238;
	            this.tfpdef();
	            this.state = 241;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===60) {
	                this.state = 239;
	                this.match(Python3Parser.ASSIGN);
	                this.state = 240;
	                this.test();
	            }

	            this.state = 251;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,12,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 243;
	                    this.match(Python3Parser.COMMA);
	                    this.state = 244;
	                    this.tfpdef();
	                    this.state = 247;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===60) {
	                        this.state = 245;
	                        this.match(Python3Parser.ASSIGN);
	                        this.state = 246;
	                        this.test();
	                    }
	             
	                }
	                this.state = 253;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,12,this._ctx);
	            }

	            this.state = 287;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===56) {
	                this.state = 254;
	                this.match(Python3Parser.COMMA);
	                this.state = 285;
	                this._errHandler.sync(this);
	                switch (this._input.LA(1)) {
	                case 53:
	                	this.state = 255;
	                	this.match(Python3Parser.STAR);
	                	this.state = 257;
	                	this._errHandler.sync(this);
	                	_la = this._input.LA(1);
	                	if(_la===42) {
	                	    this.state = 256;
	                	    this.tfpdef();
	                	}

	                	this.state = 267;
	                	this._errHandler.sync(this);
	                	var _alt = this._interp.adaptivePredict(this._input,15,this._ctx)
	                	while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                	    if(_alt===1) {
	                	        this.state = 259;
	                	        this.match(Python3Parser.COMMA);
	                	        this.state = 260;
	                	        this.tfpdef();
	                	        this.state = 263;
	                	        this._errHandler.sync(this);
	                	        _la = this._input.LA(1);
	                	        if(_la===60) {
	                	            this.state = 261;
	                	            this.match(Python3Parser.ASSIGN);
	                	            this.state = 262;
	                	            this.test();
	                	        }
	                	 
	                	    }
	                	    this.state = 269;
	                	    this._errHandler.sync(this);
	                	    _alt = this._interp.adaptivePredict(this._input,15,this._ctx);
	                	}

	                	this.state = 278;
	                	this._errHandler.sync(this);
	                	_la = this._input.LA(1);
	                	if(_la===56) {
	                	    this.state = 270;
	                	    this.match(Python3Parser.COMMA);
	                	    this.state = 276;
	                	    this._errHandler.sync(this);
	                	    _la = this._input.LA(1);
	                	    if(_la===59) {
	                	        this.state = 271;
	                	        this.match(Python3Parser.POWER);
	                	        this.state = 272;
	                	        this.tfpdef();
	                	        this.state = 274;
	                	        this._errHandler.sync(this);
	                	        _la = this._input.LA(1);
	                	        if(_la===56) {
	                	            this.state = 273;
	                	            this.match(Python3Parser.COMMA);
	                	        }

	                	    }

	                	}

	                	break;
	                case 59:
	                	this.state = 280;
	                	this.match(Python3Parser.POWER);
	                	this.state = 281;
	                	this.tfpdef();
	                	this.state = 283;
	                	this._errHandler.sync(this);
	                	_la = this._input.LA(1);
	                	if(_la===56) {
	                	    this.state = 282;
	                	    this.match(Python3Parser.COMMA);
	                	}

	                	break;
	                case 55:
	                	break;
	                default:
	                	break;
	                }
	            }

	            break;
	        case 53:
	            this.state = 289;
	            this.match(Python3Parser.STAR);
	            this.state = 291;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===42) {
	                this.state = 290;
	                this.tfpdef();
	            }

	            this.state = 301;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,24,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 293;
	                    this.match(Python3Parser.COMMA);
	                    this.state = 294;
	                    this.tfpdef();
	                    this.state = 297;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===60) {
	                        this.state = 295;
	                        this.match(Python3Parser.ASSIGN);
	                        this.state = 296;
	                        this.test();
	                    }
	             
	                }
	                this.state = 303;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,24,this._ctx);
	            }

	            this.state = 312;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===56) {
	                this.state = 304;
	                this.match(Python3Parser.COMMA);
	                this.state = 310;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===59) {
	                    this.state = 305;
	                    this.match(Python3Parser.POWER);
	                    this.state = 306;
	                    this.tfpdef();
	                    this.state = 308;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===56) {
	                        this.state = 307;
	                        this.match(Python3Parser.COMMA);
	                    }

	                }

	            }

	            break;
	        case 59:
	            this.state = 314;
	            this.match(Python3Parser.POWER);
	            this.state = 315;
	            this.tfpdef();
	            this.state = 317;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===56) {
	                this.state = 316;
	                this.match(Python3Parser.COMMA);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tfpdef() {
	    let localctx = new TfpdefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, Python3Parser.RULE_tfpdef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 321;
	        this.match(Python3Parser.NAME);
	        this.state = 324;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===57) {
	            this.state = 322;
	            this.match(Python3Parser.COLON);
	            this.state = 323;
	            this.test();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varargslist() {
	    let localctx = new VarargslistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, Python3Parser.RULE_varargslist);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 407;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 42:
	            this.state = 326;
	            this.vfpdef();
	            this.state = 329;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===60) {
	                this.state = 327;
	                this.match(Python3Parser.ASSIGN);
	                this.state = 328;
	                this.test();
	            }

	            this.state = 339;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,33,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 331;
	                    this.match(Python3Parser.COMMA);
	                    this.state = 332;
	                    this.vfpdef();
	                    this.state = 335;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===60) {
	                        this.state = 333;
	                        this.match(Python3Parser.ASSIGN);
	                        this.state = 334;
	                        this.test();
	                    }
	             
	                }
	                this.state = 341;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,33,this._ctx);
	            }

	            this.state = 375;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===56) {
	                this.state = 342;
	                this.match(Python3Parser.COMMA);
	                this.state = 373;
	                this._errHandler.sync(this);
	                switch (this._input.LA(1)) {
	                case 53:
	                	this.state = 343;
	                	this.match(Python3Parser.STAR);
	                	this.state = 345;
	                	this._errHandler.sync(this);
	                	_la = this._input.LA(1);
	                	if(_la===42) {
	                	    this.state = 344;
	                	    this.vfpdef();
	                	}

	                	this.state = 355;
	                	this._errHandler.sync(this);
	                	var _alt = this._interp.adaptivePredict(this._input,36,this._ctx)
	                	while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                	    if(_alt===1) {
	                	        this.state = 347;
	                	        this.match(Python3Parser.COMMA);
	                	        this.state = 348;
	                	        this.vfpdef();
	                	        this.state = 351;
	                	        this._errHandler.sync(this);
	                	        _la = this._input.LA(1);
	                	        if(_la===60) {
	                	            this.state = 349;
	                	            this.match(Python3Parser.ASSIGN);
	                	            this.state = 350;
	                	            this.test();
	                	        }
	                	 
	                	    }
	                	    this.state = 357;
	                	    this._errHandler.sync(this);
	                	    _alt = this._interp.adaptivePredict(this._input,36,this._ctx);
	                	}

	                	this.state = 366;
	                	this._errHandler.sync(this);
	                	_la = this._input.LA(1);
	                	if(_la===56) {
	                	    this.state = 358;
	                	    this.match(Python3Parser.COMMA);
	                	    this.state = 364;
	                	    this._errHandler.sync(this);
	                	    _la = this._input.LA(1);
	                	    if(_la===59) {
	                	        this.state = 359;
	                	        this.match(Python3Parser.POWER);
	                	        this.state = 360;
	                	        this.vfpdef();
	                	        this.state = 362;
	                	        this._errHandler.sync(this);
	                	        _la = this._input.LA(1);
	                	        if(_la===56) {
	                	            this.state = 361;
	                	            this.match(Python3Parser.COMMA);
	                	        }

	                	    }

	                	}

	                	break;
	                case 59:
	                	this.state = 368;
	                	this.match(Python3Parser.POWER);
	                	this.state = 369;
	                	this.vfpdef();
	                	this.state = 371;
	                	this._errHandler.sync(this);
	                	_la = this._input.LA(1);
	                	if(_la===56) {
	                	    this.state = 370;
	                	    this.match(Python3Parser.COMMA);
	                	}

	                	break;
	                case 57:
	                	break;
	                default:
	                	break;
	                }
	            }

	            break;
	        case 53:
	            this.state = 377;
	            this.match(Python3Parser.STAR);
	            this.state = 379;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===42) {
	                this.state = 378;
	                this.vfpdef();
	            }

	            this.state = 389;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,45,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 381;
	                    this.match(Python3Parser.COMMA);
	                    this.state = 382;
	                    this.vfpdef();
	                    this.state = 385;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===60) {
	                        this.state = 383;
	                        this.match(Python3Parser.ASSIGN);
	                        this.state = 384;
	                        this.test();
	                    }
	             
	                }
	                this.state = 391;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,45,this._ctx);
	            }

	            this.state = 400;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===56) {
	                this.state = 392;
	                this.match(Python3Parser.COMMA);
	                this.state = 398;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===59) {
	                    this.state = 393;
	                    this.match(Python3Parser.POWER);
	                    this.state = 394;
	                    this.vfpdef();
	                    this.state = 396;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===56) {
	                        this.state = 395;
	                        this.match(Python3Parser.COMMA);
	                    }

	                }

	            }

	            break;
	        case 59:
	            this.state = 402;
	            this.match(Python3Parser.POWER);
	            this.state = 403;
	            this.vfpdef();
	            this.state = 405;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===56) {
	                this.state = 404;
	                this.match(Python3Parser.COMMA);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vfpdef() {
	    let localctx = new VfpdefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, Python3Parser.RULE_vfpdef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 409;
	        this.match(Python3Parser.NAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt() {
	    let localctx = new StmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, Python3Parser.RULE_stmt);
	    try {
	        this.state = 413;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 4:
	        case 7:
	        case 8:
	        case 9:
	        case 10:
	        case 12:
	        case 13:
	        case 14:
	        case 25:
	        case 28:
	        case 30:
	        case 31:
	        case 32:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 40:
	        case 42:
	        case 52:
	        case 53:
	        case 54:
	        case 61:
	        case 68:
	        case 69:
	        case 73:
	        case 74:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 411;
	            this.simple_stmt();
	            break;
	        case 6:
	        case 15:
	        case 18:
	        case 19:
	        case 21:
	        case 23:
	        case 33:
	        case 39:
	        case 83:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 412;
	            this.compound_stmt();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_stmt() {
	    let localctx = new Simple_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, Python3Parser.RULE_simple_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 415;
	        this.small_stmt();
	        this.state = 420;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,52,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 416;
	                this.match(Python3Parser.SEMI_COLON);
	                this.state = 417;
	                this.small_stmt(); 
	            }
	            this.state = 422;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,52,this._ctx);
	        }

	        this.state = 424;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===58) {
	            this.state = 423;
	            this.match(Python3Parser.SEMI_COLON);
	        }

	        this.state = 426;
	        this.match(Python3Parser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	small_stmt() {
	    let localctx = new Small_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, Python3Parser.RULE_small_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 436;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 4:
	        case 25:
	        case 28:
	        case 30:
	        case 31:
	        case 32:
	        case 40:
	        case 42:
	        case 52:
	        case 53:
	        case 54:
	        case 61:
	        case 68:
	        case 69:
	        case 73:
	        case 74:
	            this.state = 428;
	            this.expr_stmt();
	            break;
	        case 35:
	            this.state = 429;
	            this.del_stmt();
	            break;
	        case 36:
	            this.state = 430;
	            this.pass_stmt();
	            break;
	        case 7:
	        case 8:
	        case 34:
	        case 37:
	        case 38:
	            this.state = 431;
	            this.flow_stmt();
	            break;
	        case 9:
	        case 10:
	            this.state = 432;
	            this.import_stmt();
	            break;
	        case 12:
	            this.state = 433;
	            this.global_stmt();
	            break;
	        case 13:
	            this.state = 434;
	            this.nonlocal_stmt();
	            break;
	        case 14:
	            this.state = 435;
	            this.assert_stmt();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr_stmt() {
	    let localctx = new Expr_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, Python3Parser.RULE_expr_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 438;
	        this.testlist_star_expr();
	        this.state = 455;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 57:
	            this.state = 439;
	            this.annassign();
	            break;
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	            this.state = 440;
	            this.augassign();
	            this.state = 443;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 34:
	                this.state = 441;
	                this.yield_expr();
	                break;
	            case 3:
	            case 4:
	            case 25:
	            case 28:
	            case 30:
	            case 31:
	            case 32:
	            case 40:
	            case 42:
	            case 52:
	            case 54:
	            case 61:
	            case 68:
	            case 69:
	            case 73:
	            case 74:
	                this.state = 442;
	                this.testlist();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 41:
	        case 58:
	        case 60:
	            this.state = 452;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===60) {
	                this.state = 445;
	                this.match(Python3Parser.ASSIGN);
	                this.state = 448;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 34:
	                    this.state = 446;
	                    this.yield_expr();
	                    break;
	                case 3:
	                case 4:
	                case 25:
	                case 28:
	                case 30:
	                case 31:
	                case 32:
	                case 40:
	                case 42:
	                case 52:
	                case 53:
	                case 54:
	                case 61:
	                case 68:
	                case 69:
	                case 73:
	                case 74:
	                    this.state = 447;
	                    this.testlist_star_expr();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 454;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annassign() {
	    let localctx = new AnnassignContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, Python3Parser.RULE_annassign);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 457;
	        this.match(Python3Parser.COLON);
	        this.state = 458;
	        this.test();
	        this.state = 461;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===60) {
	            this.state = 459;
	            this.match(Python3Parser.ASSIGN);
	            this.state = 460;
	            this.test();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	testlist_star_expr() {
	    let localctx = new Testlist_star_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, Python3Parser.RULE_testlist_star_expr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 465;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 4:
	        case 25:
	        case 28:
	        case 30:
	        case 31:
	        case 32:
	        case 40:
	        case 42:
	        case 52:
	        case 54:
	        case 61:
	        case 68:
	        case 69:
	        case 73:
	        case 74:
	            this.state = 463;
	            this.test();
	            break;
	        case 53:
	            this.state = 464;
	            this.star_expr();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 474;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,62,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 467;
	                this.match(Python3Parser.COMMA);
	                this.state = 470;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 3:
	                case 4:
	                case 25:
	                case 28:
	                case 30:
	                case 31:
	                case 32:
	                case 40:
	                case 42:
	                case 52:
	                case 54:
	                case 61:
	                case 68:
	                case 69:
	                case 73:
	                case 74:
	                    this.state = 468;
	                    this.test();
	                    break;
	                case 53:
	                    this.state = 469;
	                    this.star_expr();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 476;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,62,this._ctx);
	        }

	        this.state = 478;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===56) {
	            this.state = 477;
	            this.match(Python3Parser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	augassign() {
	    let localctx = new AugassignContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, Python3Parser.RULE_augassign);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 480;
	        _la = this._input.LA(1);
	        if(!(((((_la - 85)) & ~0x1f) === 0 && ((1 << (_la - 85)) & 8191) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	del_stmt() {
	    let localctx = new Del_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, Python3Parser.RULE_del_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 482;
	        this.match(Python3Parser.DEL);
	        this.state = 483;
	        this.exprlist();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pass_stmt() {
	    let localctx = new Pass_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, Python3Parser.RULE_pass_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 485;
	        this.match(Python3Parser.PASS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flow_stmt() {
	    let localctx = new Flow_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, Python3Parser.RULE_flow_stmt);
	    try {
	        this.state = 492;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 487;
	            this.break_stmt();
	            break;
	        case 37:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 488;
	            this.continue_stmt();
	            break;
	        case 7:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 489;
	            this.return_stmt();
	            break;
	        case 8:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 490;
	            this.raise_stmt();
	            break;
	        case 34:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 491;
	            this.yield_stmt();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	break_stmt() {
	    let localctx = new Break_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, Python3Parser.RULE_break_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 494;
	        this.match(Python3Parser.BREAK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	continue_stmt() {
	    let localctx = new Continue_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, Python3Parser.RULE_continue_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 496;
	        this.match(Python3Parser.CONTINUE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	return_stmt() {
	    let localctx = new Return_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, Python3Parser.RULE_return_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 498;
	        this.match(Python3Parser.RETURN);
	        this.state = 500;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3523215384) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 542115073) !== 0) || ((((_la - 68)) & ~0x1f) === 0 && ((1 << (_la - 68)) & 99) !== 0)) {
	            this.state = 499;
	            this.testlist();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yield_stmt() {
	    let localctx = new Yield_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, Python3Parser.RULE_yield_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 502;
	        this.yield_expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	raise_stmt() {
	    let localctx = new Raise_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, Python3Parser.RULE_raise_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 504;
	        this.match(Python3Parser.RAISE);
	        this.state = 510;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3523215384) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 542115073) !== 0) || ((((_la - 68)) & ~0x1f) === 0 && ((1 << (_la - 68)) & 99) !== 0)) {
	            this.state = 505;
	            this.test();
	            this.state = 508;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===9) {
	                this.state = 506;
	                this.match(Python3Parser.FROM);
	                this.state = 507;
	                this.test();
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_stmt() {
	    let localctx = new Import_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, Python3Parser.RULE_import_stmt);
	    try {
	        this.state = 514;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 10:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 512;
	            this.import_name();
	            break;
	        case 9:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 513;
	            this.import_from();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_name() {
	    let localctx = new Import_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, Python3Parser.RULE_import_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 516;
	        this.match(Python3Parser.IMPORT);
	        this.state = 517;
	        this.dotted_as_names();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_from() {
	    let localctx = new Import_fromContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, Python3Parser.RULE_import_from);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 519;
	        this.match(Python3Parser.FROM);
	        this.state = 532;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 523;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===51 || _la===52) {
	                this.state = 520;
	                _la = this._input.LA(1);
	                if(!(_la===51 || _la===52)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 525;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 526;
	            this.dotted_name();
	            break;

	        case 2:
	            this.state = 528; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 527;
	                _la = this._input.LA(1);
	                if(!(_la===51 || _la===52)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 530; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===51 || _la===52);
	            break;

	        }
	        this.state = 534;
	        this.match(Python3Parser.IMPORT);
	        this.state = 541;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 53:
	            this.state = 535;
	            this.match(Python3Parser.STAR);
	            break;
	        case 54:
	            this.state = 536;
	            this.match(Python3Parser.OPEN_PAREN);
	            this.state = 537;
	            this.import_as_names();
	            this.state = 538;
	            this.match(Python3Parser.CLOSE_PAREN);
	            break;
	        case 42:
	            this.state = 540;
	            this.import_as_names();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_as_name() {
	    let localctx = new Import_as_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, Python3Parser.RULE_import_as_name);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 543;
	        this.match(Python3Parser.NAME);
	        this.state = 546;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===11) {
	            this.state = 544;
	            this.match(Python3Parser.AS);
	            this.state = 545;
	            this.match(Python3Parser.NAME);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dotted_as_name() {
	    let localctx = new Dotted_as_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, Python3Parser.RULE_dotted_as_name);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 548;
	        this.dotted_name();
	        this.state = 551;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===11) {
	            this.state = 549;
	            this.match(Python3Parser.AS);
	            this.state = 550;
	            this.match(Python3Parser.NAME);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_as_names() {
	    let localctx = new Import_as_namesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, Python3Parser.RULE_import_as_names);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 553;
	        this.import_as_name();
	        this.state = 558;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,75,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 554;
	                this.match(Python3Parser.COMMA);
	                this.state = 555;
	                this.import_as_name(); 
	            }
	            this.state = 560;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,75,this._ctx);
	        }

	        this.state = 562;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===56) {
	            this.state = 561;
	            this.match(Python3Parser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dotted_as_names() {
	    let localctx = new Dotted_as_namesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, Python3Parser.RULE_dotted_as_names);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 564;
	        this.dotted_as_name();
	        this.state = 569;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===56) {
	            this.state = 565;
	            this.match(Python3Parser.COMMA);
	            this.state = 566;
	            this.dotted_as_name();
	            this.state = 571;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dotted_name() {
	    let localctx = new Dotted_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, Python3Parser.RULE_dotted_name);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 572;
	        this.match(Python3Parser.NAME);
	        this.state = 577;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===51) {
	            this.state = 573;
	            this.match(Python3Parser.DOT);
	            this.state = 574;
	            this.match(Python3Parser.NAME);
	            this.state = 579;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	global_stmt() {
	    let localctx = new Global_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, Python3Parser.RULE_global_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 580;
	        this.match(Python3Parser.GLOBAL);
	        this.state = 581;
	        this.match(Python3Parser.NAME);
	        this.state = 586;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===56) {
	            this.state = 582;
	            this.match(Python3Parser.COMMA);
	            this.state = 583;
	            this.match(Python3Parser.NAME);
	            this.state = 588;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonlocal_stmt() {
	    let localctx = new Nonlocal_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, Python3Parser.RULE_nonlocal_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 589;
	        this.match(Python3Parser.NONLOCAL);
	        this.state = 590;
	        this.match(Python3Parser.NAME);
	        this.state = 595;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===56) {
	            this.state = 591;
	            this.match(Python3Parser.COMMA);
	            this.state = 592;
	            this.match(Python3Parser.NAME);
	            this.state = 597;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assert_stmt() {
	    let localctx = new Assert_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, Python3Parser.RULE_assert_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 598;
	        this.match(Python3Parser.ASSERT);
	        this.state = 599;
	        this.test();
	        this.state = 602;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===56) {
	            this.state = 600;
	            this.match(Python3Parser.COMMA);
	            this.state = 601;
	            this.test();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compound_stmt() {
	    let localctx = new Compound_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, Python3Parser.RULE_compound_stmt);
	    try {
	        this.state = 613;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 15:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 604;
	            this.if_stmt();
	            break;
	        case 18:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 605;
	            this.while_stmt();
	            break;
	        case 19:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 606;
	            this.for_stmt();
	            break;
	        case 21:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 607;
	            this.try_stmt();
	            break;
	        case 23:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 608;
	            this.with_stmt();
	            break;
	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 609;
	            this.funcdef();
	            break;
	        case 33:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 610;
	            this.classdef();
	            break;
	        case 83:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 611;
	            this.decorated();
	            break;
	        case 39:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 612;
	            this.async_stmt();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	async_stmt() {
	    let localctx = new Async_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, Python3Parser.RULE_async_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 615;
	        this.match(Python3Parser.ASYNC);
	        this.state = 619;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 6:
	            this.state = 616;
	            this.funcdef();
	            break;
	        case 23:
	            this.state = 617;
	            this.with_stmt();
	            break;
	        case 19:
	            this.state = 618;
	            this.for_stmt();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_stmt() {
	    let localctx = new If_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, Python3Parser.RULE_if_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 621;
	        this.match(Python3Parser.IF);
	        this.state = 622;
	        this.test();
	        this.state = 623;
	        this.match(Python3Parser.COLON);
	        this.state = 624;
	        this.suite();
	        this.state = 632;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===16) {
	            this.state = 625;
	            this.match(Python3Parser.ELIF);
	            this.state = 626;
	            this.test();
	            this.state = 627;
	            this.match(Python3Parser.COLON);
	            this.state = 628;
	            this.suite();
	            this.state = 634;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 638;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17) {
	            this.state = 635;
	            this.match(Python3Parser.ELSE);
	            this.state = 636;
	            this.match(Python3Parser.COLON);
	            this.state = 637;
	            this.suite();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	while_stmt() {
	    let localctx = new While_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, Python3Parser.RULE_while_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 640;
	        this.match(Python3Parser.WHILE);
	        this.state = 641;
	        this.test();
	        this.state = 642;
	        this.match(Python3Parser.COLON);
	        this.state = 643;
	        this.suite();
	        this.state = 647;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17) {
	            this.state = 644;
	            this.match(Python3Parser.ELSE);
	            this.state = 645;
	            this.match(Python3Parser.COLON);
	            this.state = 646;
	            this.suite();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_stmt() {
	    let localctx = new For_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, Python3Parser.RULE_for_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 649;
	        this.match(Python3Parser.FOR);
	        this.state = 650;
	        this.exprlist();
	        this.state = 651;
	        this.match(Python3Parser.IN);
	        this.state = 652;
	        this.testlist();
	        this.state = 653;
	        this.match(Python3Parser.COLON);
	        this.state = 654;
	        this.suite();
	        this.state = 658;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17) {
	            this.state = 655;
	            this.match(Python3Parser.ELSE);
	            this.state = 656;
	            this.match(Python3Parser.COLON);
	            this.state = 657;
	            this.suite();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	try_stmt() {
	    let localctx = new Try_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, Python3Parser.RULE_try_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 660;
	        this.match(Python3Parser.TRY);
	        this.state = 661;
	        this.match(Python3Parser.COLON);
	        this.state = 662;
	        this.suite();
	        this.state = 684;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 24:
	            this.state = 667; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 663;
	                this.except_clause();
	                this.state = 664;
	                this.match(Python3Parser.COLON);
	                this.state = 665;
	                this.suite();
	                this.state = 669; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===24);
	            this.state = 674;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===17) {
	                this.state = 671;
	                this.match(Python3Parser.ELSE);
	                this.state = 672;
	                this.match(Python3Parser.COLON);
	                this.state = 673;
	                this.suite();
	            }

	            this.state = 679;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===22) {
	                this.state = 676;
	                this.match(Python3Parser.FINALLY);
	                this.state = 677;
	                this.match(Python3Parser.COLON);
	                this.state = 678;
	                this.suite();
	            }

	            break;
	        case 22:
	            this.state = 681;
	            this.match(Python3Parser.FINALLY);
	            this.state = 682;
	            this.match(Python3Parser.COLON);
	            this.state = 683;
	            this.suite();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	with_stmt() {
	    let localctx = new With_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, Python3Parser.RULE_with_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 686;
	        this.match(Python3Parser.WITH);
	        this.state = 687;
	        this.with_item();
	        this.state = 692;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===56) {
	            this.state = 688;
	            this.match(Python3Parser.COMMA);
	            this.state = 689;
	            this.with_item();
	            this.state = 694;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 695;
	        this.match(Python3Parser.COLON);
	        this.state = 696;
	        this.suite();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	with_item() {
	    let localctx = new With_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, Python3Parser.RULE_with_item);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 698;
	        this.test();
	        this.state = 701;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===11) {
	            this.state = 699;
	            this.match(Python3Parser.AS);
	            this.state = 700;
	            this.expr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	except_clause() {
	    let localctx = new Except_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, Python3Parser.RULE_except_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 703;
	        this.match(Python3Parser.EXCEPT);
	        this.state = 709;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3523215384) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 542115073) !== 0) || ((((_la - 68)) & ~0x1f) === 0 && ((1 << (_la - 68)) & 99) !== 0)) {
	            this.state = 704;
	            this.test();
	            this.state = 707;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===11) {
	                this.state = 705;
	                this.match(Python3Parser.AS);
	                this.state = 706;
	                this.match(Python3Parser.NAME);
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	suite() {
	    let localctx = new SuiteContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, Python3Parser.RULE_suite);
	    var _la = 0;
	    try {
	        this.state = 721;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 4:
	        case 7:
	        case 8:
	        case 9:
	        case 10:
	        case 12:
	        case 13:
	        case 14:
	        case 25:
	        case 28:
	        case 30:
	        case 31:
	        case 32:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 40:
	        case 42:
	        case 52:
	        case 53:
	        case 54:
	        case 61:
	        case 68:
	        case 69:
	        case 73:
	        case 74:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 711;
	            this.simple_stmt();
	            break;
	        case 41:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 712;
	            this.match(Python3Parser.NEWLINE);
	            this.state = 713;
	            this.match(Python3Parser.INDENT);
	            this.state = 715; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 714;
	                this.stmt();
	                this.state = 717; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while((((_la) & ~0x1f) === 0 && ((1 << _la) & 3534551000) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 544212479) !== 0) || ((((_la - 68)) & ~0x1f) === 0 && ((1 << (_la - 68)) & 32867) !== 0));
	            this.state = 719;
	            this.match(Python3Parser.DEDENT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	test() {
	    let localctx = new TestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, Python3Parser.RULE_test);
	    var _la = 0;
	    try {
	        this.state = 732;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 4:
	        case 28:
	        case 30:
	        case 31:
	        case 32:
	        case 40:
	        case 42:
	        case 52:
	        case 54:
	        case 61:
	        case 68:
	        case 69:
	        case 73:
	        case 74:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 723;
	            this.or_test();
	            this.state = 729;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===15) {
	                this.state = 724;
	                this.match(Python3Parser.IF);
	                this.state = 725;
	                this.or_test();
	                this.state = 726;
	                this.match(Python3Parser.ELSE);
	                this.state = 727;
	                this.test();
	            }

	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 731;
	            this.lambdef();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	test_nocond() {
	    let localctx = new Test_nocondContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, Python3Parser.RULE_test_nocond);
	    try {
	        this.state = 736;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 4:
	        case 28:
	        case 30:
	        case 31:
	        case 32:
	        case 40:
	        case 42:
	        case 52:
	        case 54:
	        case 61:
	        case 68:
	        case 69:
	        case 73:
	        case 74:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 734;
	            this.or_test();
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 735;
	            this.lambdef_nocond();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdef() {
	    let localctx = new LambdefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, Python3Parser.RULE_lambdef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 738;
	        this.match(Python3Parser.LAMBDA);
	        this.state = 740;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 133121) !== 0)) {
	            this.state = 739;
	            this.varargslist();
	        }

	        this.state = 742;
	        this.match(Python3Parser.COLON);
	        this.state = 743;
	        this.test();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdef_nocond() {
	    let localctx = new Lambdef_nocondContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, Python3Parser.RULE_lambdef_nocond);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 745;
	        this.match(Python3Parser.LAMBDA);
	        this.state = 747;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 133121) !== 0)) {
	            this.state = 746;
	            this.varargslist();
	        }

	        this.state = 749;
	        this.match(Python3Parser.COLON);
	        this.state = 750;
	        this.test_nocond();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	or_test() {
	    let localctx = new Or_testContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, Python3Parser.RULE_or_test);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 752;
	        this.and_test();
	        this.state = 757;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26) {
	            this.state = 753;
	            this.match(Python3Parser.OR);
	            this.state = 754;
	            this.and_test();
	            this.state = 759;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	and_test() {
	    let localctx = new And_testContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, Python3Parser.RULE_and_test);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 760;
	        this.not_test();
	        this.state = 765;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===27) {
	            this.state = 761;
	            this.match(Python3Parser.AND);
	            this.state = 762;
	            this.not_test();
	            this.state = 767;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	not_test() {
	    let localctx = new Not_testContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, Python3Parser.RULE_not_test);
	    try {
	        this.state = 771;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 28:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 768;
	            this.match(Python3Parser.NOT);
	            this.state = 769;
	            this.not_test();
	            break;
	        case 3:
	        case 4:
	        case 30:
	        case 31:
	        case 32:
	        case 40:
	        case 42:
	        case 52:
	        case 54:
	        case 61:
	        case 68:
	        case 69:
	        case 73:
	        case 74:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 770;
	            this.comparison();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparison() {
	    let localctx = new ComparisonContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, Python3Parser.RULE_comparison);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 773;
	        this.expr();
	        this.state = 779;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 806354944) !== 0) || ((((_la - 76)) & ~0x1f) === 0 && ((1 << (_la - 76)) & 127) !== 0)) {
	            this.state = 774;
	            this.comp_op();
	            this.state = 775;
	            this.expr();
	            this.state = 781;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comp_op() {
	    let localctx = new Comp_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, Python3Parser.RULE_comp_op);
	    try {
	        this.state = 795;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 782;
	            this.match(Python3Parser.LESS_THAN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 783;
	            this.match(Python3Parser.GREATER_THAN);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 784;
	            this.match(Python3Parser.EQUALS);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 785;
	            this.match(Python3Parser.GT_EQ);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 786;
	            this.match(Python3Parser.LT_EQ);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 787;
	            this.match(Python3Parser.NOT_EQ_1);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 788;
	            this.match(Python3Parser.NOT_EQ_2);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 789;
	            this.match(Python3Parser.IN);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 790;
	            this.match(Python3Parser.NOT);
	            this.state = 791;
	            this.match(Python3Parser.IN);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 792;
	            this.match(Python3Parser.IS);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 793;
	            this.match(Python3Parser.IS);
	            this.state = 794;
	            this.match(Python3Parser.NOT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	star_expr() {
	    let localctx = new Star_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, Python3Parser.RULE_star_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 797;
	        this.match(Python3Parser.STAR);
	        this.state = 798;
	        this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr() {
	    let localctx = new ExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, Python3Parser.RULE_expr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 800;
	        this.xor_expr();
	        this.state = 805;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===63) {
	            this.state = 801;
	            this.match(Python3Parser.OR_OP);
	            this.state = 802;
	            this.xor_expr();
	            this.state = 807;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xor_expr() {
	    let localctx = new Xor_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, Python3Parser.RULE_xor_expr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 808;
	        this.and_expr();
	        this.state = 813;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===64) {
	            this.state = 809;
	            this.match(Python3Parser.XOR);
	            this.state = 810;
	            this.and_expr();
	            this.state = 815;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	and_expr() {
	    let localctx = new And_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, Python3Parser.RULE_and_expr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 816;
	        this.shift_expr();
	        this.state = 821;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===65) {
	            this.state = 817;
	            this.match(Python3Parser.AND_OP);
	            this.state = 818;
	            this.shift_expr();
	            this.state = 823;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shift_expr() {
	    let localctx = new Shift_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, Python3Parser.RULE_shift_expr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 824;
	        this.arith_expr();
	        this.state = 829;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===66 || _la===67) {
	            this.state = 825;
	            _la = this._input.LA(1);
	            if(!(_la===66 || _la===67)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 826;
	            this.arith_expr();
	            this.state = 831;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arith_expr() {
	    let localctx = new Arith_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, Python3Parser.RULE_arith_expr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 832;
	        this.term();
	        this.state = 837;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===68 || _la===69) {
	            this.state = 833;
	            _la = this._input.LA(1);
	            if(!(_la===68 || _la===69)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 834;
	            this.term();
	            this.state = 839;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	term() {
	    let localctx = new TermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, Python3Parser.RULE_term);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 840;
	        this.factor();
	        this.state = 845;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 53)) & ~0x1f) === 0 && ((1 << (_la - 53)) & 1074659329) !== 0)) {
	            this.state = 841;
	            _la = this._input.LA(1);
	            if(!(((((_la - 53)) & ~0x1f) === 0 && ((1 << (_la - 53)) & 1074659329) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 842;
	            this.factor();
	            this.state = 847;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	factor() {
	    let localctx = new FactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, Python3Parser.RULE_factor);
	    var _la = 0;
	    try {
	        this.state = 851;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 68:
	        case 69:
	        case 73:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 848;
	            _la = this._input.LA(1);
	            if(!(((((_la - 68)) & ~0x1f) === 0 && ((1 << (_la - 68)) & 35) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 849;
	            this.factor();
	            break;
	        case 3:
	        case 4:
	        case 30:
	        case 31:
	        case 32:
	        case 40:
	        case 42:
	        case 52:
	        case 54:
	        case 61:
	        case 74:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 850;
	            this.power();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	power() {
	    let localctx = new PowerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, Python3Parser.RULE_power);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 853;
	        this.atom_expr();
	        this.state = 856;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===59) {
	            this.state = 854;
	            this.match(Python3Parser.POWER);
	            this.state = 855;
	            this.factor();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atom_expr() {
	    let localctx = new Atom_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, Python3Parser.RULE_atom_expr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 859;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===40) {
	            this.state = 858;
	            this.match(Python3Parser.AWAIT);
	        }

	        this.state = 861;
	        this.atom();
	        this.state = 865;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 51)) & ~0x1f) === 0 && ((1 << (_la - 51)) & 1033) !== 0)) {
	            this.state = 862;
	            this.trailer();
	            this.state = 867;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atom() {
	    let localctx = new AtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, Python3Parser.RULE_atom);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 895;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 54:
	            this.state = 868;
	            this.match(Python3Parser.OPEN_PAREN);
	            this.state = 871;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 34:
	            	this.state = 869;
	            	this.yield_expr();
	            	break;
	            case 3:
	            case 4:
	            case 25:
	            case 28:
	            case 30:
	            case 31:
	            case 32:
	            case 40:
	            case 42:
	            case 52:
	            case 53:
	            case 54:
	            case 61:
	            case 68:
	            case 69:
	            case 73:
	            case 74:
	            	this.state = 870;
	            	this.testlist_comp();
	            	break;
	            case 55:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 873;
	            this.match(Python3Parser.CLOSE_PAREN);
	            break;
	        case 61:
	            this.state = 874;
	            this.match(Python3Parser.OPEN_BRACK);
	            this.state = 876;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3523215384) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 544212225) !== 0) || ((((_la - 68)) & ~0x1f) === 0 && ((1 << (_la - 68)) & 99) !== 0)) {
	                this.state = 875;
	                this.testlist_comp();
	            }

	            this.state = 878;
	            this.match(Python3Parser.CLOSE_BRACK);
	            break;
	        case 74:
	            this.state = 879;
	            this.match(Python3Parser.OPEN_BRACE);
	            this.state = 881;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3523215384) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 678429953) !== 0) || ((((_la - 68)) & ~0x1f) === 0 && ((1 << (_la - 68)) & 99) !== 0)) {
	                this.state = 880;
	                this.dictorsetmaker();
	            }

	            this.state = 883;
	            this.match(Python3Parser.CLOSE_BRACE);
	            break;
	        case 42:
	            this.state = 884;
	            this.match(Python3Parser.NAME);
	            break;
	        case 4:
	            this.state = 885;
	            this.match(Python3Parser.NUMBER);
	            break;
	        case 3:
	            this.state = 887; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 886;
	                this.match(Python3Parser.STRING);
	                this.state = 889; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===3);
	            break;
	        case 52:
	            this.state = 891;
	            this.match(Python3Parser.ELLIPSIS);
	            break;
	        case 30:
	            this.state = 892;
	            this.match(Python3Parser.NONE);
	            break;
	        case 31:
	            this.state = 893;
	            this.match(Python3Parser.TRUE);
	            break;
	        case 32:
	            this.state = 894;
	            this.match(Python3Parser.FALSE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	testlist_comp() {
	    let localctx = new Testlist_compContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, Python3Parser.RULE_testlist_comp);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 899;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 4:
	        case 25:
	        case 28:
	        case 30:
	        case 31:
	        case 32:
	        case 40:
	        case 42:
	        case 52:
	        case 54:
	        case 61:
	        case 68:
	        case 69:
	        case 73:
	        case 74:
	            this.state = 897;
	            this.test();
	            break;
	        case 53:
	            this.state = 898;
	            this.star_expr();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 915;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 19:
	        case 39:
	            this.state = 901;
	            this.comp_for();
	            break;
	        case 55:
	        case 56:
	        case 62:
	            this.state = 909;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,125,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 902;
	                    this.match(Python3Parser.COMMA);
	                    this.state = 905;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case 3:
	                    case 4:
	                    case 25:
	                    case 28:
	                    case 30:
	                    case 31:
	                    case 32:
	                    case 40:
	                    case 42:
	                    case 52:
	                    case 54:
	                    case 61:
	                    case 68:
	                    case 69:
	                    case 73:
	                    case 74:
	                        this.state = 903;
	                        this.test();
	                        break;
	                    case 53:
	                        this.state = 904;
	                        this.star_expr();
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    } 
	                }
	                this.state = 911;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,125,this._ctx);
	            }

	            this.state = 913;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===56) {
	                this.state = 912;
	                this.match(Python3Parser.COMMA);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trailer() {
	    let localctx = new TrailerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, Python3Parser.RULE_trailer);
	    var _la = 0;
	    try {
	        this.state = 928;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 54:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 917;
	            this.match(Python3Parser.OPEN_PAREN);
	            this.state = 919;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3523215384) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 678429953) !== 0) || ((((_la - 68)) & ~0x1f) === 0 && ((1 << (_la - 68)) & 99) !== 0)) {
	                this.state = 918;
	                this.arglist();
	            }

	            this.state = 921;
	            this.match(Python3Parser.CLOSE_PAREN);
	            break;
	        case 61:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 922;
	            this.match(Python3Parser.OPEN_BRACK);
	            this.state = 923;
	            this.subscriptlist();
	            this.state = 924;
	            this.match(Python3Parser.CLOSE_BRACK);
	            break;
	        case 51:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 926;
	            this.match(Python3Parser.DOT);
	            this.state = 927;
	            this.match(Python3Parser.NAME);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subscriptlist() {
	    let localctx = new SubscriptlistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, Python3Parser.RULE_subscriptlist);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 930;
	        this.subscript_();
	        this.state = 935;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,130,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 931;
	                this.match(Python3Parser.COMMA);
	                this.state = 932;
	                this.subscript_(); 
	            }
	            this.state = 937;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,130,this._ctx);
	        }

	        this.state = 939;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===56) {
	            this.state = 938;
	            this.match(Python3Parser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subscript_() {
	    let localctx = new Subscript_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, Python3Parser.RULE_subscript_);
	    var _la = 0;
	    try {
	        this.state = 952;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,135,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 941;
	            this.test();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 943;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3523215384) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 542115073) !== 0) || ((((_la - 68)) & ~0x1f) === 0 && ((1 << (_la - 68)) & 99) !== 0)) {
	                this.state = 942;
	                this.test();
	            }

	            this.state = 945;
	            this.match(Python3Parser.COLON);
	            this.state = 947;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3523215384) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 542115073) !== 0) || ((((_la - 68)) & ~0x1f) === 0 && ((1 << (_la - 68)) & 99) !== 0)) {
	                this.state = 946;
	                this.test();
	            }

	            this.state = 950;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===57) {
	                this.state = 949;
	                this.sliceop();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sliceop() {
	    let localctx = new SliceopContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, Python3Parser.RULE_sliceop);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 954;
	        this.match(Python3Parser.COLON);
	        this.state = 956;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3523215384) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 542115073) !== 0) || ((((_la - 68)) & ~0x1f) === 0 && ((1 << (_la - 68)) & 99) !== 0)) {
	            this.state = 955;
	            this.test();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exprlist() {
	    let localctx = new ExprlistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, Python3Parser.RULE_exprlist);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 960;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 4:
	        case 30:
	        case 31:
	        case 32:
	        case 40:
	        case 42:
	        case 52:
	        case 54:
	        case 61:
	        case 68:
	        case 69:
	        case 73:
	        case 74:
	            this.state = 958;
	            this.expr();
	            break;
	        case 53:
	            this.state = 959;
	            this.star_expr();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 969;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,139,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 962;
	                this.match(Python3Parser.COMMA);
	                this.state = 965;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 3:
	                case 4:
	                case 30:
	                case 31:
	                case 32:
	                case 40:
	                case 42:
	                case 52:
	                case 54:
	                case 61:
	                case 68:
	                case 69:
	                case 73:
	                case 74:
	                    this.state = 963;
	                    this.expr();
	                    break;
	                case 53:
	                    this.state = 964;
	                    this.star_expr();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 971;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,139,this._ctx);
	        }

	        this.state = 973;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===56) {
	            this.state = 972;
	            this.match(Python3Parser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	testlist() {
	    let localctx = new TestlistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, Python3Parser.RULE_testlist);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 975;
	        this.test();
	        this.state = 980;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,141,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 976;
	                this.match(Python3Parser.COMMA);
	                this.state = 977;
	                this.test(); 
	            }
	            this.state = 982;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,141,this._ctx);
	        }

	        this.state = 984;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===56) {
	            this.state = 983;
	            this.match(Python3Parser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dictorsetmaker() {
	    let localctx = new DictorsetmakerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, Python3Parser.RULE_dictorsetmaker);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1034;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,153,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 992;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 3:
	            case 4:
	            case 25:
	            case 28:
	            case 30:
	            case 31:
	            case 32:
	            case 40:
	            case 42:
	            case 52:
	            case 54:
	            case 61:
	            case 68:
	            case 69:
	            case 73:
	            case 74:
	                this.state = 986;
	                this.test();
	                this.state = 987;
	                this.match(Python3Parser.COLON);
	                this.state = 988;
	                this.test();
	                break;
	            case 59:
	                this.state = 990;
	                this.match(Python3Parser.POWER);
	                this.state = 991;
	                this.expr();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1012;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 19:
	            case 39:
	                this.state = 994;
	                this.comp_for();
	                break;
	            case 56:
	            case 75:
	                this.state = 1006;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,145,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 995;
	                        this.match(Python3Parser.COMMA);
	                        this.state = 1002;
	                        this._errHandler.sync(this);
	                        switch(this._input.LA(1)) {
	                        case 3:
	                        case 4:
	                        case 25:
	                        case 28:
	                        case 30:
	                        case 31:
	                        case 32:
	                        case 40:
	                        case 42:
	                        case 52:
	                        case 54:
	                        case 61:
	                        case 68:
	                        case 69:
	                        case 73:
	                        case 74:
	                            this.state = 996;
	                            this.test();
	                            this.state = 997;
	                            this.match(Python3Parser.COLON);
	                            this.state = 998;
	                            this.test();
	                            break;
	                        case 59:
	                            this.state = 1000;
	                            this.match(Python3Parser.POWER);
	                            this.state = 1001;
	                            this.expr();
	                            break;
	                        default:
	                            throw new antlr4.error.NoViableAltException(this);
	                        } 
	                    }
	                    this.state = 1008;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,145,this._ctx);
	                }

	                this.state = 1010;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===56) {
	                    this.state = 1009;
	                    this.match(Python3Parser.COMMA);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 2:
	            this.state = 1016;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 3:
	            case 4:
	            case 25:
	            case 28:
	            case 30:
	            case 31:
	            case 32:
	            case 40:
	            case 42:
	            case 52:
	            case 54:
	            case 61:
	            case 68:
	            case 69:
	            case 73:
	            case 74:
	                this.state = 1014;
	                this.test();
	                break;
	            case 53:
	                this.state = 1015;
	                this.star_expr();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1032;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 19:
	            case 39:
	                this.state = 1018;
	                this.comp_for();
	                break;
	            case 56:
	            case 75:
	                this.state = 1026;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,150,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 1019;
	                        this.match(Python3Parser.COMMA);
	                        this.state = 1022;
	                        this._errHandler.sync(this);
	                        switch(this._input.LA(1)) {
	                        case 3:
	                        case 4:
	                        case 25:
	                        case 28:
	                        case 30:
	                        case 31:
	                        case 32:
	                        case 40:
	                        case 42:
	                        case 52:
	                        case 54:
	                        case 61:
	                        case 68:
	                        case 69:
	                        case 73:
	                        case 74:
	                            this.state = 1020;
	                            this.test();
	                            break;
	                        case 53:
	                            this.state = 1021;
	                            this.star_expr();
	                            break;
	                        default:
	                            throw new antlr4.error.NoViableAltException(this);
	                        } 
	                    }
	                    this.state = 1028;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,150,this._ctx);
	                }

	                this.state = 1030;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===56) {
	                    this.state = 1029;
	                    this.match(Python3Parser.COMMA);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classdef() {
	    let localctx = new ClassdefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, Python3Parser.RULE_classdef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1036;
	        this.match(Python3Parser.CLASS);
	        this.state = 1037;
	        this.match(Python3Parser.NAME);
	        this.state = 1043;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===54) {
	            this.state = 1038;
	            this.match(Python3Parser.OPEN_PAREN);
	            this.state = 1040;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3523215384) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 678429953) !== 0) || ((((_la - 68)) & ~0x1f) === 0 && ((1 << (_la - 68)) & 99) !== 0)) {
	                this.state = 1039;
	                this.arglist();
	            }

	            this.state = 1042;
	            this.match(Python3Parser.CLOSE_PAREN);
	        }

	        this.state = 1045;
	        this.match(Python3Parser.COLON);
	        this.state = 1046;
	        this.suite();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arglist() {
	    let localctx = new ArglistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, Python3Parser.RULE_arglist);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1048;
	        this.argument();
	        this.state = 1053;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,156,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1049;
	                this.match(Python3Parser.COMMA);
	                this.state = 1050;
	                this.argument(); 
	            }
	            this.state = 1055;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,156,this._ctx);
	        }

	        this.state = 1057;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===56) {
	            this.state = 1056;
	            this.match(Python3Parser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argument() {
	    let localctx = new ArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, Python3Parser.RULE_argument);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1071;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,159,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1059;
	            this.test();
	            this.state = 1061;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===19 || _la===39) {
	                this.state = 1060;
	                this.comp_for();
	            }

	            break;

	        case 2:
	            this.state = 1063;
	            this.test();
	            this.state = 1064;
	            this.match(Python3Parser.ASSIGN);
	            this.state = 1065;
	            this.test();
	            break;

	        case 3:
	            this.state = 1067;
	            this.match(Python3Parser.POWER);
	            this.state = 1068;
	            this.test();
	            break;

	        case 4:
	            this.state = 1069;
	            this.match(Python3Parser.STAR);
	            this.state = 1070;
	            this.test();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comp_iter() {
	    let localctx = new Comp_iterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, Python3Parser.RULE_comp_iter);
	    try {
	        this.state = 1075;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 19:
	        case 39:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1073;
	            this.comp_for();
	            break;
	        case 15:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1074;
	            this.comp_if();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comp_for() {
	    let localctx = new Comp_forContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, Python3Parser.RULE_comp_for);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1078;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===39) {
	            this.state = 1077;
	            this.match(Python3Parser.ASYNC);
	        }

	        this.state = 1080;
	        this.match(Python3Parser.FOR);
	        this.state = 1081;
	        this.exprlist();
	        this.state = 1082;
	        this.match(Python3Parser.IN);
	        this.state = 1083;
	        this.or_test();
	        this.state = 1085;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 15)) & ~0x1f) === 0 && ((1 << (_la - 15)) & 16777233) !== 0)) {
	            this.state = 1084;
	            this.comp_iter();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comp_if() {
	    let localctx = new Comp_ifContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, Python3Parser.RULE_comp_if);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1087;
	        this.match(Python3Parser.IF);
	        this.state = 1088;
	        this.test_nocond();
	        this.state = 1090;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 15)) & ~0x1f) === 0 && ((1 << (_la - 15)) & 16777233) !== 0)) {
	            this.state = 1089;
	            this.comp_iter();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	encoding_decl() {
	    let localctx = new Encoding_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, Python3Parser.RULE_encoding_decl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1092;
	        this.match(Python3Parser.NAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yield_expr() {
	    let localctx = new Yield_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, Python3Parser.RULE_yield_expr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1094;
	        this.match(Python3Parser.YIELD);
	        this.state = 1096;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3523215896) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 542115073) !== 0) || ((((_la - 68)) & ~0x1f) === 0 && ((1 << (_la - 68)) & 99) !== 0)) {
	            this.state = 1095;
	            this.yield_arg();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yield_arg() {
	    let localctx = new Yield_argContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, Python3Parser.RULE_yield_arg);
	    try {
	        this.state = 1101;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 9:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1098;
	            this.match(Python3Parser.FROM);
	            this.state = 1099;
	            this.test();
	            break;
	        case 3:
	        case 4:
	        case 25:
	        case 28:
	        case 30:
	        case 31:
	        case 32:
	        case 40:
	        case 42:
	        case 52:
	        case 54:
	        case 61:
	        case 68:
	        case 69:
	        case 73:
	        case 74:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1100;
	            this.testlist();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

Python3Parser.EOF = antlr4.Token.EOF;
Python3Parser.INDENT = 1;
Python3Parser.DEDENT = 2;
Python3Parser.STRING = 3;
Python3Parser.NUMBER = 4;
Python3Parser.INTEGER = 5;
Python3Parser.DEF = 6;
Python3Parser.RETURN = 7;
Python3Parser.RAISE = 8;
Python3Parser.FROM = 9;
Python3Parser.IMPORT = 10;
Python3Parser.AS = 11;
Python3Parser.GLOBAL = 12;
Python3Parser.NONLOCAL = 13;
Python3Parser.ASSERT = 14;
Python3Parser.IF = 15;
Python3Parser.ELIF = 16;
Python3Parser.ELSE = 17;
Python3Parser.WHILE = 18;
Python3Parser.FOR = 19;
Python3Parser.IN = 20;
Python3Parser.TRY = 21;
Python3Parser.FINALLY = 22;
Python3Parser.WITH = 23;
Python3Parser.EXCEPT = 24;
Python3Parser.LAMBDA = 25;
Python3Parser.OR = 26;
Python3Parser.AND = 27;
Python3Parser.NOT = 28;
Python3Parser.IS = 29;
Python3Parser.NONE = 30;
Python3Parser.TRUE = 31;
Python3Parser.FALSE = 32;
Python3Parser.CLASS = 33;
Python3Parser.YIELD = 34;
Python3Parser.DEL = 35;
Python3Parser.PASS = 36;
Python3Parser.CONTINUE = 37;
Python3Parser.BREAK = 38;
Python3Parser.ASYNC = 39;
Python3Parser.AWAIT = 40;
Python3Parser.NEWLINE = 41;
Python3Parser.NAME = 42;
Python3Parser.STRING_LITERAL = 43;
Python3Parser.BYTES_LITERAL = 44;
Python3Parser.DECIMAL_INTEGER = 45;
Python3Parser.OCT_INTEGER = 46;
Python3Parser.HEX_INTEGER = 47;
Python3Parser.BIN_INTEGER = 48;
Python3Parser.FLOAT_NUMBER = 49;
Python3Parser.IMAG_NUMBER = 50;
Python3Parser.DOT = 51;
Python3Parser.ELLIPSIS = 52;
Python3Parser.STAR = 53;
Python3Parser.OPEN_PAREN = 54;
Python3Parser.CLOSE_PAREN = 55;
Python3Parser.COMMA = 56;
Python3Parser.COLON = 57;
Python3Parser.SEMI_COLON = 58;
Python3Parser.POWER = 59;
Python3Parser.ASSIGN = 60;
Python3Parser.OPEN_BRACK = 61;
Python3Parser.CLOSE_BRACK = 62;
Python3Parser.OR_OP = 63;
Python3Parser.XOR = 64;
Python3Parser.AND_OP = 65;
Python3Parser.LEFT_SHIFT = 66;
Python3Parser.RIGHT_SHIFT = 67;
Python3Parser.ADD = 68;
Python3Parser.MINUS = 69;
Python3Parser.DIV = 70;
Python3Parser.MOD = 71;
Python3Parser.IDIV = 72;
Python3Parser.NOT_OP = 73;
Python3Parser.OPEN_BRACE = 74;
Python3Parser.CLOSE_BRACE = 75;
Python3Parser.LESS_THAN = 76;
Python3Parser.GREATER_THAN = 77;
Python3Parser.EQUALS = 78;
Python3Parser.GT_EQ = 79;
Python3Parser.LT_EQ = 80;
Python3Parser.NOT_EQ_1 = 81;
Python3Parser.NOT_EQ_2 = 82;
Python3Parser.AT = 83;
Python3Parser.ARROW = 84;
Python3Parser.ADD_ASSIGN = 85;
Python3Parser.SUB_ASSIGN = 86;
Python3Parser.MULT_ASSIGN = 87;
Python3Parser.AT_ASSIGN = 88;
Python3Parser.DIV_ASSIGN = 89;
Python3Parser.MOD_ASSIGN = 90;
Python3Parser.AND_ASSIGN = 91;
Python3Parser.OR_ASSIGN = 92;
Python3Parser.XOR_ASSIGN = 93;
Python3Parser.LEFT_SHIFT_ASSIGN = 94;
Python3Parser.RIGHT_SHIFT_ASSIGN = 95;
Python3Parser.POWER_ASSIGN = 96;
Python3Parser.IDIV_ASSIGN = 97;
Python3Parser.SKIP_ = 98;
Python3Parser.UNKNOWN_CHAR = 99;

Python3Parser.RULE_single_input = 0;
Python3Parser.RULE_file_input = 1;
Python3Parser.RULE_eval_input = 2;
Python3Parser.RULE_decorator = 3;
Python3Parser.RULE_decorators = 4;
Python3Parser.RULE_decorated = 5;
Python3Parser.RULE_async_funcdef = 6;
Python3Parser.RULE_funcdef = 7;
Python3Parser.RULE_parameters = 8;
Python3Parser.RULE_typedargslist = 9;
Python3Parser.RULE_tfpdef = 10;
Python3Parser.RULE_varargslist = 11;
Python3Parser.RULE_vfpdef = 12;
Python3Parser.RULE_stmt = 13;
Python3Parser.RULE_simple_stmt = 14;
Python3Parser.RULE_small_stmt = 15;
Python3Parser.RULE_expr_stmt = 16;
Python3Parser.RULE_annassign = 17;
Python3Parser.RULE_testlist_star_expr = 18;
Python3Parser.RULE_augassign = 19;
Python3Parser.RULE_del_stmt = 20;
Python3Parser.RULE_pass_stmt = 21;
Python3Parser.RULE_flow_stmt = 22;
Python3Parser.RULE_break_stmt = 23;
Python3Parser.RULE_continue_stmt = 24;
Python3Parser.RULE_return_stmt = 25;
Python3Parser.RULE_yield_stmt = 26;
Python3Parser.RULE_raise_stmt = 27;
Python3Parser.RULE_import_stmt = 28;
Python3Parser.RULE_import_name = 29;
Python3Parser.RULE_import_from = 30;
Python3Parser.RULE_import_as_name = 31;
Python3Parser.RULE_dotted_as_name = 32;
Python3Parser.RULE_import_as_names = 33;
Python3Parser.RULE_dotted_as_names = 34;
Python3Parser.RULE_dotted_name = 35;
Python3Parser.RULE_global_stmt = 36;
Python3Parser.RULE_nonlocal_stmt = 37;
Python3Parser.RULE_assert_stmt = 38;
Python3Parser.RULE_compound_stmt = 39;
Python3Parser.RULE_async_stmt = 40;
Python3Parser.RULE_if_stmt = 41;
Python3Parser.RULE_while_stmt = 42;
Python3Parser.RULE_for_stmt = 43;
Python3Parser.RULE_try_stmt = 44;
Python3Parser.RULE_with_stmt = 45;
Python3Parser.RULE_with_item = 46;
Python3Parser.RULE_except_clause = 47;
Python3Parser.RULE_suite = 48;
Python3Parser.RULE_test = 49;
Python3Parser.RULE_test_nocond = 50;
Python3Parser.RULE_lambdef = 51;
Python3Parser.RULE_lambdef_nocond = 52;
Python3Parser.RULE_or_test = 53;
Python3Parser.RULE_and_test = 54;
Python3Parser.RULE_not_test = 55;
Python3Parser.RULE_comparison = 56;
Python3Parser.RULE_comp_op = 57;
Python3Parser.RULE_star_expr = 58;
Python3Parser.RULE_expr = 59;
Python3Parser.RULE_xor_expr = 60;
Python3Parser.RULE_and_expr = 61;
Python3Parser.RULE_shift_expr = 62;
Python3Parser.RULE_arith_expr = 63;
Python3Parser.RULE_term = 64;
Python3Parser.RULE_factor = 65;
Python3Parser.RULE_power = 66;
Python3Parser.RULE_atom_expr = 67;
Python3Parser.RULE_atom = 68;
Python3Parser.RULE_testlist_comp = 69;
Python3Parser.RULE_trailer = 70;
Python3Parser.RULE_subscriptlist = 71;
Python3Parser.RULE_subscript_ = 72;
Python3Parser.RULE_sliceop = 73;
Python3Parser.RULE_exprlist = 74;
Python3Parser.RULE_testlist = 75;
Python3Parser.RULE_dictorsetmaker = 76;
Python3Parser.RULE_classdef = 77;
Python3Parser.RULE_arglist = 78;
Python3Parser.RULE_argument = 79;
Python3Parser.RULE_comp_iter = 80;
Python3Parser.RULE_comp_for = 81;
Python3Parser.RULE_comp_if = 82;
Python3Parser.RULE_encoding_decl = 83;
Python3Parser.RULE_yield_expr = 84;
Python3Parser.RULE_yield_arg = 85;

class Single_inputContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_single_input;
    }

	NEWLINE() {
	    return this.getToken(Python3Parser.NEWLINE, 0);
	};

	simple_stmt() {
	    return this.getTypedRuleContext(Simple_stmtContext,0);
	};

	compound_stmt() {
	    return this.getTypedRuleContext(Compound_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterSingle_input(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitSingle_input(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitSingle_input(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class File_inputContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_file_input;
    }

	EOF() {
	    return this.getToken(Python3Parser.EOF, 0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.NEWLINE);
	    } else {
	        return this.getToken(Python3Parser.NEWLINE, i);
	    }
	};


	stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StmtContext);
	    } else {
	        return this.getTypedRuleContext(StmtContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterFile_input(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitFile_input(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitFile_input(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Eval_inputContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_eval_input;
    }

	testlist() {
	    return this.getTypedRuleContext(TestlistContext,0);
	};

	EOF() {
	    return this.getToken(Python3Parser.EOF, 0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.NEWLINE);
	    } else {
	        return this.getToken(Python3Parser.NEWLINE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterEval_input(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitEval_input(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitEval_input(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DecoratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_decorator;
    }

	AT() {
	    return this.getToken(Python3Parser.AT, 0);
	};

	dotted_name() {
	    return this.getTypedRuleContext(Dotted_nameContext,0);
	};

	NEWLINE() {
	    return this.getToken(Python3Parser.NEWLINE, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(Python3Parser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(Python3Parser.CLOSE_PAREN, 0);
	};

	arglist() {
	    return this.getTypedRuleContext(ArglistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterDecorator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitDecorator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitDecorator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DecoratorsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_decorators;
    }

	decorator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecoratorContext);
	    } else {
	        return this.getTypedRuleContext(DecoratorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterDecorators(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitDecorators(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitDecorators(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DecoratedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_decorated;
    }

	decorators() {
	    return this.getTypedRuleContext(DecoratorsContext,0);
	};

	classdef() {
	    return this.getTypedRuleContext(ClassdefContext,0);
	};

	funcdef() {
	    return this.getTypedRuleContext(FuncdefContext,0);
	};

	async_funcdef() {
	    return this.getTypedRuleContext(Async_funcdefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterDecorated(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitDecorated(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitDecorated(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Async_funcdefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_async_funcdef;
    }

	ASYNC() {
	    return this.getToken(Python3Parser.ASYNC, 0);
	};

	funcdef() {
	    return this.getTypedRuleContext(FuncdefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterAsync_funcdef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitAsync_funcdef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitAsync_funcdef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FuncdefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_funcdef;
    }

	DEF() {
	    return this.getToken(Python3Parser.DEF, 0);
	};

	NAME() {
	    return this.getToken(Python3Parser.NAME, 0);
	};

	parameters() {
	    return this.getTypedRuleContext(ParametersContext,0);
	};

	COLON() {
	    return this.getToken(Python3Parser.COLON, 0);
	};

	suite() {
	    return this.getTypedRuleContext(SuiteContext,0);
	};

	ARROW() {
	    return this.getToken(Python3Parser.ARROW, 0);
	};

	test() {
	    return this.getTypedRuleContext(TestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterFuncdef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitFuncdef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitFuncdef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_parameters;
    }

	OPEN_PAREN() {
	    return this.getToken(Python3Parser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(Python3Parser.CLOSE_PAREN, 0);
	};

	typedargslist() {
	    return this.getTypedRuleContext(TypedargslistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitParameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypedargslistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_typedargslist;
    }

	tfpdef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TfpdefContext);
	    } else {
	        return this.getTypedRuleContext(TfpdefContext,i);
	    }
	};

	STAR() {
	    return this.getToken(Python3Parser.STAR, 0);
	};

	POWER() {
	    return this.getToken(Python3Parser.POWER, 0);
	};

	ASSIGN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.ASSIGN);
	    } else {
	        return this.getToken(Python3Parser.ASSIGN, i);
	    }
	};


	test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TestContext);
	    } else {
	        return this.getTypedRuleContext(TestContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterTypedargslist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitTypedargslist(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitTypedargslist(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TfpdefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_tfpdef;
    }

	NAME() {
	    return this.getToken(Python3Parser.NAME, 0);
	};

	COLON() {
	    return this.getToken(Python3Parser.COLON, 0);
	};

	test() {
	    return this.getTypedRuleContext(TestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterTfpdef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitTfpdef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitTfpdef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VarargslistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_varargslist;
    }

	vfpdef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VfpdefContext);
	    } else {
	        return this.getTypedRuleContext(VfpdefContext,i);
	    }
	};

	STAR() {
	    return this.getToken(Python3Parser.STAR, 0);
	};

	POWER() {
	    return this.getToken(Python3Parser.POWER, 0);
	};

	ASSIGN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.ASSIGN);
	    } else {
	        return this.getToken(Python3Parser.ASSIGN, i);
	    }
	};


	test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TestContext);
	    } else {
	        return this.getTypedRuleContext(TestContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterVarargslist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitVarargslist(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitVarargslist(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VfpdefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_vfpdef;
    }

	NAME() {
	    return this.getToken(Python3Parser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterVfpdef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitVfpdef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitVfpdef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_stmt;
    }

	simple_stmt() {
	    return this.getTypedRuleContext(Simple_stmtContext,0);
	};

	compound_stmt() {
	    return this.getTypedRuleContext(Compound_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Simple_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_simple_stmt;
    }

	small_stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Small_stmtContext);
	    } else {
	        return this.getTypedRuleContext(Small_stmtContext,i);
	    }
	};

	NEWLINE() {
	    return this.getToken(Python3Parser.NEWLINE, 0);
	};

	SEMI_COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.SEMI_COLON);
	    } else {
	        return this.getToken(Python3Parser.SEMI_COLON, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterSimple_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitSimple_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitSimple_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Small_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_small_stmt;
    }

	expr_stmt() {
	    return this.getTypedRuleContext(Expr_stmtContext,0);
	};

	del_stmt() {
	    return this.getTypedRuleContext(Del_stmtContext,0);
	};

	pass_stmt() {
	    return this.getTypedRuleContext(Pass_stmtContext,0);
	};

	flow_stmt() {
	    return this.getTypedRuleContext(Flow_stmtContext,0);
	};

	import_stmt() {
	    return this.getTypedRuleContext(Import_stmtContext,0);
	};

	global_stmt() {
	    return this.getTypedRuleContext(Global_stmtContext,0);
	};

	nonlocal_stmt() {
	    return this.getTypedRuleContext(Nonlocal_stmtContext,0);
	};

	assert_stmt() {
	    return this.getTypedRuleContext(Assert_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterSmall_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitSmall_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitSmall_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Expr_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_expr_stmt;
    }

	testlist_star_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Testlist_star_exprContext);
	    } else {
	        return this.getTypedRuleContext(Testlist_star_exprContext,i);
	    }
	};

	annassign() {
	    return this.getTypedRuleContext(AnnassignContext,0);
	};

	augassign() {
	    return this.getTypedRuleContext(AugassignContext,0);
	};

	yield_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Yield_exprContext);
	    } else {
	        return this.getTypedRuleContext(Yield_exprContext,i);
	    }
	};

	testlist() {
	    return this.getTypedRuleContext(TestlistContext,0);
	};

	ASSIGN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.ASSIGN);
	    } else {
	        return this.getToken(Python3Parser.ASSIGN, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterExpr_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitExpr_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitExpr_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnnassignContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_annassign;
    }

	COLON() {
	    return this.getToken(Python3Parser.COLON, 0);
	};

	test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TestContext);
	    } else {
	        return this.getTypedRuleContext(TestContext,i);
	    }
	};

	ASSIGN() {
	    return this.getToken(Python3Parser.ASSIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterAnnassign(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitAnnassign(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitAnnassign(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Testlist_star_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_testlist_star_expr;
    }

	test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TestContext);
	    } else {
	        return this.getTypedRuleContext(TestContext,i);
	    }
	};

	star_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Star_exprContext);
	    } else {
	        return this.getTypedRuleContext(Star_exprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterTestlist_star_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitTestlist_star_expr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitTestlist_star_expr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AugassignContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_augassign;
    }

	ADD_ASSIGN() {
	    return this.getToken(Python3Parser.ADD_ASSIGN, 0);
	};

	SUB_ASSIGN() {
	    return this.getToken(Python3Parser.SUB_ASSIGN, 0);
	};

	MULT_ASSIGN() {
	    return this.getToken(Python3Parser.MULT_ASSIGN, 0);
	};

	AT_ASSIGN() {
	    return this.getToken(Python3Parser.AT_ASSIGN, 0);
	};

	DIV_ASSIGN() {
	    return this.getToken(Python3Parser.DIV_ASSIGN, 0);
	};

	MOD_ASSIGN() {
	    return this.getToken(Python3Parser.MOD_ASSIGN, 0);
	};

	AND_ASSIGN() {
	    return this.getToken(Python3Parser.AND_ASSIGN, 0);
	};

	OR_ASSIGN() {
	    return this.getToken(Python3Parser.OR_ASSIGN, 0);
	};

	XOR_ASSIGN() {
	    return this.getToken(Python3Parser.XOR_ASSIGN, 0);
	};

	LEFT_SHIFT_ASSIGN() {
	    return this.getToken(Python3Parser.LEFT_SHIFT_ASSIGN, 0);
	};

	RIGHT_SHIFT_ASSIGN() {
	    return this.getToken(Python3Parser.RIGHT_SHIFT_ASSIGN, 0);
	};

	POWER_ASSIGN() {
	    return this.getToken(Python3Parser.POWER_ASSIGN, 0);
	};

	IDIV_ASSIGN() {
	    return this.getToken(Python3Parser.IDIV_ASSIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterAugassign(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitAugassign(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitAugassign(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Del_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_del_stmt;
    }

	DEL() {
	    return this.getToken(Python3Parser.DEL, 0);
	};

	exprlist() {
	    return this.getTypedRuleContext(ExprlistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterDel_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitDel_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitDel_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Pass_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_pass_stmt;
    }

	PASS() {
	    return this.getToken(Python3Parser.PASS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterPass_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitPass_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitPass_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Flow_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_flow_stmt;
    }

	break_stmt() {
	    return this.getTypedRuleContext(Break_stmtContext,0);
	};

	continue_stmt() {
	    return this.getTypedRuleContext(Continue_stmtContext,0);
	};

	return_stmt() {
	    return this.getTypedRuleContext(Return_stmtContext,0);
	};

	raise_stmt() {
	    return this.getTypedRuleContext(Raise_stmtContext,0);
	};

	yield_stmt() {
	    return this.getTypedRuleContext(Yield_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterFlow_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitFlow_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitFlow_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Break_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_break_stmt;
    }

	BREAK() {
	    return this.getToken(Python3Parser.BREAK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterBreak_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitBreak_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitBreak_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Continue_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_continue_stmt;
    }

	CONTINUE() {
	    return this.getToken(Python3Parser.CONTINUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterContinue_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitContinue_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitContinue_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Return_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_return_stmt;
    }

	RETURN() {
	    return this.getToken(Python3Parser.RETURN, 0);
	};

	testlist() {
	    return this.getTypedRuleContext(TestlistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterReturn_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitReturn_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitReturn_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Yield_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_yield_stmt;
    }

	yield_expr() {
	    return this.getTypedRuleContext(Yield_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterYield_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitYield_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitYield_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Raise_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_raise_stmt;
    }

	RAISE() {
	    return this.getToken(Python3Parser.RAISE, 0);
	};

	test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TestContext);
	    } else {
	        return this.getTypedRuleContext(TestContext,i);
	    }
	};

	FROM() {
	    return this.getToken(Python3Parser.FROM, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterRaise_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitRaise_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitRaise_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Import_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_import_stmt;
    }

	import_name() {
	    return this.getTypedRuleContext(Import_nameContext,0);
	};

	import_from() {
	    return this.getTypedRuleContext(Import_fromContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterImport_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitImport_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitImport_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Import_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_import_name;
    }

	IMPORT() {
	    return this.getToken(Python3Parser.IMPORT, 0);
	};

	dotted_as_names() {
	    return this.getTypedRuleContext(Dotted_as_namesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterImport_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitImport_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitImport_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Import_fromContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_import_from;
    }

	FROM() {
	    return this.getToken(Python3Parser.FROM, 0);
	};

	IMPORT() {
	    return this.getToken(Python3Parser.IMPORT, 0);
	};

	dotted_name() {
	    return this.getTypedRuleContext(Dotted_nameContext,0);
	};

	STAR() {
	    return this.getToken(Python3Parser.STAR, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(Python3Parser.OPEN_PAREN, 0);
	};

	import_as_names() {
	    return this.getTypedRuleContext(Import_as_namesContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(Python3Parser.CLOSE_PAREN, 0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.DOT);
	    } else {
	        return this.getToken(Python3Parser.DOT, i);
	    }
	};


	ELLIPSIS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.ELLIPSIS);
	    } else {
	        return this.getToken(Python3Parser.ELLIPSIS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterImport_from(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitImport_from(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitImport_from(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Import_as_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_import_as_name;
    }

	NAME = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.NAME);
	    } else {
	        return this.getToken(Python3Parser.NAME, i);
	    }
	};


	AS() {
	    return this.getToken(Python3Parser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterImport_as_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitImport_as_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitImport_as_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Dotted_as_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_dotted_as_name;
    }

	dotted_name() {
	    return this.getTypedRuleContext(Dotted_nameContext,0);
	};

	AS() {
	    return this.getToken(Python3Parser.AS, 0);
	};

	NAME() {
	    return this.getToken(Python3Parser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterDotted_as_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitDotted_as_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitDotted_as_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Import_as_namesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_import_as_names;
    }

	import_as_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Import_as_nameContext);
	    } else {
	        return this.getTypedRuleContext(Import_as_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterImport_as_names(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitImport_as_names(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitImport_as_names(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Dotted_as_namesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_dotted_as_names;
    }

	dotted_as_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Dotted_as_nameContext);
	    } else {
	        return this.getTypedRuleContext(Dotted_as_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterDotted_as_names(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitDotted_as_names(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitDotted_as_names(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Dotted_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_dotted_name;
    }

	NAME = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.NAME);
	    } else {
	        return this.getToken(Python3Parser.NAME, i);
	    }
	};


	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.DOT);
	    } else {
	        return this.getToken(Python3Parser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterDotted_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitDotted_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitDotted_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Global_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_global_stmt;
    }

	GLOBAL() {
	    return this.getToken(Python3Parser.GLOBAL, 0);
	};

	NAME = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.NAME);
	    } else {
	        return this.getToken(Python3Parser.NAME, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterGlobal_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitGlobal_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitGlobal_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Nonlocal_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_nonlocal_stmt;
    }

	NONLOCAL() {
	    return this.getToken(Python3Parser.NONLOCAL, 0);
	};

	NAME = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.NAME);
	    } else {
	        return this.getToken(Python3Parser.NAME, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterNonlocal_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitNonlocal_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitNonlocal_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Assert_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_assert_stmt;
    }

	ASSERT() {
	    return this.getToken(Python3Parser.ASSERT, 0);
	};

	test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TestContext);
	    } else {
	        return this.getTypedRuleContext(TestContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(Python3Parser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterAssert_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitAssert_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitAssert_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Compound_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_compound_stmt;
    }

	if_stmt() {
	    return this.getTypedRuleContext(If_stmtContext,0);
	};

	while_stmt() {
	    return this.getTypedRuleContext(While_stmtContext,0);
	};

	for_stmt() {
	    return this.getTypedRuleContext(For_stmtContext,0);
	};

	try_stmt() {
	    return this.getTypedRuleContext(Try_stmtContext,0);
	};

	with_stmt() {
	    return this.getTypedRuleContext(With_stmtContext,0);
	};

	funcdef() {
	    return this.getTypedRuleContext(FuncdefContext,0);
	};

	classdef() {
	    return this.getTypedRuleContext(ClassdefContext,0);
	};

	decorated() {
	    return this.getTypedRuleContext(DecoratedContext,0);
	};

	async_stmt() {
	    return this.getTypedRuleContext(Async_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterCompound_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitCompound_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitCompound_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Async_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_async_stmt;
    }

	ASYNC() {
	    return this.getToken(Python3Parser.ASYNC, 0);
	};

	funcdef() {
	    return this.getTypedRuleContext(FuncdefContext,0);
	};

	with_stmt() {
	    return this.getTypedRuleContext(With_stmtContext,0);
	};

	for_stmt() {
	    return this.getTypedRuleContext(For_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterAsync_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitAsync_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitAsync_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class If_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_if_stmt;
    }

	IF() {
	    return this.getToken(Python3Parser.IF, 0);
	};

	test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TestContext);
	    } else {
	        return this.getTypedRuleContext(TestContext,i);
	    }
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COLON);
	    } else {
	        return this.getToken(Python3Parser.COLON, i);
	    }
	};


	suite = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SuiteContext);
	    } else {
	        return this.getTypedRuleContext(SuiteContext,i);
	    }
	};

	ELIF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.ELIF);
	    } else {
	        return this.getToken(Python3Parser.ELIF, i);
	    }
	};


	ELSE() {
	    return this.getToken(Python3Parser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterIf_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitIf_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitIf_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class While_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_while_stmt;
    }

	WHILE() {
	    return this.getToken(Python3Parser.WHILE, 0);
	};

	test() {
	    return this.getTypedRuleContext(TestContext,0);
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COLON);
	    } else {
	        return this.getToken(Python3Parser.COLON, i);
	    }
	};


	suite = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SuiteContext);
	    } else {
	        return this.getTypedRuleContext(SuiteContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(Python3Parser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterWhile_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitWhile_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitWhile_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class For_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_for_stmt;
    }

	FOR() {
	    return this.getToken(Python3Parser.FOR, 0);
	};

	exprlist() {
	    return this.getTypedRuleContext(ExprlistContext,0);
	};

	IN() {
	    return this.getToken(Python3Parser.IN, 0);
	};

	testlist() {
	    return this.getTypedRuleContext(TestlistContext,0);
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COLON);
	    } else {
	        return this.getToken(Python3Parser.COLON, i);
	    }
	};


	suite = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SuiteContext);
	    } else {
	        return this.getTypedRuleContext(SuiteContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(Python3Parser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterFor_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitFor_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitFor_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Try_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_try_stmt;
    }

	TRY() {
	    return this.getToken(Python3Parser.TRY, 0);
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COLON);
	    } else {
	        return this.getToken(Python3Parser.COLON, i);
	    }
	};


	suite = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SuiteContext);
	    } else {
	        return this.getTypedRuleContext(SuiteContext,i);
	    }
	};

	FINALLY() {
	    return this.getToken(Python3Parser.FINALLY, 0);
	};

	except_clause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Except_clauseContext);
	    } else {
	        return this.getTypedRuleContext(Except_clauseContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(Python3Parser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterTry_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitTry_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitTry_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class With_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_with_stmt;
    }

	WITH() {
	    return this.getToken(Python3Parser.WITH, 0);
	};

	with_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(With_itemContext);
	    } else {
	        return this.getTypedRuleContext(With_itemContext,i);
	    }
	};

	COLON() {
	    return this.getToken(Python3Parser.COLON, 0);
	};

	suite() {
	    return this.getTypedRuleContext(SuiteContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterWith_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitWith_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitWith_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class With_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_with_item;
    }

	test() {
	    return this.getTypedRuleContext(TestContext,0);
	};

	AS() {
	    return this.getToken(Python3Parser.AS, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterWith_item(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitWith_item(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitWith_item(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Except_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_except_clause;
    }

	EXCEPT() {
	    return this.getToken(Python3Parser.EXCEPT, 0);
	};

	test() {
	    return this.getTypedRuleContext(TestContext,0);
	};

	AS() {
	    return this.getToken(Python3Parser.AS, 0);
	};

	NAME() {
	    return this.getToken(Python3Parser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterExcept_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitExcept_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitExcept_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SuiteContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_suite;
    }

	simple_stmt() {
	    return this.getTypedRuleContext(Simple_stmtContext,0);
	};

	NEWLINE() {
	    return this.getToken(Python3Parser.NEWLINE, 0);
	};

	INDENT() {
	    return this.getToken(Python3Parser.INDENT, 0);
	};

	DEDENT() {
	    return this.getToken(Python3Parser.DEDENT, 0);
	};

	stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StmtContext);
	    } else {
	        return this.getTypedRuleContext(StmtContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterSuite(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitSuite(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitSuite(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_test;
    }

	or_test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Or_testContext);
	    } else {
	        return this.getTypedRuleContext(Or_testContext,i);
	    }
	};

	IF() {
	    return this.getToken(Python3Parser.IF, 0);
	};

	ELSE() {
	    return this.getToken(Python3Parser.ELSE, 0);
	};

	test() {
	    return this.getTypedRuleContext(TestContext,0);
	};

	lambdef() {
	    return this.getTypedRuleContext(LambdefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitTest(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitTest(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Test_nocondContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_test_nocond;
    }

	or_test() {
	    return this.getTypedRuleContext(Or_testContext,0);
	};

	lambdef_nocond() {
	    return this.getTypedRuleContext(Lambdef_nocondContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterTest_nocond(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitTest_nocond(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitTest_nocond(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LambdefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_lambdef;
    }

	LAMBDA() {
	    return this.getToken(Python3Parser.LAMBDA, 0);
	};

	COLON() {
	    return this.getToken(Python3Parser.COLON, 0);
	};

	test() {
	    return this.getTypedRuleContext(TestContext,0);
	};

	varargslist() {
	    return this.getTypedRuleContext(VarargslistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterLambdef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitLambdef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitLambdef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Lambdef_nocondContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_lambdef_nocond;
    }

	LAMBDA() {
	    return this.getToken(Python3Parser.LAMBDA, 0);
	};

	COLON() {
	    return this.getToken(Python3Parser.COLON, 0);
	};

	test_nocond() {
	    return this.getTypedRuleContext(Test_nocondContext,0);
	};

	varargslist() {
	    return this.getTypedRuleContext(VarargslistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterLambdef_nocond(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitLambdef_nocond(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitLambdef_nocond(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Or_testContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_or_test;
    }

	and_test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(And_testContext);
	    } else {
	        return this.getTypedRuleContext(And_testContext,i);
	    }
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.OR);
	    } else {
	        return this.getToken(Python3Parser.OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterOr_test(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitOr_test(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitOr_test(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class And_testContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_and_test;
    }

	not_test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Not_testContext);
	    } else {
	        return this.getTypedRuleContext(Not_testContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.AND);
	    } else {
	        return this.getToken(Python3Parser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterAnd_test(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitAnd_test(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitAnd_test(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Not_testContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_not_test;
    }

	NOT() {
	    return this.getToken(Python3Parser.NOT, 0);
	};

	not_test() {
	    return this.getTypedRuleContext(Not_testContext,0);
	};

	comparison() {
	    return this.getTypedRuleContext(ComparisonContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterNot_test(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitNot_test(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitNot_test(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ComparisonContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_comparison;
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	comp_op = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Comp_opContext);
	    } else {
	        return this.getTypedRuleContext(Comp_opContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterComparison(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitComparison(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitComparison(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Comp_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_comp_op;
    }

	LESS_THAN() {
	    return this.getToken(Python3Parser.LESS_THAN, 0);
	};

	GREATER_THAN() {
	    return this.getToken(Python3Parser.GREATER_THAN, 0);
	};

	EQUALS() {
	    return this.getToken(Python3Parser.EQUALS, 0);
	};

	GT_EQ() {
	    return this.getToken(Python3Parser.GT_EQ, 0);
	};

	LT_EQ() {
	    return this.getToken(Python3Parser.LT_EQ, 0);
	};

	NOT_EQ_1() {
	    return this.getToken(Python3Parser.NOT_EQ_1, 0);
	};

	NOT_EQ_2() {
	    return this.getToken(Python3Parser.NOT_EQ_2, 0);
	};

	IN() {
	    return this.getToken(Python3Parser.IN, 0);
	};

	NOT() {
	    return this.getToken(Python3Parser.NOT, 0);
	};

	IS() {
	    return this.getToken(Python3Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterComp_op(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitComp_op(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitComp_op(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Star_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_star_expr;
    }

	STAR() {
	    return this.getToken(Python3Parser.STAR, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterStar_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitStar_expr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitStar_expr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_expr;
    }

	xor_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Xor_exprContext);
	    } else {
	        return this.getTypedRuleContext(Xor_exprContext,i);
	    }
	};

	OR_OP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.OR_OP);
	    } else {
	        return this.getToken(Python3Parser.OR_OP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Xor_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_xor_expr;
    }

	and_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(And_exprContext);
	    } else {
	        return this.getTypedRuleContext(And_exprContext,i);
	    }
	};

	XOR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.XOR);
	    } else {
	        return this.getToken(Python3Parser.XOR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterXor_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitXor_expr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitXor_expr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class And_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_and_expr;
    }

	shift_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Shift_exprContext);
	    } else {
	        return this.getTypedRuleContext(Shift_exprContext,i);
	    }
	};

	AND_OP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.AND_OP);
	    } else {
	        return this.getToken(Python3Parser.AND_OP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterAnd_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitAnd_expr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitAnd_expr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Shift_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_shift_expr;
    }

	arith_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Arith_exprContext);
	    } else {
	        return this.getTypedRuleContext(Arith_exprContext,i);
	    }
	};

	LEFT_SHIFT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.LEFT_SHIFT);
	    } else {
	        return this.getToken(Python3Parser.LEFT_SHIFT, i);
	    }
	};


	RIGHT_SHIFT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.RIGHT_SHIFT);
	    } else {
	        return this.getToken(Python3Parser.RIGHT_SHIFT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterShift_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitShift_expr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitShift_expr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Arith_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_arith_expr;
    }

	term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TermContext);
	    } else {
	        return this.getTypedRuleContext(TermContext,i);
	    }
	};

	ADD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.ADD);
	    } else {
	        return this.getToken(Python3Parser.ADD, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.MINUS);
	    } else {
	        return this.getToken(Python3Parser.MINUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterArith_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitArith_expr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitArith_expr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_term;
    }

	factor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FactorContext);
	    } else {
	        return this.getTypedRuleContext(FactorContext,i);
	    }
	};

	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.STAR);
	    } else {
	        return this.getToken(Python3Parser.STAR, i);
	    }
	};


	AT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.AT);
	    } else {
	        return this.getToken(Python3Parser.AT, i);
	    }
	};


	DIV = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.DIV);
	    } else {
	        return this.getToken(Python3Parser.DIV, i);
	    }
	};


	MOD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.MOD);
	    } else {
	        return this.getToken(Python3Parser.MOD, i);
	    }
	};


	IDIV = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.IDIV);
	    } else {
	        return this.getToken(Python3Parser.IDIV, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitTerm(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitTerm(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_factor;
    }

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	ADD() {
	    return this.getToken(Python3Parser.ADD, 0);
	};

	MINUS() {
	    return this.getToken(Python3Parser.MINUS, 0);
	};

	NOT_OP() {
	    return this.getToken(Python3Parser.NOT_OP, 0);
	};

	power() {
	    return this.getTypedRuleContext(PowerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitFactor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitFactor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PowerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_power;
    }

	atom_expr() {
	    return this.getTypedRuleContext(Atom_exprContext,0);
	};

	POWER() {
	    return this.getToken(Python3Parser.POWER, 0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterPower(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitPower(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitPower(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Atom_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_atom_expr;
    }

	atom() {
	    return this.getTypedRuleContext(AtomContext,0);
	};

	AWAIT() {
	    return this.getToken(Python3Parser.AWAIT, 0);
	};

	trailer = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TrailerContext);
	    } else {
	        return this.getTypedRuleContext(TrailerContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterAtom_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitAtom_expr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitAtom_expr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_atom;
    }

	OPEN_PAREN() {
	    return this.getToken(Python3Parser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(Python3Parser.CLOSE_PAREN, 0);
	};

	OPEN_BRACK() {
	    return this.getToken(Python3Parser.OPEN_BRACK, 0);
	};

	CLOSE_BRACK() {
	    return this.getToken(Python3Parser.CLOSE_BRACK, 0);
	};

	OPEN_BRACE() {
	    return this.getToken(Python3Parser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(Python3Parser.CLOSE_BRACE, 0);
	};

	NAME() {
	    return this.getToken(Python3Parser.NAME, 0);
	};

	NUMBER() {
	    return this.getToken(Python3Parser.NUMBER, 0);
	};

	ELLIPSIS() {
	    return this.getToken(Python3Parser.ELLIPSIS, 0);
	};

	NONE() {
	    return this.getToken(Python3Parser.NONE, 0);
	};

	TRUE() {
	    return this.getToken(Python3Parser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(Python3Parser.FALSE, 0);
	};

	yield_expr() {
	    return this.getTypedRuleContext(Yield_exprContext,0);
	};

	testlist_comp() {
	    return this.getTypedRuleContext(Testlist_compContext,0);
	};

	dictorsetmaker() {
	    return this.getTypedRuleContext(DictorsetmakerContext,0);
	};

	STRING = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.STRING);
	    } else {
	        return this.getToken(Python3Parser.STRING, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitAtom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Testlist_compContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_testlist_comp;
    }

	test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TestContext);
	    } else {
	        return this.getTypedRuleContext(TestContext,i);
	    }
	};

	star_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Star_exprContext);
	    } else {
	        return this.getTypedRuleContext(Star_exprContext,i);
	    }
	};

	comp_for() {
	    return this.getTypedRuleContext(Comp_forContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterTestlist_comp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitTestlist_comp(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitTestlist_comp(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TrailerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_trailer;
    }

	OPEN_PAREN() {
	    return this.getToken(Python3Parser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(Python3Parser.CLOSE_PAREN, 0);
	};

	arglist() {
	    return this.getTypedRuleContext(ArglistContext,0);
	};

	OPEN_BRACK() {
	    return this.getToken(Python3Parser.OPEN_BRACK, 0);
	};

	subscriptlist() {
	    return this.getTypedRuleContext(SubscriptlistContext,0);
	};

	CLOSE_BRACK() {
	    return this.getToken(Python3Parser.CLOSE_BRACK, 0);
	};

	DOT() {
	    return this.getToken(Python3Parser.DOT, 0);
	};

	NAME() {
	    return this.getToken(Python3Parser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterTrailer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitTrailer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitTrailer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SubscriptlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_subscriptlist;
    }

	subscript_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Subscript_Context);
	    } else {
	        return this.getTypedRuleContext(Subscript_Context,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterSubscriptlist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitSubscriptlist(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitSubscriptlist(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Subscript_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_subscript_;
    }

	test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TestContext);
	    } else {
	        return this.getTypedRuleContext(TestContext,i);
	    }
	};

	COLON() {
	    return this.getToken(Python3Parser.COLON, 0);
	};

	sliceop() {
	    return this.getTypedRuleContext(SliceopContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterSubscript_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitSubscript_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitSubscript_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SliceopContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_sliceop;
    }

	COLON() {
	    return this.getToken(Python3Parser.COLON, 0);
	};

	test() {
	    return this.getTypedRuleContext(TestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterSliceop(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitSliceop(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitSliceop(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExprlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_exprlist;
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	star_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Star_exprContext);
	    } else {
	        return this.getTypedRuleContext(Star_exprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterExprlist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitExprlist(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitExprlist(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TestlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_testlist;
    }

	test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TestContext);
	    } else {
	        return this.getTypedRuleContext(TestContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterTestlist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitTestlist(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitTestlist(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DictorsetmakerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_dictorsetmaker;
    }

	test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TestContext);
	    } else {
	        return this.getTypedRuleContext(TestContext,i);
	    }
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COLON);
	    } else {
	        return this.getToken(Python3Parser.COLON, i);
	    }
	};


	POWER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.POWER);
	    } else {
	        return this.getToken(Python3Parser.POWER, i);
	    }
	};


	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	comp_for() {
	    return this.getTypedRuleContext(Comp_forContext,0);
	};

	star_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Star_exprContext);
	    } else {
	        return this.getTypedRuleContext(Star_exprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterDictorsetmaker(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitDictorsetmaker(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitDictorsetmaker(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassdefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_classdef;
    }

	CLASS() {
	    return this.getToken(Python3Parser.CLASS, 0);
	};

	NAME() {
	    return this.getToken(Python3Parser.NAME, 0);
	};

	COLON() {
	    return this.getToken(Python3Parser.COLON, 0);
	};

	suite() {
	    return this.getTypedRuleContext(SuiteContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(Python3Parser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(Python3Parser.CLOSE_PAREN, 0);
	};

	arglist() {
	    return this.getTypedRuleContext(ArglistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterClassdef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitClassdef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitClassdef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArglistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_arglist;
    }

	argument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgumentContext);
	    } else {
	        return this.getTypedRuleContext(ArgumentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterArglist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitArglist(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitArglist(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_argument;
    }

	test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TestContext);
	    } else {
	        return this.getTypedRuleContext(TestContext,i);
	    }
	};

	ASSIGN() {
	    return this.getToken(Python3Parser.ASSIGN, 0);
	};

	POWER() {
	    return this.getToken(Python3Parser.POWER, 0);
	};

	STAR() {
	    return this.getToken(Python3Parser.STAR, 0);
	};

	comp_for() {
	    return this.getTypedRuleContext(Comp_forContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitArgument(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitArgument(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Comp_iterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_comp_iter;
    }

	comp_for() {
	    return this.getTypedRuleContext(Comp_forContext,0);
	};

	comp_if() {
	    return this.getTypedRuleContext(Comp_ifContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterComp_iter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitComp_iter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitComp_iter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Comp_forContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_comp_for;
    }

	FOR() {
	    return this.getToken(Python3Parser.FOR, 0);
	};

	exprlist() {
	    return this.getTypedRuleContext(ExprlistContext,0);
	};

	IN() {
	    return this.getToken(Python3Parser.IN, 0);
	};

	or_test() {
	    return this.getTypedRuleContext(Or_testContext,0);
	};

	ASYNC() {
	    return this.getToken(Python3Parser.ASYNC, 0);
	};

	comp_iter() {
	    return this.getTypedRuleContext(Comp_iterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterComp_for(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitComp_for(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitComp_for(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Comp_ifContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_comp_if;
    }

	IF() {
	    return this.getToken(Python3Parser.IF, 0);
	};

	test_nocond() {
	    return this.getTypedRuleContext(Test_nocondContext,0);
	};

	comp_iter() {
	    return this.getTypedRuleContext(Comp_iterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterComp_if(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitComp_if(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitComp_if(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Encoding_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_encoding_decl;
    }

	NAME() {
	    return this.getToken(Python3Parser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterEncoding_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitEncoding_decl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitEncoding_decl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Yield_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_yield_expr;
    }

	YIELD() {
	    return this.getToken(Python3Parser.YIELD, 0);
	};

	yield_arg() {
	    return this.getTypedRuleContext(Yield_argContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterYield_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitYield_expr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitYield_expr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Yield_argContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_yield_arg;
    }

	FROM() {
	    return this.getToken(Python3Parser.FROM, 0);
	};

	test() {
	    return this.getTypedRuleContext(TestContext,0);
	};

	testlist() {
	    return this.getTypedRuleContext(TestlistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterYield_arg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitYield_arg(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitYield_arg(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




Python3Parser.Single_inputContext = Single_inputContext; 
Python3Parser.File_inputContext = File_inputContext; 
Python3Parser.Eval_inputContext = Eval_inputContext; 
Python3Parser.DecoratorContext = DecoratorContext; 
Python3Parser.DecoratorsContext = DecoratorsContext; 
Python3Parser.DecoratedContext = DecoratedContext; 
Python3Parser.Async_funcdefContext = Async_funcdefContext; 
Python3Parser.FuncdefContext = FuncdefContext; 
Python3Parser.ParametersContext = ParametersContext; 
Python3Parser.TypedargslistContext = TypedargslistContext; 
Python3Parser.TfpdefContext = TfpdefContext; 
Python3Parser.VarargslistContext = VarargslistContext; 
Python3Parser.VfpdefContext = VfpdefContext; 
Python3Parser.StmtContext = StmtContext; 
Python3Parser.Simple_stmtContext = Simple_stmtContext; 
Python3Parser.Small_stmtContext = Small_stmtContext; 
Python3Parser.Expr_stmtContext = Expr_stmtContext; 
Python3Parser.AnnassignContext = AnnassignContext; 
Python3Parser.Testlist_star_exprContext = Testlist_star_exprContext; 
Python3Parser.AugassignContext = AugassignContext; 
Python3Parser.Del_stmtContext = Del_stmtContext; 
Python3Parser.Pass_stmtContext = Pass_stmtContext; 
Python3Parser.Flow_stmtContext = Flow_stmtContext; 
Python3Parser.Break_stmtContext = Break_stmtContext; 
Python3Parser.Continue_stmtContext = Continue_stmtContext; 
Python3Parser.Return_stmtContext = Return_stmtContext; 
Python3Parser.Yield_stmtContext = Yield_stmtContext; 
Python3Parser.Raise_stmtContext = Raise_stmtContext; 
Python3Parser.Import_stmtContext = Import_stmtContext; 
Python3Parser.Import_nameContext = Import_nameContext; 
Python3Parser.Import_fromContext = Import_fromContext; 
Python3Parser.Import_as_nameContext = Import_as_nameContext; 
Python3Parser.Dotted_as_nameContext = Dotted_as_nameContext; 
Python3Parser.Import_as_namesContext = Import_as_namesContext; 
Python3Parser.Dotted_as_namesContext = Dotted_as_namesContext; 
Python3Parser.Dotted_nameContext = Dotted_nameContext; 
Python3Parser.Global_stmtContext = Global_stmtContext; 
Python3Parser.Nonlocal_stmtContext = Nonlocal_stmtContext; 
Python3Parser.Assert_stmtContext = Assert_stmtContext; 
Python3Parser.Compound_stmtContext = Compound_stmtContext; 
Python3Parser.Async_stmtContext = Async_stmtContext; 
Python3Parser.If_stmtContext = If_stmtContext; 
Python3Parser.While_stmtContext = While_stmtContext; 
Python3Parser.For_stmtContext = For_stmtContext; 
Python3Parser.Try_stmtContext = Try_stmtContext; 
Python3Parser.With_stmtContext = With_stmtContext; 
Python3Parser.With_itemContext = With_itemContext; 
Python3Parser.Except_clauseContext = Except_clauseContext; 
Python3Parser.SuiteContext = SuiteContext; 
Python3Parser.TestContext = TestContext; 
Python3Parser.Test_nocondContext = Test_nocondContext; 
Python3Parser.LambdefContext = LambdefContext; 
Python3Parser.Lambdef_nocondContext = Lambdef_nocondContext; 
Python3Parser.Or_testContext = Or_testContext; 
Python3Parser.And_testContext = And_testContext; 
Python3Parser.Not_testContext = Not_testContext; 
Python3Parser.ComparisonContext = ComparisonContext; 
Python3Parser.Comp_opContext = Comp_opContext; 
Python3Parser.Star_exprContext = Star_exprContext; 
Python3Parser.ExprContext = ExprContext; 
Python3Parser.Xor_exprContext = Xor_exprContext; 
Python3Parser.And_exprContext = And_exprContext; 
Python3Parser.Shift_exprContext = Shift_exprContext; 
Python3Parser.Arith_exprContext = Arith_exprContext; 
Python3Parser.TermContext = TermContext; 
Python3Parser.FactorContext = FactorContext; 
Python3Parser.PowerContext = PowerContext; 
Python3Parser.Atom_exprContext = Atom_exprContext; 
Python3Parser.AtomContext = AtomContext; 
Python3Parser.Testlist_compContext = Testlist_compContext; 
Python3Parser.TrailerContext = TrailerContext; 
Python3Parser.SubscriptlistContext = SubscriptlistContext; 
Python3Parser.Subscript_Context = Subscript_Context; 
Python3Parser.SliceopContext = SliceopContext; 
Python3Parser.ExprlistContext = ExprlistContext; 
Python3Parser.TestlistContext = TestlistContext; 
Python3Parser.DictorsetmakerContext = DictorsetmakerContext; 
Python3Parser.ClassdefContext = ClassdefContext; 
Python3Parser.ArglistContext = ArglistContext; 
Python3Parser.ArgumentContext = ArgumentContext; 
Python3Parser.Comp_iterContext = Comp_iterContext; 
Python3Parser.Comp_forContext = Comp_forContext; 
Python3Parser.Comp_ifContext = Comp_ifContext; 
Python3Parser.Encoding_declContext = Encoding_declContext; 
Python3Parser.Yield_exprContext = Yield_exprContext; 
Python3Parser.Yield_argContext = Yield_argContext; 
