// Generated from grammars/CPP14Parser.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';
import CPP14ParserListener from './CPP14ParserListener.js';
import CPP14ParserVisitor from './CPP14ParserVisitor.js';

const serializedATN = [4,1,145,2110,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,
2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,
2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,2,177,7,177,
2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,2,183,7,183,
2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,
2,190,7,190,1,0,3,0,384,8,0,1,0,1,0,1,1,4,1,389,8,1,11,1,12,1,390,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,3,1,400,8,1,1,2,1,2,3,2,404,8,2,1,3,1,3,1,3,1,3,1,
3,1,3,1,3,3,3,413,8,3,1,3,3,3,416,8,3,1,4,1,4,3,4,420,8,4,1,4,1,4,1,5,1,
5,1,5,1,5,3,5,428,8,5,1,5,1,5,1,5,1,5,1,5,3,5,435,8,5,1,5,3,5,438,8,5,1,
5,5,5,441,8,5,10,5,12,5,444,9,5,1,6,1,6,3,6,448,8,6,1,6,1,6,1,7,1,7,3,7,
454,8,7,1,7,1,7,1,8,1,8,1,8,1,8,3,8,462,8,8,3,8,464,8,8,1,9,1,9,1,10,1,10,
1,10,5,10,471,8,10,10,10,12,10,474,9,10,1,10,3,10,477,8,10,1,11,1,11,3,11,
481,8,11,1,12,3,12,484,8,12,1,12,1,12,3,12,488,8,12,1,13,3,13,491,8,13,1,
13,1,13,1,13,1,14,1,14,3,14,498,8,14,1,14,1,14,3,14,502,8,14,1,14,3,14,505,
8,14,1,14,3,14,508,8,14,1,14,3,14,511,8,14,1,15,1,15,1,15,1,15,3,15,517,
8,15,1,15,1,15,3,15,521,8,15,1,15,1,15,3,15,525,8,15,1,15,1,15,1,15,1,15,
1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,539,8,15,1,15,1,15,3,15,543,
8,15,1,15,1,15,1,15,1,15,3,15,549,8,15,1,15,1,15,1,15,1,15,1,15,3,15,556,
8,15,1,15,1,15,1,15,1,15,3,15,562,8,15,1,15,1,15,3,15,566,8,15,1,15,1,15,
5,15,570,8,15,10,15,12,15,573,9,15,1,16,1,16,1,17,1,17,1,18,3,18,580,8,18,
1,18,1,18,1,18,3,18,585,8,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
1,18,1,18,3,18,598,8,18,1,19,1,19,1,19,1,19,1,19,3,19,605,8,19,1,19,1,19,
1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,617,8,19,1,19,1,19,1,19,1,19,
1,19,1,19,1,19,1,19,3,19,627,8,19,1,20,1,20,1,21,3,21,632,8,21,1,21,1,21,
3,21,636,8,21,1,21,1,21,1,21,1,21,1,21,3,21,643,8,21,1,21,3,21,646,8,21,
1,22,1,22,1,22,1,22,1,23,1,23,3,23,654,8,23,1,24,1,24,3,24,658,8,24,1,24,
3,24,661,8,24,1,25,1,25,1,25,1,25,1,25,3,25,668,8,25,1,25,1,25,1,25,1,25,
1,25,3,25,675,8,25,5,25,677,8,25,10,25,12,25,680,9,25,1,26,1,26,3,26,684,
8,26,1,26,1,26,3,26,688,8,26,1,27,3,27,691,8,27,1,27,1,27,1,27,3,27,696,
8,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,3,
29,711,8,29,1,30,1,30,1,30,5,30,716,8,30,10,30,12,30,719,9,30,1,31,1,31,
1,31,5,31,724,8,31,10,31,12,31,727,9,31,1,32,1,32,1,32,5,32,732,8,32,10,
32,12,32,735,9,32,1,33,1,33,1,33,1,33,5,33,741,8,33,10,33,12,33,744,9,33,
1,34,1,34,1,34,1,34,3,34,750,8,34,1,35,1,35,1,35,5,35,755,8,35,10,35,12,
35,758,9,35,1,36,1,36,1,36,5,36,763,8,36,10,36,12,36,766,9,36,1,37,1,37,
1,37,5,37,771,8,37,10,37,12,37,774,9,37,1,38,1,38,1,38,5,38,779,8,38,10,
38,12,38,782,9,38,1,39,1,39,1,39,5,39,787,8,39,10,39,12,39,790,9,39,1,40,
1,40,1,40,5,40,795,8,40,10,40,12,40,798,9,40,1,41,1,41,1,41,5,41,803,8,41,
10,41,12,41,806,9,41,1,42,1,42,1,42,1,42,1,42,1,42,3,42,814,8,42,1,43,1,
43,1,43,1,43,1,43,1,43,3,43,822,8,43,1,44,1,44,1,45,1,45,1,45,5,45,829,8,
45,10,45,12,45,832,9,45,1,46,1,46,1,47,1,47,1,47,3,47,839,8,47,1,47,1,47,
1,47,1,47,1,47,1,47,3,47,847,8,47,3,47,849,8,47,1,48,3,48,852,8,48,1,48,
1,48,1,48,1,48,3,48,858,8,48,1,48,1,48,1,48,1,49,3,49,864,8,49,1,49,1,49,
1,50,1,50,3,50,870,8,50,1,50,1,50,1,51,4,51,875,8,51,11,51,12,51,876,1,52,
1,52,1,52,1,52,1,52,1,52,1,52,3,52,886,8,52,1,52,1,52,1,52,1,52,1,52,1,52,
3,52,894,8,52,1,53,1,53,3,53,898,8,53,1,53,1,53,1,53,1,53,1,53,3,53,905,
8,53,3,53,907,8,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,927,8,54,1,54,1,54,3,54,931,8,54,
1,54,1,54,1,54,1,54,3,54,937,8,54,1,54,1,54,1,54,3,54,942,8,54,1,55,1,55,
3,55,946,8,55,1,56,3,56,949,8,56,1,56,1,56,1,56,1,57,1,57,3,57,956,8,57,
1,58,1,58,1,58,1,58,1,58,3,58,963,8,58,1,58,1,58,3,58,967,8,58,1,58,1,58,
1,59,1,59,1,60,4,60,974,8,60,11,60,12,60,975,1,61,1,61,1,61,1,61,1,61,1,
61,1,61,1,61,1,61,3,61,987,8,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
3,62,997,8,62,1,63,1,63,1,63,3,63,1002,8,63,1,63,1,63,1,63,1,63,1,64,3,64,
1009,8,64,1,64,3,64,1012,8,64,1,64,1,64,1,64,3,64,1017,8,64,1,64,1,64,1,
64,3,64,1022,8,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,66,1,66,1,67,
1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,68,3,68,1043,8,68,1,69,4,69,1046,8,
69,11,69,12,69,1047,1,69,3,69,1051,8,69,1,70,1,70,1,71,1,71,1,72,1,72,1,
73,1,73,1,73,3,73,1062,8,73,1,74,1,74,1,74,1,74,3,74,1068,8,74,1,75,4,75,
1071,8,75,11,75,12,75,1072,1,75,3,75,1076,8,75,1,76,4,76,1079,8,76,11,76,
12,76,1080,1,76,3,76,1084,8,76,1,77,1,77,1,78,1,78,1,79,3,79,1091,8,79,1,
79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,1100,8,79,1,79,4,79,1103,8,79,11,79,
12,79,1104,1,79,3,79,1108,8,79,1,79,1,79,3,79,1112,8,79,1,79,1,79,3,79,1116,
8,79,1,79,1,79,3,79,1120,8,79,1,79,1,79,1,79,3,79,1125,8,79,1,79,5,79,1128,
8,79,10,79,12,79,1131,9,79,1,79,1,79,1,79,3,79,1136,8,79,1,79,1,79,1,79,
1,79,3,79,1142,8,79,1,80,1,80,1,80,1,80,3,80,1148,8,80,1,81,1,81,1,81,1,
81,3,81,1154,8,81,1,81,1,81,1,82,1,82,3,82,1160,8,82,1,82,3,82,1163,8,82,
1,82,1,82,1,82,1,82,3,82,1169,8,82,1,82,1,82,3,82,1173,8,82,1,82,1,82,3,
82,1177,8,82,1,82,3,82,1180,8,82,1,83,1,83,1,84,1,84,1,84,1,84,3,84,1188,
8,84,3,84,1190,8,84,1,84,1,84,1,85,1,85,3,85,1196,8,85,1,85,3,85,1199,8,
85,1,85,3,85,1202,8,85,1,85,3,85,1205,8,85,1,86,1,86,3,86,1209,8,86,1,86,
1,86,3,86,1213,8,86,1,86,1,86,1,87,1,87,3,87,1219,8,87,1,88,1,88,1,88,1,
89,1,89,1,89,5,89,1227,8,89,10,89,12,89,1230,9,89,1,90,1,90,1,90,3,90,1235,
8,90,1,91,1,91,1,92,1,92,3,92,1241,8,92,1,93,1,93,1,94,3,94,1246,8,94,1,
94,1,94,1,94,3,94,1251,8,94,1,94,1,94,3,94,1255,8,94,1,94,1,94,1,95,1,95,
1,96,1,96,1,96,1,96,1,96,1,96,1,97,3,97,1268,8,97,1,97,1,97,1,98,1,98,3,
98,1274,8,98,1,98,1,98,3,98,1278,8,98,1,98,1,98,1,98,1,99,3,99,1284,8,99,
1,99,1,99,1,99,3,99,1289,8,99,1,99,1,99,1,99,1,100,1,100,1,100,1,100,1,100,
1,100,1,101,1,101,1,101,1,101,3,101,1304,8,101,1,101,1,101,3,101,1308,8,
101,1,102,4,102,1311,8,102,11,102,12,102,1312,1,103,1,103,1,103,3,103,1318,
8,103,1,103,1,103,1,103,3,103,1323,8,103,1,104,1,104,1,104,1,104,3,104,1329,
8,104,1,104,3,104,1332,8,104,1,104,1,104,1,105,1,105,1,105,5,105,1339,8,
105,10,105,12,105,1342,9,105,1,105,3,105,1345,8,105,1,106,1,106,1,106,3,
106,1350,8,106,1,106,1,106,3,106,1354,8,106,1,107,1,107,1,108,1,108,3,108,
1360,8,108,1,108,1,108,1,109,4,109,1365,8,109,11,109,12,109,1366,1,110,1,
110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,4,
110,1382,8,110,11,110,12,110,1383,3,110,1386,8,110,1,111,1,111,1,111,5,111,
1391,8,111,10,111,12,111,1394,9,111,1,112,1,112,3,112,1398,8,112,1,113,1,
113,1,113,1,113,1,113,3,113,1405,8,113,1,114,1,114,3,114,1409,8,114,5,114,
1411,8,114,10,114,12,114,1414,9,114,1,114,1,114,1,115,1,115,1,115,3,115,
1421,8,115,1,115,1,115,1,115,1,115,3,115,1427,8,115,1,115,1,115,1,115,1,
115,3,115,1433,8,115,1,115,1,115,3,115,1437,8,115,3,115,1439,8,115,5,115,
1441,8,115,10,115,12,115,1444,9,115,1,116,1,116,3,116,1448,8,116,1,116,1,
116,3,116,1452,8,116,1,116,3,116,1455,8,116,1,116,3,116,1458,8,116,1,116,
3,116,1461,8,116,1,117,1,117,1,117,3,117,1466,8,117,1,118,1,118,3,118,1470,
8,118,1,118,3,118,1473,8,118,1,118,1,118,3,118,1477,8,118,1,118,3,118,1480,
8,118,3,118,1482,8,118,1,119,4,119,1485,8,119,11,119,12,119,1486,1,120,1,
120,1,121,1,121,1,122,3,122,1494,8,122,1,122,1,122,1,123,1,123,3,123,1500,
8,123,1,124,1,124,3,124,1504,8,124,1,124,1,124,1,124,1,124,3,124,1510,8,
124,1,125,1,125,4,125,1514,8,125,11,125,12,125,1515,1,125,3,125,1519,8,125,
3,125,1521,8,125,1,126,1,126,1,126,1,126,3,126,1527,8,126,1,126,1,126,3,
126,1531,8,126,1,126,1,126,1,126,1,126,3,126,1537,8,126,1,126,1,126,1,126,
1,126,1,126,3,126,1544,8,126,1,126,1,126,3,126,1548,8,126,3,126,1550,8,126,
5,126,1552,8,126,10,126,12,126,1555,9,126,1,127,5,127,1558,8,127,10,127,
12,127,1561,9,127,1,127,1,127,1,128,1,128,1,128,1,128,1,128,1,128,1,128,
3,128,1572,8,128,1,128,1,128,3,128,1576,8,128,3,128,1578,8,128,5,128,1580,
8,128,10,128,12,128,1583,9,128,1,129,1,129,3,129,1587,8,129,1,129,3,129,
1590,8,129,1,130,1,130,1,130,5,130,1595,8,130,10,130,12,130,1598,9,130,1,
131,3,131,1601,8,131,1,131,1,131,1,131,3,131,1606,8,131,3,131,1608,8,131,
1,131,1,131,3,131,1612,8,131,1,132,3,132,1615,8,132,1,132,3,132,1618,8,132,
1,132,1,132,3,132,1622,8,132,1,132,1,132,1,133,3,133,1627,8,133,1,133,1,
133,1,133,1,133,1,133,3,133,1634,8,133,1,134,1,134,1,134,1,134,1,134,3,134,
1641,8,134,1,135,1,135,1,135,3,135,1646,8,135,1,136,1,136,3,136,1650,8,136,
1,137,1,137,3,137,1654,8,137,1,137,1,137,1,137,3,137,1659,8,137,5,137,1661,
8,137,10,137,12,137,1664,9,137,1,138,1,138,1,138,3,138,1669,8,138,3,138,
1671,8,138,1,138,1,138,1,139,1,139,3,139,1677,8,139,1,140,1,140,1,140,3,
140,1682,8,140,1,140,1,140,1,141,1,141,3,141,1688,8,141,1,141,1,141,3,141,
1692,8,141,3,141,1694,8,141,1,141,3,141,1697,8,141,1,141,1,141,3,141,1701,
8,141,1,141,1,141,3,141,1705,8,141,3,141,1707,8,141,3,141,1709,8,141,1,142,
3,142,1712,8,142,1,142,1,142,1,143,1,143,1,144,1,144,1,145,1,145,1,145,1,
145,4,145,1724,8,145,11,145,12,145,1725,1,146,3,146,1729,8,146,1,146,3,146,
1732,8,146,1,146,3,146,1735,8,146,1,146,1,146,1,146,1,146,1,146,1,146,1,
146,3,146,1744,8,146,1,147,1,147,1,147,5,147,1749,8,147,10,147,12,147,1752,
9,147,1,148,1,148,3,148,1756,8,148,1,148,3,148,1759,8,148,1,148,3,148,1762,
8,148,3,148,1764,8,148,1,148,3,148,1767,8,148,1,148,3,148,1770,8,148,1,148,
1,148,3,148,1774,8,148,1,149,4,149,1777,8,149,11,149,12,149,1778,1,150,1,
150,1,151,1,151,1,151,1,151,1,152,1,152,1,152,1,153,1,153,3,153,1792,8,153,
1,153,1,153,1,153,3,153,1797,8,153,5,153,1799,8,153,10,153,12,153,1802,9,
153,1,154,3,154,1805,8,154,1,154,1,154,1,154,3,154,1810,8,154,1,154,1,154,
1,154,3,154,1815,8,154,1,154,1,154,3,154,1819,8,154,1,155,3,155,1822,8,155,
1,155,1,155,3,155,1826,8,155,1,156,1,156,1,157,1,157,1,158,1,158,1,158,1,
159,1,159,3,159,1837,8,159,1,160,1,160,3,160,1841,8,160,1,161,1,161,1,161,
1,162,1,162,3,162,1848,8,162,1,162,1,162,1,162,3,162,1853,8,162,5,162,1855,
8,162,10,162,12,162,1858,9,162,1,163,1,163,1,163,3,163,1863,8,163,1,163,
1,163,3,163,1867,8,163,1,164,1,164,3,164,1871,8,164,1,165,1,165,1,165,1,
166,1,166,1,166,1,166,3,166,1880,8,166,1,167,1,167,1,167,1,167,1,167,1,167,
1,168,1,168,1,168,5,168,1891,8,168,10,168,12,168,1894,9,168,1,169,1,169,
3,169,1898,8,169,1,170,1,170,1,170,1,170,1,170,3,170,1905,8,170,1,170,1,
170,3,170,1909,8,170,1,170,3,170,1912,8,170,1,170,3,170,1915,8,170,1,170,
3,170,1918,8,170,1,170,1,170,3,170,1922,8,170,1,171,1,171,1,171,3,171,1927,
8,171,1,171,1,171,1,172,1,172,1,172,3,172,1934,8,172,1,172,1,172,3,172,1938,
8,172,1,172,1,172,3,172,1942,8,172,1,173,1,173,1,174,1,174,3,174,1948,8,
174,1,174,1,174,1,174,3,174,1953,8,174,5,174,1955,8,174,10,174,12,174,1958,
9,174,1,175,1,175,1,175,3,175,1963,8,175,1,176,1,176,1,176,1,176,3,176,1969,
8,176,1,176,3,176,1972,8,176,1,177,3,177,1975,8,177,1,177,1,177,1,177,1,
178,1,178,1,178,1,178,1,178,1,179,1,179,1,179,1,179,1,180,1,180,3,180,1991,
8,180,1,180,1,180,1,180,1,181,4,181,1997,8,181,11,181,12,181,1998,1,182,
1,182,1,182,1,182,1,182,1,182,1,183,3,183,2008,8,183,1,183,1,183,1,183,3,
183,2013,8,183,1,183,3,183,2016,8,183,1,184,1,184,3,184,2020,8,184,1,185,
1,185,3,185,2024,8,185,1,186,1,186,1,186,3,186,2029,8,186,1,186,1,186,1,
187,1,187,3,187,2035,8,187,1,187,1,187,1,187,3,187,2040,8,187,5,187,2042,
8,187,10,187,12,187,2045,9,187,1,188,1,188,1,188,1,188,1,188,1,188,3,188,
2053,8,188,1,189,1,189,1,189,3,189,2058,8,189,1,189,1,189,1,189,3,189,2063,
8,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,
1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,
1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,
1,189,1,189,1,189,1,189,1,189,1,189,3,189,2106,8,189,1,190,1,190,1,190,1,
1047,6,10,30,50,230,252,256,191,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,
156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,
192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,
228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,
264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,
300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,
336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,
372,374,376,378,380,0,23,2,0,97,97,101,101,4,0,24,24,31,31,58,58,65,65,2,
0,124,124,129,129,1,0,120,121,2,0,91,93,97,100,2,0,123,123,130,130,1,0,93,
95,1,0,91,92,2,0,102,103,116,117,1,0,114,115,2,0,101,101,104,113,5,0,36,
36,47,47,57,57,63,63,70,70,3,0,34,34,44,44,80,80,2,0,46,46,60,60,2,0,61,
61,78,78,2,0,21,21,66,66,1,0,85,90,2,0,97,97,118,118,2,0,22,22,82,82,1,0,
27,28,2,0,38,38,53,53,1,0,54,56,1,0,1,7,2343,0,383,1,0,0,0,2,399,1,0,0,0,
4,403,1,0,0,0,6,415,1,0,0,0,8,417,1,0,0,0,10,423,1,0,0,0,12,445,1,0,0,0,
14,451,1,0,0,0,16,463,1,0,0,0,18,465,1,0,0,0,20,467,1,0,0,0,22,480,1,0,0,
0,24,487,1,0,0,0,26,490,1,0,0,0,28,495,1,0,0,0,30,542,1,0,0,0,32,574,1,0,
0,0,34,576,1,0,0,0,36,597,1,0,0,0,38,626,1,0,0,0,40,628,1,0,0,0,42,631,1,
0,0,0,44,647,1,0,0,0,46,651,1,0,0,0,48,660,1,0,0,0,50,662,1,0,0,0,52,687,
1,0,0,0,54,690,1,0,0,0,56,699,1,0,0,0,58,710,1,0,0,0,60,712,1,0,0,0,62,720,
1,0,0,0,64,728,1,0,0,0,66,736,1,0,0,0,68,749,1,0,0,0,70,751,1,0,0,0,72,759,
1,0,0,0,74,767,1,0,0,0,76,775,1,0,0,0,78,783,1,0,0,0,80,791,1,0,0,0,82,799,
1,0,0,0,84,807,1,0,0,0,86,821,1,0,0,0,88,823,1,0,0,0,90,825,1,0,0,0,92,833,
1,0,0,0,94,848,1,0,0,0,96,851,1,0,0,0,98,863,1,0,0,0,100,867,1,0,0,0,102,
874,1,0,0,0,104,893,1,0,0,0,106,906,1,0,0,0,108,941,1,0,0,0,110,945,1,0,
0,0,112,948,1,0,0,0,114,955,1,0,0,0,116,966,1,0,0,0,118,970,1,0,0,0,120,
973,1,0,0,0,122,986,1,0,0,0,124,996,1,0,0,0,126,998,1,0,0,0,128,1021,1,0,
0,0,130,1023,1,0,0,0,132,1031,1,0,0,0,134,1033,1,0,0,0,136,1042,1,0,0,0,
138,1045,1,0,0,0,140,1052,1,0,0,0,142,1054,1,0,0,0,144,1056,1,0,0,0,146,
1061,1,0,0,0,148,1067,1,0,0,0,150,1070,1,0,0,0,152,1078,1,0,0,0,154,1085,
1,0,0,0,156,1087,1,0,0,0,158,1141,1,0,0,0,160,1147,1,0,0,0,162,1149,1,0,
0,0,164,1179,1,0,0,0,166,1181,1,0,0,0,168,1183,1,0,0,0,170,1193,1,0,0,0,
172,1206,1,0,0,0,174,1216,1,0,0,0,176,1220,1,0,0,0,178,1223,1,0,0,0,180,
1231,1,0,0,0,182,1236,1,0,0,0,184,1240,1,0,0,0,186,1242,1,0,0,0,188,1245,
1,0,0,0,190,1258,1,0,0,0,192,1260,1,0,0,0,194,1267,1,0,0,0,196,1271,1,0,
0,0,198,1283,1,0,0,0,200,1293,1,0,0,0,202,1299,1,0,0,0,204,1310,1,0,0,0,
206,1322,1,0,0,0,208,1324,1,0,0,0,210,1335,1,0,0,0,212,1349,1,0,0,0,214,
1355,1,0,0,0,216,1357,1,0,0,0,218,1364,1,0,0,0,220,1385,1,0,0,0,222,1387,
1,0,0,0,224,1395,1,0,0,0,226,1404,1,0,0,0,228,1412,1,0,0,0,230,1426,1,0,
0,0,232,1445,1,0,0,0,234,1462,1,0,0,0,236,1481,1,0,0,0,238,1484,1,0,0,0,
240,1488,1,0,0,0,242,1490,1,0,0,0,244,1493,1,0,0,0,246,1497,1,0,0,0,248,
1509,1,0,0,0,250,1520,1,0,0,0,252,1536,1,0,0,0,254,1559,1,0,0,0,256,1564,
1,0,0,0,258,1584,1,0,0,0,260,1591,1,0,0,0,262,1600,1,0,0,0,264,1614,1,0,
0,0,266,1633,1,0,0,0,268,1640,1,0,0,0,270,1645,1,0,0,0,272,1649,1,0,0,0,
274,1651,1,0,0,0,276,1665,1,0,0,0,278,1676,1,0,0,0,280,1678,1,0,0,0,282,
1708,1,0,0,0,284,1711,1,0,0,0,286,1715,1,0,0,0,288,1717,1,0,0,0,290,1723,
1,0,0,0,292,1743,1,0,0,0,294,1745,1,0,0,0,296,1773,1,0,0,0,298,1776,1,0,
0,0,300,1780,1,0,0,0,302,1782,1,0,0,0,304,1786,1,0,0,0,306,1789,1,0,0,0,
308,1804,1,0,0,0,310,1825,1,0,0,0,312,1827,1,0,0,0,314,1829,1,0,0,0,316,
1831,1,0,0,0,318,1834,1,0,0,0,320,1838,1,0,0,0,322,1842,1,0,0,0,324,1845,
1,0,0,0,326,1859,1,0,0,0,328,1870,1,0,0,0,330,1872,1,0,0,0,332,1875,1,0,
0,0,334,1881,1,0,0,0,336,1887,1,0,0,0,338,1897,1,0,0,0,340,1908,1,0,0,0,
342,1923,1,0,0,0,344,1941,1,0,0,0,346,1943,1,0,0,0,348,1945,1,0,0,0,350,
1962,1,0,0,0,352,1964,1,0,0,0,354,1974,1,0,0,0,356,1979,1,0,0,0,358,1984,
1,0,0,0,360,1988,1,0,0,0,362,1996,1,0,0,0,364,2000,1,0,0,0,366,2015,1,0,
0,0,368,2017,1,0,0,0,370,2023,1,0,0,0,372,2025,1,0,0,0,374,2032,1,0,0,0,
376,2052,1,0,0,0,378,2105,1,0,0,0,380,2107,1,0,0,0,382,384,3,120,60,0,383,
382,1,0,0,0,383,384,1,0,0,0,384,385,1,0,0,0,385,386,5,0,0,1,386,1,1,0,0,
0,387,389,3,380,190,0,388,387,1,0,0,0,389,390,1,0,0,0,390,388,1,0,0,0,390,
391,1,0,0,0,391,400,1,0,0,0,392,400,5,69,0,0,393,394,5,85,0,0,394,395,3,
90,45,0,395,396,5,86,0,0,396,400,1,0,0,0,397,400,3,4,2,0,398,400,3,12,6,
0,399,388,1,0,0,0,399,392,1,0,0,0,399,393,1,0,0,0,399,397,1,0,0,0,399,398,
1,0,0,0,400,3,1,0,0,0,401,404,3,6,3,0,402,404,3,8,4,0,403,401,1,0,0,0,403,
402,1,0,0,0,404,5,1,0,0,0,405,416,5,132,0,0,406,416,3,330,165,0,407,416,
3,316,158,0,408,416,3,332,166,0,409,412,5,99,0,0,410,413,3,278,139,0,411,
413,3,162,81,0,412,410,1,0,0,0,412,411,1,0,0,0,413,416,1,0,0,0,414,416,3,
344,172,0,415,405,1,0,0,0,415,406,1,0,0,0,415,407,1,0,0,0,415,408,1,0,0,
0,415,409,1,0,0,0,415,414,1,0,0,0,416,7,1,0,0,0,417,419,3,10,5,0,418,420,
5,68,0,0,419,418,1,0,0,0,419,420,1,0,0,0,420,421,1,0,0,0,421,422,3,6,3,0,
422,9,1,0,0,0,423,427,6,5,-1,0,424,428,3,160,80,0,425,428,3,184,92,0,426,
428,3,162,81,0,427,424,1,0,0,0,427,425,1,0,0,0,427,426,1,0,0,0,427,428,1,
0,0,0,428,429,1,0,0,0,429,430,5,127,0,0,430,442,1,0,0,0,431,437,10,1,0,0,
432,438,5,132,0,0,433,435,5,68,0,0,434,433,1,0,0,0,434,435,1,0,0,0,435,436,
1,0,0,0,436,438,3,342,171,0,437,432,1,0,0,0,437,434,1,0,0,0,438,439,1,0,
0,0,439,441,5,127,0,0,440,431,1,0,0,0,441,444,1,0,0,0,442,440,1,0,0,0,442,
443,1,0,0,0,443,11,1,0,0,0,444,442,1,0,0,0,445,447,3,14,7,0,446,448,3,28,
14,0,447,446,1,0,0,0,447,448,1,0,0,0,448,449,1,0,0,0,449,450,3,100,50,0,
450,13,1,0,0,0,451,453,5,87,0,0,452,454,3,16,8,0,453,452,1,0,0,0,453,454,
1,0,0,0,454,455,1,0,0,0,455,456,5,88,0,0,456,15,1,0,0,0,457,464,3,20,10,
0,458,461,3,18,9,0,459,460,5,122,0,0,460,462,3,20,10,0,461,459,1,0,0,0,461,
462,1,0,0,0,462,464,1,0,0,0,463,457,1,0,0,0,463,458,1,0,0,0,464,17,1,0,0,
0,465,466,7,0,0,0,466,19,1,0,0,0,467,472,3,22,11,0,468,469,5,122,0,0,469,
471,3,22,11,0,470,468,1,0,0,0,471,474,1,0,0,0,472,470,1,0,0,0,472,473,1,
0,0,0,473,476,1,0,0,0,474,472,1,0,0,0,475,477,5,131,0,0,476,475,1,0,0,0,
476,477,1,0,0,0,477,21,1,0,0,0,478,481,3,24,12,0,479,481,3,26,13,0,480,478,
1,0,0,0,480,479,1,0,0,0,481,23,1,0,0,0,482,484,5,97,0,0,483,482,1,0,0,0,
483,484,1,0,0,0,484,485,1,0,0,0,485,488,5,132,0,0,486,488,5,69,0,0,487,483,
1,0,0,0,487,486,1,0,0,0,488,25,1,0,0,0,489,491,5,97,0,0,490,489,1,0,0,0,
490,491,1,0,0,0,491,492,1,0,0,0,492,493,5,132,0,0,493,494,3,268,134,0,494,
27,1,0,0,0,495,497,5,85,0,0,496,498,3,258,129,0,497,496,1,0,0,0,497,498,
1,0,0,0,498,499,1,0,0,0,499,501,5,86,0,0,500,502,5,47,0,0,501,500,1,0,0,
0,501,502,1,0,0,0,502,504,1,0,0,0,503,505,3,370,185,0,504,503,1,0,0,0,504,
505,1,0,0,0,505,507,1,0,0,0,506,508,3,204,102,0,507,506,1,0,0,0,507,508,
1,0,0,0,508,510,1,0,0,0,509,511,3,234,117,0,510,509,1,0,0,0,510,511,1,0,
0,0,511,29,1,0,0,0,512,513,6,15,-1,0,513,543,3,2,1,0,514,517,3,158,79,0,
515,517,3,352,176,0,516,514,1,0,0,0,516,515,1,0,0,0,517,524,1,0,0,0,518,
520,5,85,0,0,519,521,3,34,17,0,520,519,1,0,0,0,520,521,1,0,0,0,521,522,1,
0,0,0,522,525,5,86,0,0,523,525,3,276,138,0,524,518,1,0,0,0,524,523,1,0,0,
0,525,543,1,0,0,0,526,527,7,1,0,0,527,528,5,102,0,0,528,529,3,246,123,0,
529,530,5,103,0,0,530,531,5,85,0,0,531,532,3,90,45,0,532,533,5,86,0,0,533,
543,1,0,0,0,534,535,3,32,16,0,535,538,5,85,0,0,536,539,3,90,45,0,537,539,
3,246,123,0,538,536,1,0,0,0,538,537,1,0,0,0,539,540,1,0,0,0,540,541,5,86,
0,0,541,543,1,0,0,0,542,512,1,0,0,0,542,516,1,0,0,0,542,526,1,0,0,0,542,
534,1,0,0,0,543,571,1,0,0,0,544,545,10,7,0,0,545,548,5,87,0,0,546,549,3,
90,45,0,547,549,3,276,138,0,548,546,1,0,0,0,548,547,1,0,0,0,549,550,1,0,
0,0,550,551,5,88,0,0,551,570,1,0,0,0,552,553,10,6,0,0,553,555,5,85,0,0,554,
556,3,34,17,0,555,554,1,0,0,0,555,556,1,0,0,0,556,557,1,0,0,0,557,570,5,
86,0,0,558,559,10,4,0,0,559,565,7,2,0,0,560,562,5,68,0,0,561,560,1,0,0,0,
561,562,1,0,0,0,562,563,1,0,0,0,563,566,3,4,2,0,564,566,3,36,18,0,565,561,
1,0,0,0,565,564,1,0,0,0,566,570,1,0,0,0,567,568,10,3,0,0,568,570,7,3,0,0,
569,544,1,0,0,0,569,552,1,0,0,0,569,558,1,0,0,0,569,567,1,0,0,0,570,573,
1,0,0,0,571,569,1,0,0,0,571,572,1,0,0,0,572,31,1,0,0,0,573,571,1,0,0,0,574,
575,5,75,0,0,575,33,1,0,0,0,576,577,3,274,137,0,577,35,1,0,0,0,578,580,3,
10,5,0,579,578,1,0,0,0,579,580,1,0,0,0,580,584,1,0,0,0,581,582,3,160,80,
0,582,583,5,127,0,0,583,585,1,0,0,0,584,581,1,0,0,0,584,585,1,0,0,0,585,
586,1,0,0,0,586,587,5,99,0,0,587,598,3,160,80,0,588,589,3,10,5,0,589,590,
5,68,0,0,590,591,3,342,171,0,591,592,5,127,0,0,592,593,5,99,0,0,593,594,
3,160,80,0,594,598,1,0,0,0,595,596,5,99,0,0,596,598,3,162,81,0,597,579,1,
0,0,0,597,588,1,0,0,0,597,595,1,0,0,0,598,37,1,0,0,0,599,627,3,30,15,0,600,
605,5,120,0,0,601,605,5,121,0,0,602,605,3,40,20,0,603,605,5,62,0,0,604,600,
1,0,0,0,604,601,1,0,0,0,604,602,1,0,0,0,604,603,1,0,0,0,605,606,1,0,0,0,
606,627,3,38,19,0,607,616,5,62,0,0,608,609,5,85,0,0,609,610,3,246,123,0,
610,611,5,86,0,0,611,617,1,0,0,0,612,613,5,131,0,0,613,614,5,85,0,0,614,
615,5,132,0,0,615,617,5,86,0,0,616,608,1,0,0,0,616,612,1,0,0,0,617,627,1,
0,0,0,618,619,5,11,0,0,619,620,5,85,0,0,620,621,3,246,123,0,621,622,5,86,
0,0,622,627,1,0,0,0,623,627,3,56,28,0,624,627,3,42,21,0,625,627,3,54,27,
0,626,599,1,0,0,0,626,604,1,0,0,0,626,607,1,0,0,0,626,618,1,0,0,0,626,623,
1,0,0,0,626,624,1,0,0,0,626,625,1,0,0,0,627,39,1,0,0,0,628,629,7,4,0,0,629,
41,1,0,0,0,630,632,5,127,0,0,631,630,1,0,0,0,631,632,1,0,0,0,632,633,1,0,
0,0,633,635,5,49,0,0,634,636,3,44,22,0,635,634,1,0,0,0,635,636,1,0,0,0,636,
642,1,0,0,0,637,643,3,46,23,0,638,639,5,85,0,0,639,640,3,246,123,0,640,641,
5,86,0,0,641,643,1,0,0,0,642,637,1,0,0,0,642,638,1,0,0,0,643,645,1,0,0,0,
644,646,3,52,26,0,645,644,1,0,0,0,645,646,1,0,0,0,646,43,1,0,0,0,647,648,
5,85,0,0,648,649,3,34,17,0,649,650,5,86,0,0,650,45,1,0,0,0,651,653,3,150,
75,0,652,654,3,48,24,0,653,652,1,0,0,0,653,654,1,0,0,0,654,47,1,0,0,0,655,
657,3,236,118,0,656,658,3,48,24,0,657,656,1,0,0,0,657,658,1,0,0,0,658,661,
1,0,0,0,659,661,3,50,25,0,660,655,1,0,0,0,660,659,1,0,0,0,661,49,1,0,0,0,
662,663,6,25,-1,0,663,664,5,87,0,0,664,665,3,90,45,0,665,667,5,88,0,0,666,
668,3,204,102,0,667,666,1,0,0,0,667,668,1,0,0,0,668,678,1,0,0,0,669,670,
10,1,0,0,670,671,5,87,0,0,671,672,3,92,46,0,672,674,5,88,0,0,673,675,3,204,
102,0,674,673,1,0,0,0,674,675,1,0,0,0,675,677,1,0,0,0,676,669,1,0,0,0,677,
680,1,0,0,0,678,676,1,0,0,0,678,679,1,0,0,0,679,51,1,0,0,0,680,678,1,0,0,
0,681,683,5,85,0,0,682,684,3,34,17,0,683,682,1,0,0,0,683,684,1,0,0,0,684,
685,1,0,0,0,685,688,5,86,0,0,686,688,3,276,138,0,687,681,1,0,0,0,687,686,
1,0,0,0,688,53,1,0,0,0,689,691,5,127,0,0,690,689,1,0,0,0,690,691,1,0,0,0,
691,692,1,0,0,0,692,695,5,28,0,0,693,694,5,87,0,0,694,696,5,88,0,0,695,693,
1,0,0,0,695,696,1,0,0,0,696,697,1,0,0,0,697,698,3,58,29,0,698,55,1,0,0,0,
699,700,5,50,0,0,700,701,5,85,0,0,701,702,3,90,45,0,702,703,5,86,0,0,703,
57,1,0,0,0,704,711,3,38,19,0,705,706,5,85,0,0,706,707,3,246,123,0,707,708,
5,86,0,0,708,709,3,58,29,0,709,711,1,0,0,0,710,704,1,0,0,0,710,705,1,0,0,
0,711,59,1,0,0,0,712,717,3,58,29,0,713,714,7,5,0,0,714,716,3,58,29,0,715,
713,1,0,0,0,716,719,1,0,0,0,717,715,1,0,0,0,717,718,1,0,0,0,718,61,1,0,0,
0,719,717,1,0,0,0,720,725,3,60,30,0,721,722,7,6,0,0,722,724,3,60,30,0,723,
721,1,0,0,0,724,727,1,0,0,0,725,723,1,0,0,0,725,726,1,0,0,0,726,63,1,0,0,
0,727,725,1,0,0,0,728,733,3,62,31,0,729,730,7,7,0,0,730,732,3,62,31,0,731,
729,1,0,0,0,732,735,1,0,0,0,733,731,1,0,0,0,733,734,1,0,0,0,734,65,1,0,0,
0,735,733,1,0,0,0,736,742,3,64,32,0,737,738,3,68,34,0,738,739,3,64,32,0,
739,741,1,0,0,0,740,737,1,0,0,0,741,744,1,0,0,0,742,740,1,0,0,0,742,743,
1,0,0,0,743,67,1,0,0,0,744,742,1,0,0,0,745,746,5,103,0,0,746,750,5,103,0,
0,747,748,5,102,0,0,748,750,5,102,0,0,749,745,1,0,0,0,749,747,1,0,0,0,750,
69,1,0,0,0,751,756,3,66,33,0,752,753,7,8,0,0,753,755,3,66,33,0,754,752,1,
0,0,0,755,758,1,0,0,0,756,754,1,0,0,0,756,757,1,0,0,0,757,71,1,0,0,0,758,
756,1,0,0,0,759,764,3,70,35,0,760,761,7,9,0,0,761,763,3,70,35,0,762,760,
1,0,0,0,763,766,1,0,0,0,764,762,1,0,0,0,764,765,1,0,0,0,765,73,1,0,0,0,766,
764,1,0,0,0,767,772,3,72,36,0,768,769,5,97,0,0,769,771,3,72,36,0,770,768,
1,0,0,0,771,774,1,0,0,0,772,770,1,0,0,0,772,773,1,0,0,0,773,75,1,0,0,0,774,
772,1,0,0,0,775,780,3,74,37,0,776,777,5,96,0,0,777,779,3,74,37,0,778,776,
1,0,0,0,779,782,1,0,0,0,780,778,1,0,0,0,780,781,1,0,0,0,781,77,1,0,0,0,782,
780,1,0,0,0,783,788,3,76,38,0,784,785,5,98,0,0,785,787,3,76,38,0,786,784,
1,0,0,0,787,790,1,0,0,0,788,786,1,0,0,0,788,789,1,0,0,0,789,79,1,0,0,0,790,
788,1,0,0,0,791,796,3,78,39,0,792,793,5,118,0,0,793,795,3,78,39,0,794,792,
1,0,0,0,795,798,1,0,0,0,796,794,1,0,0,0,796,797,1,0,0,0,797,81,1,0,0,0,798,
796,1,0,0,0,799,804,3,80,40,0,800,801,5,119,0,0,801,803,3,80,40,0,802,800,
1,0,0,0,803,806,1,0,0,0,804,802,1,0,0,0,804,805,1,0,0,0,805,83,1,0,0,0,806,
804,1,0,0,0,807,813,3,82,41,0,808,809,5,125,0,0,809,810,3,90,45,0,810,811,
5,126,0,0,811,812,3,86,43,0,812,814,1,0,0,0,813,808,1,0,0,0,813,814,1,0,
0,0,814,85,1,0,0,0,815,822,3,84,42,0,816,817,3,82,41,0,817,818,3,88,44,0,
818,819,3,272,136,0,819,822,1,0,0,0,820,822,3,368,184,0,821,815,1,0,0,0,
821,816,1,0,0,0,821,820,1,0,0,0,822,87,1,0,0,0,823,824,7,10,0,0,824,89,1,
0,0,0,825,830,3,86,43,0,826,827,5,122,0,0,827,829,3,86,43,0,828,826,1,0,
0,0,829,832,1,0,0,0,830,828,1,0,0,0,830,831,1,0,0,0,831,91,1,0,0,0,832,830,
1,0,0,0,833,834,3,84,42,0,834,93,1,0,0,0,835,849,3,96,48,0,836,849,3,118,
59,0,837,839,3,204,102,0,838,837,1,0,0,0,838,839,1,0,0,0,839,846,1,0,0,0,
840,847,3,98,49,0,841,847,3,100,50,0,842,847,3,104,52,0,843,847,3,108,54,
0,844,847,3,116,58,0,845,847,3,358,179,0,846,840,1,0,0,0,846,841,1,0,0,0,
846,842,1,0,0,0,846,843,1,0,0,0,846,844,1,0,0,0,846,845,1,0,0,0,847,849,
1,0,0,0,848,835,1,0,0,0,848,836,1,0,0,0,848,838,1,0,0,0,849,95,1,0,0,0,850,
852,3,204,102,0,851,850,1,0,0,0,851,852,1,0,0,0,852,857,1,0,0,0,853,858,
5,132,0,0,854,855,5,16,0,0,855,858,3,92,46,0,856,858,5,27,0,0,857,853,1,
0,0,0,857,854,1,0,0,0,857,856,1,0,0,0,858,859,1,0,0,0,859,860,5,126,0,0,
860,861,3,94,47,0,861,97,1,0,0,0,862,864,3,90,45,0,863,862,1,0,0,0,863,864,
1,0,0,0,864,865,1,0,0,0,865,866,5,128,0,0,866,99,1,0,0,0,867,869,5,89,0,
0,868,870,3,102,51,0,869,868,1,0,0,0,869,870,1,0,0,0,870,871,1,0,0,0,871,
872,5,90,0,0,872,101,1,0,0,0,873,875,3,94,47,0,874,873,1,0,0,0,875,876,1,
0,0,0,876,874,1,0,0,0,876,877,1,0,0,0,877,103,1,0,0,0,878,879,5,43,0,0,879,
880,5,85,0,0,880,881,3,106,53,0,881,882,5,86,0,0,882,885,3,94,47,0,883,884,
5,32,0,0,884,886,3,94,47,0,885,883,1,0,0,0,885,886,1,0,0,0,886,894,1,0,0,
0,887,888,5,67,0,0,888,889,5,85,0,0,889,890,3,106,53,0,890,891,5,86,0,0,
891,892,3,94,47,0,892,894,1,0,0,0,893,878,1,0,0,0,893,887,1,0,0,0,894,105,
1,0,0,0,895,907,3,90,45,0,896,898,3,204,102,0,897,896,1,0,0,0,897,898,1,
0,0,0,898,899,1,0,0,0,899,900,3,138,69,0,900,904,3,226,113,0,901,902,5,101,
0,0,902,905,3,272,136,0,903,905,3,276,138,0,904,901,1,0,0,0,904,903,1,0,
0,0,905,907,1,0,0,0,906,895,1,0,0,0,906,897,1,0,0,0,907,107,1,0,0,0,908,
909,5,84,0,0,909,910,5,85,0,0,910,911,3,106,53,0,911,912,5,86,0,0,912,913,
3,94,47,0,913,942,1,0,0,0,914,915,5,29,0,0,915,916,3,94,47,0,916,917,5,84,
0,0,917,918,5,85,0,0,918,919,3,90,45,0,919,920,5,86,0,0,920,921,5,128,0,
0,921,942,1,0,0,0,922,923,5,40,0,0,923,936,5,85,0,0,924,926,3,110,55,0,925,
927,3,106,53,0,926,925,1,0,0,0,926,927,1,0,0,0,927,928,1,0,0,0,928,930,5,
128,0,0,929,931,3,90,45,0,930,929,1,0,0,0,930,931,1,0,0,0,931,937,1,0,0,
0,932,933,3,112,56,0,933,934,5,126,0,0,934,935,3,114,57,0,935,937,1,0,0,
0,936,924,1,0,0,0,936,932,1,0,0,0,937,938,1,0,0,0,938,939,5,86,0,0,939,940,
3,94,47,0,940,942,1,0,0,0,941,908,1,0,0,0,941,914,1,0,0,0,941,922,1,0,0,
0,942,109,1,0,0,0,943,946,3,98,49,0,944,946,3,128,64,0,945,943,1,0,0,0,945,
944,1,0,0,0,946,111,1,0,0,0,947,949,3,204,102,0,948,947,1,0,0,0,948,949,
1,0,0,0,949,950,1,0,0,0,950,951,3,138,69,0,951,952,3,226,113,0,952,113,1,
0,0,0,953,956,3,90,45,0,954,956,3,276,138,0,955,953,1,0,0,0,955,954,1,0,
0,0,956,115,1,0,0,0,957,967,5,15,0,0,958,967,5,25,0,0,959,962,5,59,0,0,960,
963,3,90,45,0,961,963,3,276,138,0,962,960,1,0,0,0,962,961,1,0,0,0,962,963,
1,0,0,0,963,967,1,0,0,0,964,965,5,42,0,0,965,967,5,132,0,0,966,957,1,0,0,
0,966,958,1,0,0,0,966,959,1,0,0,0,966,964,1,0,0,0,967,968,1,0,0,0,968,969,
5,128,0,0,969,117,1,0,0,0,970,971,3,124,62,0,971,119,1,0,0,0,972,974,3,122,
61,0,973,972,1,0,0,0,974,975,1,0,0,0,975,973,1,0,0,0,975,976,1,0,0,0,976,
121,1,0,0,0,977,987,3,124,62,0,978,987,3,264,132,0,979,987,3,334,167,0,980,
987,3,354,177,0,981,987,3,356,178,0,982,987,3,202,101,0,983,987,3,188,94,
0,984,987,3,132,66,0,985,987,3,134,67,0,986,977,1,0,0,0,986,978,1,0,0,0,
986,979,1,0,0,0,986,980,1,0,0,0,986,981,1,0,0,0,986,982,1,0,0,0,986,983,
1,0,0,0,986,984,1,0,0,0,986,985,1,0,0,0,987,123,1,0,0,0,988,997,3,128,64,
0,989,997,3,200,100,0,990,997,3,192,96,0,991,997,3,196,98,0,992,997,3,198,
99,0,993,997,3,130,65,0,994,997,3,126,63,0,995,997,3,172,86,0,996,988,1,
0,0,0,996,989,1,0,0,0,996,990,1,0,0,0,996,991,1,0,0,0,996,992,1,0,0,0,996,
993,1,0,0,0,996,994,1,0,0,0,996,995,1,0,0,0,997,125,1,0,0,0,998,999,5,79,
0,0,999,1001,5,132,0,0,1000,1002,3,204,102,0,1001,1000,1,0,0,0,1001,1002,
1,0,0,0,1002,1003,1,0,0,0,1003,1004,5,101,0,0,1004,1005,3,246,123,0,1005,
1006,5,128,0,0,1006,127,1,0,0,0,1007,1009,3,138,69,0,1008,1007,1,0,0,0,1008,
1009,1,0,0,0,1009,1011,1,0,0,0,1010,1012,3,222,111,0,1011,1010,1,0,0,0,1011,
1012,1,0,0,0,1012,1013,1,0,0,0,1013,1022,5,128,0,0,1014,1016,3,204,102,0,
1015,1017,3,138,69,0,1016,1015,1,0,0,0,1016,1017,1,0,0,0,1017,1018,1,0,0,
0,1018,1019,3,222,111,0,1019,1020,5,128,0,0,1020,1022,1,0,0,0,1021,1008,
1,0,0,0,1021,1014,1,0,0,0,1022,129,1,0,0,0,1023,1024,5,64,0,0,1024,1025,
5,85,0,0,1025,1026,3,92,46,0,1026,1027,5,122,0,0,1027,1028,5,4,0,0,1028,
1029,5,86,0,0,1029,1030,5,128,0,0,1030,131,1,0,0,0,1031,1032,5,128,0,0,1032,
133,1,0,0,0,1033,1034,3,204,102,0,1034,1035,5,128,0,0,1035,135,1,0,0,0,1036,
1043,3,140,70,0,1037,1043,3,146,73,0,1038,1043,3,142,71,0,1039,1043,5,41,
0,0,1040,1043,5,74,0,0,1041,1043,5,23,0,0,1042,1036,1,0,0,0,1042,1037,1,
0,0,0,1042,1038,1,0,0,0,1042,1039,1,0,0,0,1042,1040,1,0,0,0,1042,1041,1,
0,0,0,1043,137,1,0,0,0,1044,1046,3,136,68,0,1045,1044,1,0,0,0,1046,1047,
1,0,0,0,1047,1048,1,0,0,0,1047,1045,1,0,0,0,1048,1050,1,0,0,0,1049,1051,
3,204,102,0,1050,1049,1,0,0,0,1050,1051,1,0,0,0,1051,139,1,0,0,0,1052,1053,
7,11,0,0,1053,141,1,0,0,0,1054,1055,7,12,0,0,1055,143,1,0,0,0,1056,1057,
5,132,0,0,1057,145,1,0,0,0,1058,1062,3,148,74,0,1059,1062,3,280,140,0,1060,
1062,3,168,84,0,1061,1058,1,0,0,0,1061,1059,1,0,0,0,1061,1060,1,0,0,0,1062,
147,1,0,0,0,1063,1068,3,158,79,0,1064,1068,3,164,82,0,1065,1068,3,352,176,
0,1066,1068,3,240,120,0,1067,1063,1,0,0,0,1067,1064,1,0,0,0,1067,1065,1,
0,0,0,1067,1066,1,0,0,0,1068,149,1,0,0,0,1069,1071,3,146,73,0,1070,1069,
1,0,0,0,1071,1072,1,0,0,0,1072,1070,1,0,0,0,1072,1073,1,0,0,0,1073,1075,
1,0,0,0,1074,1076,3,204,102,0,1075,1074,1,0,0,0,1075,1076,1,0,0,0,1076,151,
1,0,0,0,1077,1079,3,148,74,0,1078,1077,1,0,0,0,1079,1080,1,0,0,0,1080,1078,
1,0,0,0,1080,1081,1,0,0,0,1081,1083,1,0,0,0,1082,1084,3,204,102,0,1083,1082,
1,0,0,0,1083,1084,1,0,0,0,1084,153,1,0,0,0,1085,1086,7,13,0,0,1086,155,1,
0,0,0,1087,1088,7,14,0,0,1088,157,1,0,0,0,1089,1091,3,10,5,0,1090,1089,1,
0,0,0,1090,1091,1,0,0,0,1091,1092,1,0,0,0,1092,1142,3,160,80,0,1093,1094,
3,10,5,0,1094,1095,5,68,0,0,1095,1096,3,342,171,0,1096,1142,1,0,0,0,1097,
1142,3,156,78,0,1098,1100,3,156,78,0,1099,1098,1,0,0,0,1099,1100,1,0,0,0,
1100,1102,1,0,0,0,1101,1103,3,154,77,0,1102,1101,1,0,0,0,1103,1104,1,0,0,
0,1104,1102,1,0,0,0,1104,1105,1,0,0,0,1105,1142,1,0,0,0,1106,1108,3,156,
78,0,1107,1106,1,0,0,0,1107,1108,1,0,0,0,1108,1109,1,0,0,0,1109,1142,5,18,
0,0,1110,1112,3,156,78,0,1111,1110,1,0,0,0,1111,1112,1,0,0,0,1112,1113,1,
0,0,0,1113,1142,5,19,0,0,1114,1116,3,156,78,0,1115,1114,1,0,0,0,1115,1116,
1,0,0,0,1116,1117,1,0,0,0,1117,1142,5,20,0,0,1118,1120,3,156,78,0,1119,1118,
1,0,0,0,1119,1120,1,0,0,0,1120,1121,1,0,0,0,1121,1142,5,83,0,0,1122,1142,
5,14,0,0,1123,1125,3,156,78,0,1124,1123,1,0,0,0,1124,1125,1,0,0,0,1125,1129,
1,0,0,0,1126,1128,3,154,77,0,1127,1126,1,0,0,0,1128,1131,1,0,0,0,1129,1127,
1,0,0,0,1129,1130,1,0,0,0,1130,1132,1,0,0,0,1131,1129,1,0,0,0,1132,1142,
5,45,0,0,1133,1142,5,39,0,0,1134,1136,3,154,77,0,1135,1134,1,0,0,0,1135,
1136,1,0,0,0,1136,1137,1,0,0,0,1137,1142,5,30,0,0,1138,1142,5,81,0,0,1139,
1142,5,13,0,0,1140,1142,3,162,81,0,1141,1090,1,0,0,0,1141,1093,1,0,0,0,1141,
1097,1,0,0,0,1141,1099,1,0,0,0,1141,1107,1,0,0,0,1141,1111,1,0,0,0,1141,
1115,1,0,0,0,1141,1119,1,0,0,0,1141,1122,1,0,0,0,1141,1124,1,0,0,0,1141,
1133,1,0,0,0,1141,1135,1,0,0,0,1141,1138,1,0,0,0,1141,1139,1,0,0,0,1141,
1140,1,0,0,0,1142,159,1,0,0,0,1143,1148,3,278,139,0,1144,1148,3,166,83,0,
1145,1148,3,144,72,0,1146,1148,3,342,171,0,1147,1143,1,0,0,0,1147,1144,1,
0,0,0,1147,1145,1,0,0,0,1147,1146,1,0,0,0,1148,161,1,0,0,0,1149,1150,5,26,
0,0,1150,1153,5,85,0,0,1151,1154,3,90,45,0,1152,1154,5,13,0,0,1153,1151,
1,0,0,0,1153,1152,1,0,0,0,1154,1155,1,0,0,0,1155,1156,5,86,0,0,1156,163,
1,0,0,0,1157,1172,3,288,144,0,1158,1160,3,204,102,0,1159,1158,1,0,0,0,1159,
1160,1,0,0,0,1160,1162,1,0,0,0,1161,1163,3,10,5,0,1162,1161,1,0,0,0,1162,
1163,1,0,0,0,1163,1164,1,0,0,0,1164,1173,5,132,0,0,1165,1173,3,342,171,0,
1166,1168,3,10,5,0,1167,1169,5,68,0,0,1168,1167,1,0,0,0,1168,1169,1,0,0,
0,1169,1170,1,0,0,0,1170,1171,3,342,171,0,1171,1173,1,0,0,0,1172,1159,1,
0,0,0,1172,1165,1,0,0,0,1172,1166,1,0,0,0,1173,1180,1,0,0,0,1174,1176,5,
33,0,0,1175,1177,3,10,5,0,1176,1175,1,0,0,0,1176,1177,1,0,0,0,1177,1178,
1,0,0,0,1178,1180,5,132,0,0,1179,1157,1,0,0,0,1179,1174,1,0,0,0,1180,165,
1,0,0,0,1181,1182,5,132,0,0,1182,167,1,0,0,0,1183,1184,3,170,85,0,1184,1189,
5,89,0,0,1185,1187,3,178,89,0,1186,1188,5,122,0,0,1187,1186,1,0,0,0,1187,
1188,1,0,0,0,1188,1190,1,0,0,0,1189,1185,1,0,0,0,1189,1190,1,0,0,0,1190,
1191,1,0,0,0,1191,1192,5,90,0,0,1192,169,1,0,0,0,1193,1195,3,174,87,0,1194,
1196,3,204,102,0,1195,1194,1,0,0,0,1195,1196,1,0,0,0,1196,1201,1,0,0,0,1197,
1199,3,10,5,0,1198,1197,1,0,0,0,1198,1199,1,0,0,0,1199,1200,1,0,0,0,1200,
1202,5,132,0,0,1201,1198,1,0,0,0,1201,1202,1,0,0,0,1202,1204,1,0,0,0,1203,
1205,3,176,88,0,1204,1203,1,0,0,0,1204,1205,1,0,0,0,1205,171,1,0,0,0,1206,
1208,3,174,87,0,1207,1209,3,204,102,0,1208,1207,1,0,0,0,1208,1209,1,0,0,
0,1209,1210,1,0,0,0,1210,1212,5,132,0,0,1211,1213,3,176,88,0,1212,1211,1,
0,0,0,1212,1213,1,0,0,0,1213,1214,1,0,0,0,1214,1215,5,128,0,0,1215,173,1,
0,0,0,1216,1218,5,33,0,0,1217,1219,7,15,0,0,1218,1217,1,0,0,0,1218,1219,
1,0,0,0,1219,175,1,0,0,0,1220,1221,5,126,0,0,1221,1222,3,150,75,0,1222,177,
1,0,0,0,1223,1228,3,180,90,0,1224,1225,5,122,0,0,1225,1227,3,180,90,0,1226,
1224,1,0,0,0,1227,1230,1,0,0,0,1228,1226,1,0,0,0,1228,1229,1,0,0,0,1229,
179,1,0,0,0,1230,1228,1,0,0,0,1231,1234,3,182,91,0,1232,1233,5,101,0,0,1233,
1235,3,92,46,0,1234,1232,1,0,0,0,1234,1235,1,0,0,0,1235,181,1,0,0,0,1236,
1237,5,132,0,0,1237,183,1,0,0,0,1238,1241,3,186,93,0,1239,1241,3,190,95,
0,1240,1238,1,0,0,0,1240,1239,1,0,0,0,1241,185,1,0,0,0,1242,1243,5,132,0,
0,1243,187,1,0,0,0,1244,1246,5,44,0,0,1245,1244,1,0,0,0,1245,1246,1,0,0,
0,1246,1247,1,0,0,0,1247,1250,5,48,0,0,1248,1251,5,132,0,0,1249,1251,3,186,
93,0,1250,1248,1,0,0,0,1250,1249,1,0,0,0,1250,1251,1,0,0,0,1251,1252,1,0,
0,0,1252,1254,5,89,0,0,1253,1255,3,120,60,0,1254,1253,1,0,0,0,1254,1255,
1,0,0,0,1255,1256,1,0,0,0,1256,1257,5,90,0,0,1257,189,1,0,0,0,1258,1259,
5,132,0,0,1259,191,1,0,0,0,1260,1261,5,48,0,0,1261,1262,5,132,0,0,1262,1263,
5,101,0,0,1263,1264,3,194,97,0,1264,1265,5,128,0,0,1265,193,1,0,0,0,1266,
1268,3,10,5,0,1267,1266,1,0,0,0,1267,1268,1,0,0,0,1268,1269,1,0,0,0,1269,
1270,3,184,92,0,1270,195,1,0,0,0,1271,1277,5,79,0,0,1272,1274,5,76,0,0,1273,
1272,1,0,0,0,1273,1274,1,0,0,0,1274,1275,1,0,0,0,1275,1278,3,10,5,0,1276,
1278,5,127,0,0,1277,1273,1,0,0,0,1277,1276,1,0,0,0,1278,1279,1,0,0,0,1279,
1280,3,6,3,0,1280,1281,5,128,0,0,1281,197,1,0,0,0,1282,1284,3,204,102,0,
1283,1282,1,0,0,0,1283,1284,1,0,0,0,1284,1285,1,0,0,0,1285,1286,5,79,0,0,
1286,1288,5,48,0,0,1287,1289,3,10,5,0,1288,1287,1,0,0,0,1288,1289,1,0,0,
0,1289,1290,1,0,0,0,1290,1291,3,184,92,0,1291,1292,5,128,0,0,1292,199,1,
0,0,0,1293,1294,5,12,0,0,1294,1295,5,85,0,0,1295,1296,5,4,0,0,1296,1297,
5,86,0,0,1297,1298,5,128,0,0,1298,201,1,0,0,0,1299,1300,5,36,0,0,1300,1307,
5,4,0,0,1301,1303,5,89,0,0,1302,1304,3,120,60,0,1303,1302,1,0,0,0,1303,1304,
1,0,0,0,1304,1305,1,0,0,0,1305,1308,5,90,0,0,1306,1308,3,122,61,0,1307,1301,
1,0,0,0,1307,1306,1,0,0,0,1308,203,1,0,0,0,1309,1311,3,206,103,0,1310,1309,
1,0,0,0,1311,1312,1,0,0,0,1312,1310,1,0,0,0,1312,1313,1,0,0,0,1313,205,1,
0,0,0,1314,1315,5,87,0,0,1315,1317,5,87,0,0,1316,1318,3,210,105,0,1317,1316,
1,0,0,0,1317,1318,1,0,0,0,1318,1319,1,0,0,0,1319,1320,5,88,0,0,1320,1323,
5,88,0,0,1321,1323,3,208,104,0,1322,1314,1,0,0,0,1322,1321,1,0,0,0,1323,
207,1,0,0,0,1324,1325,5,10,0,0,1325,1328,5,85,0,0,1326,1329,3,246,123,0,
1327,1329,3,92,46,0,1328,1326,1,0,0,0,1328,1327,1,0,0,0,1329,1331,1,0,0,
0,1330,1332,5,131,0,0,1331,1330,1,0,0,0,1331,1332,1,0,0,0,1332,1333,1,0,
0,0,1333,1334,5,86,0,0,1334,209,1,0,0,0,1335,1340,3,212,106,0,1336,1337,
5,122,0,0,1337,1339,3,212,106,0,1338,1336,1,0,0,0,1339,1342,1,0,0,0,1340,
1338,1,0,0,0,1340,1341,1,0,0,0,1341,1344,1,0,0,0,1342,1340,1,0,0,0,1343,
1345,5,131,0,0,1344,1343,1,0,0,0,1344,1345,1,0,0,0,1345,211,1,0,0,0,1346,
1347,3,214,107,0,1347,1348,5,127,0,0,1348,1350,1,0,0,0,1349,1346,1,0,0,0,
1349,1350,1,0,0,0,1350,1351,1,0,0,0,1351,1353,5,132,0,0,1352,1354,3,216,
108,0,1353,1352,1,0,0,0,1353,1354,1,0,0,0,1354,213,1,0,0,0,1355,1356,5,132,
0,0,1356,215,1,0,0,0,1357,1359,5,85,0,0,1358,1360,3,218,109,0,1359,1358,
1,0,0,0,1359,1360,1,0,0,0,1360,1361,1,0,0,0,1361,1362,5,86,0,0,1362,217,
1,0,0,0,1363,1365,3,220,110,0,1364,1363,1,0,0,0,1365,1366,1,0,0,0,1366,1364,
1,0,0,0,1366,1367,1,0,0,0,1367,219,1,0,0,0,1368,1369,5,85,0,0,1369,1370,
3,218,109,0,1370,1371,5,86,0,0,1371,1386,1,0,0,0,1372,1373,5,87,0,0,1373,
1374,3,218,109,0,1374,1375,5,88,0,0,1375,1386,1,0,0,0,1376,1377,5,89,0,0,
1377,1378,3,218,109,0,1378,1379,5,90,0,0,1379,1386,1,0,0,0,1380,1382,8,16,
0,0,1381,1380,1,0,0,0,1382,1383,1,0,0,0,1383,1381,1,0,0,0,1383,1384,1,0,
0,0,1384,1386,1,0,0,0,1385,1368,1,0,0,0,1385,1372,1,0,0,0,1385,1376,1,0,
0,0,1385,1381,1,0,0,0,1386,221,1,0,0,0,1387,1392,3,224,112,0,1388,1389,5,
122,0,0,1389,1391,3,224,112,0,1390,1388,1,0,0,0,1391,1394,1,0,0,0,1392,1390,
1,0,0,0,1392,1393,1,0,0,0,1393,223,1,0,0,0,1394,1392,1,0,0,0,1395,1397,3,
226,113,0,1396,1398,3,268,134,0,1397,1396,1,0,0,0,1397,1398,1,0,0,0,1398,
225,1,0,0,0,1399,1405,3,228,114,0,1400,1401,3,230,115,0,1401,1402,3,232,
116,0,1402,1403,3,234,117,0,1403,1405,1,0,0,0,1404,1399,1,0,0,0,1404,1400,
1,0,0,0,1405,227,1,0,0,0,1406,1408,3,236,118,0,1407,1409,5,22,0,0,1408,1407,
1,0,0,0,1408,1409,1,0,0,0,1409,1411,1,0,0,0,1410,1406,1,0,0,0,1411,1414,
1,0,0,0,1412,1410,1,0,0,0,1412,1413,1,0,0,0,1413,1415,1,0,0,0,1414,1412,
1,0,0,0,1415,1416,3,230,115,0,1416,229,1,0,0,0,1417,1418,6,115,-1,0,1418,
1420,3,244,122,0,1419,1421,3,204,102,0,1420,1419,1,0,0,0,1420,1421,1,0,0,
0,1421,1427,1,0,0,0,1422,1423,5,85,0,0,1423,1424,3,228,114,0,1424,1425,5,
86,0,0,1425,1427,1,0,0,0,1426,1417,1,0,0,0,1426,1422,1,0,0,0,1427,1442,1,
0,0,0,1428,1438,10,2,0,0,1429,1439,3,232,116,0,1430,1432,5,87,0,0,1431,1433,
3,92,46,0,1432,1431,1,0,0,0,1432,1433,1,0,0,0,1433,1434,1,0,0,0,1434,1436,
5,88,0,0,1435,1437,3,204,102,0,1436,1435,1,0,0,0,1436,1437,1,0,0,0,1437,
1439,1,0,0,0,1438,1429,1,0,0,0,1438,1430,1,0,0,0,1439,1441,1,0,0,0,1440,
1428,1,0,0,0,1441,1444,1,0,0,0,1442,1440,1,0,0,0,1442,1443,1,0,0,0,1443,
231,1,0,0,0,1444,1442,1,0,0,0,1445,1447,5,85,0,0,1446,1448,3,258,129,0,1447,
1446,1,0,0,0,1447,1448,1,0,0,0,1448,1449,1,0,0,0,1449,1451,5,86,0,0,1450,
1452,3,238,119,0,1451,1450,1,0,0,0,1451,1452,1,0,0,0,1452,1454,1,0,0,0,1453,
1455,3,242,121,0,1454,1453,1,0,0,0,1454,1455,1,0,0,0,1455,1457,1,0,0,0,1456,
1458,3,370,185,0,1457,1456,1,0,0,0,1457,1458,1,0,0,0,1458,1460,1,0,0,0,1459,
1461,3,204,102,0,1460,1459,1,0,0,0,1460,1461,1,0,0,0,1461,233,1,0,0,0,1462,
1463,5,124,0,0,1463,1465,3,152,76,0,1464,1466,3,248,124,0,1465,1464,1,0,
0,0,1465,1466,1,0,0,0,1466,235,1,0,0,0,1467,1469,7,17,0,0,1468,1470,3,204,
102,0,1469,1468,1,0,0,0,1469,1470,1,0,0,0,1470,1482,1,0,0,0,1471,1473,3,
10,5,0,1472,1471,1,0,0,0,1472,1473,1,0,0,0,1473,1474,1,0,0,0,1474,1476,5,
93,0,0,1475,1477,3,204,102,0,1476,1475,1,0,0,0,1476,1477,1,0,0,0,1477,1479,
1,0,0,0,1478,1480,3,238,119,0,1479,1478,1,0,0,0,1479,1480,1,0,0,0,1480,1482,
1,0,0,0,1481,1467,1,0,0,0,1481,1472,1,0,0,0,1482,237,1,0,0,0,1483,1485,3,
240,120,0,1484,1483,1,0,0,0,1485,1486,1,0,0,0,1486,1484,1,0,0,0,1486,1487,
1,0,0,0,1487,239,1,0,0,0,1488,1489,7,18,0,0,1489,241,1,0,0,0,1490,1491,7,
17,0,0,1491,243,1,0,0,0,1492,1494,5,131,0,0,1493,1492,1,0,0,0,1493,1494,
1,0,0,0,1494,1495,1,0,0,0,1495,1496,3,4,2,0,1496,245,1,0,0,0,1497,1499,3,
150,75,0,1498,1500,3,248,124,0,1499,1498,1,0,0,0,1499,1500,1,0,0,0,1500,
247,1,0,0,0,1501,1510,3,250,125,0,1502,1504,3,252,126,0,1503,1502,1,0,0,
0,1503,1504,1,0,0,0,1504,1505,1,0,0,0,1505,1506,3,232,116,0,1506,1507,3,
234,117,0,1507,1510,1,0,0,0,1508,1510,3,254,127,0,1509,1501,1,0,0,0,1509,
1503,1,0,0,0,1509,1508,1,0,0,0,1510,249,1,0,0,0,1511,1521,3,252,126,0,1512,
1514,3,236,118,0,1513,1512,1,0,0,0,1514,1515,1,0,0,0,1515,1513,1,0,0,0,1515,
1516,1,0,0,0,1516,1518,1,0,0,0,1517,1519,3,252,126,0,1518,1517,1,0,0,0,1518,
1519,1,0,0,0,1519,1521,1,0,0,0,1520,1511,1,0,0,0,1520,1513,1,0,0,0,1521,
251,1,0,0,0,1522,1523,6,126,-1,0,1523,1537,3,232,116,0,1524,1526,5,87,0,
0,1525,1527,3,92,46,0,1526,1525,1,0,0,0,1526,1527,1,0,0,0,1527,1528,1,0,
0,0,1528,1530,5,88,0,0,1529,1531,3,204,102,0,1530,1529,1,0,0,0,1530,1531,
1,0,0,0,1531,1537,1,0,0,0,1532,1533,5,85,0,0,1533,1534,3,250,125,0,1534,
1535,5,86,0,0,1535,1537,1,0,0,0,1536,1522,1,0,0,0,1536,1524,1,0,0,0,1536,
1532,1,0,0,0,1537,1553,1,0,0,0,1538,1549,10,4,0,0,1539,1550,3,232,116,0,
1540,1541,3,252,126,0,1541,1543,5,87,0,0,1542,1544,3,92,46,0,1543,1542,1,
0,0,0,1543,1544,1,0,0,0,1544,1545,1,0,0,0,1545,1547,5,88,0,0,1546,1548,3,
204,102,0,1547,1546,1,0,0,0,1547,1548,1,0,0,0,1548,1550,1,0,0,0,1549,1539,
1,0,0,0,1549,1540,1,0,0,0,1550,1552,1,0,0,0,1551,1538,1,0,0,0,1552,1555,
1,0,0,0,1553,1551,1,0,0,0,1553,1554,1,0,0,0,1554,253,1,0,0,0,1555,1553,1,
0,0,0,1556,1558,3,236,118,0,1557,1556,1,0,0,0,1558,1561,1,0,0,0,1559,1557,
1,0,0,0,1559,1560,1,0,0,0,1560,1562,1,0,0,0,1561,1559,1,0,0,0,1562,1563,
3,256,128,0,1563,255,1,0,0,0,1564,1565,6,128,-1,0,1565,1566,5,131,0,0,1566,
1581,1,0,0,0,1567,1577,10,2,0,0,1568,1578,3,232,116,0,1569,1571,5,87,0,0,
1570,1572,3,92,46,0,1571,1570,1,0,0,0,1571,1572,1,0,0,0,1572,1573,1,0,0,
0,1573,1575,5,88,0,0,1574,1576,3,204,102,0,1575,1574,1,0,0,0,1575,1576,1,
0,0,0,1576,1578,1,0,0,0,1577,1568,1,0,0,0,1577,1569,1,0,0,0,1578,1580,1,
0,0,0,1579,1567,1,0,0,0,1580,1583,1,0,0,0,1581,1579,1,0,0,0,1581,1582,1,
0,0,0,1582,257,1,0,0,0,1583,1581,1,0,0,0,1584,1589,3,260,130,0,1585,1587,
5,122,0,0,1586,1585,1,0,0,0,1586,1587,1,0,0,0,1587,1588,1,0,0,0,1588,1590,
5,131,0,0,1589,1586,1,0,0,0,1589,1590,1,0,0,0,1590,259,1,0,0,0,1591,1596,
3,262,131,0,1592,1593,5,122,0,0,1593,1595,3,262,131,0,1594,1592,1,0,0,0,
1595,1598,1,0,0,0,1596,1594,1,0,0,0,1596,1597,1,0,0,0,1597,261,1,0,0,0,1598,
1596,1,0,0,0,1599,1601,3,204,102,0,1600,1599,1,0,0,0,1600,1601,1,0,0,0,1601,
1602,1,0,0,0,1602,1607,3,138,69,0,1603,1608,3,226,113,0,1604,1606,3,248,
124,0,1605,1604,1,0,0,0,1605,1606,1,0,0,0,1606,1608,1,0,0,0,1607,1603,1,
0,0,0,1607,1605,1,0,0,0,1608,1611,1,0,0,0,1609,1610,5,101,0,0,1610,1612,
3,272,136,0,1611,1609,1,0,0,0,1611,1612,1,0,0,0,1612,263,1,0,0,0,1613,1615,
3,204,102,0,1614,1613,1,0,0,0,1614,1615,1,0,0,0,1615,1617,1,0,0,0,1616,1618,
3,138,69,0,1617,1616,1,0,0,0,1617,1618,1,0,0,0,1618,1619,1,0,0,0,1619,1621,
3,226,113,0,1620,1622,3,298,149,0,1621,1620,1,0,0,0,1621,1622,1,0,0,0,1622,
1623,1,0,0,0,1623,1624,3,266,133,0,1624,265,1,0,0,0,1625,1627,3,322,161,
0,1626,1625,1,0,0,0,1626,1627,1,0,0,0,1627,1628,1,0,0,0,1628,1634,3,100,
50,0,1629,1634,3,360,180,0,1630,1631,5,101,0,0,1631,1632,7,19,0,0,1632,1634,
5,128,0,0,1633,1626,1,0,0,0,1633,1629,1,0,0,0,1633,1630,1,0,0,0,1634,267,
1,0,0,0,1635,1641,3,270,135,0,1636,1637,5,85,0,0,1637,1638,3,34,17,0,1638,
1639,5,86,0,0,1639,1641,1,0,0,0,1640,1635,1,0,0,0,1640,1636,1,0,0,0,1641,
269,1,0,0,0,1642,1643,5,101,0,0,1643,1646,3,272,136,0,1644,1646,3,276,138,
0,1645,1642,1,0,0,0,1645,1644,1,0,0,0,1646,271,1,0,0,0,1647,1650,3,86,43,
0,1648,1650,3,276,138,0,1649,1647,1,0,0,0,1649,1648,1,0,0,0,1650,273,1,0,
0,0,1651,1653,3,272,136,0,1652,1654,5,131,0,0,1653,1652,1,0,0,0,1653,1654,
1,0,0,0,1654,1662,1,0,0,0,1655,1656,5,122,0,0,1656,1658,3,272,136,0,1657,
1659,5,131,0,0,1658,1657,1,0,0,0,1658,1659,1,0,0,0,1659,1661,1,0,0,0,1660,
1655,1,0,0,0,1661,1664,1,0,0,0,1662,1660,1,0,0,0,1662,1663,1,0,0,0,1663,
275,1,0,0,0,1664,1662,1,0,0,0,1665,1670,5,89,0,0,1666,1668,3,274,137,0,1667,
1669,5,122,0,0,1668,1667,1,0,0,0,1668,1669,1,0,0,0,1669,1671,1,0,0,0,1670,
1666,1,0,0,0,1670,1671,1,0,0,0,1671,1672,1,0,0,0,1672,1673,5,90,0,0,1673,
277,1,0,0,0,1674,1677,5,132,0,0,1675,1677,3,342,171,0,1676,1674,1,0,0,0,
1676,1675,1,0,0,0,1677,279,1,0,0,0,1678,1679,3,282,141,0,1679,1681,5,89,
0,0,1680,1682,3,290,145,0,1681,1680,1,0,0,0,1681,1682,1,0,0,0,1682,1683,
1,0,0,0,1683,1684,5,90,0,0,1684,281,1,0,0,0,1685,1687,3,288,144,0,1686,1688,
3,204,102,0,1687,1686,1,0,0,0,1687,1688,1,0,0,0,1688,1693,1,0,0,0,1689,1691,
3,284,142,0,1690,1692,3,286,143,0,1691,1690,1,0,0,0,1691,1692,1,0,0,0,1692,
1694,1,0,0,0,1693,1689,1,0,0,0,1693,1694,1,0,0,0,1694,1696,1,0,0,0,1695,
1697,3,304,152,0,1696,1695,1,0,0,0,1696,1697,1,0,0,0,1697,1709,1,0,0,0,1698,
1700,5,77,0,0,1699,1701,3,204,102,0,1700,1699,1,0,0,0,1700,1701,1,0,0,0,
1701,1706,1,0,0,0,1702,1704,3,284,142,0,1703,1705,3,286,143,0,1704,1703,
1,0,0,0,1704,1705,1,0,0,0,1705,1707,1,0,0,0,1706,1702,1,0,0,0,1706,1707,
1,0,0,0,1707,1709,1,0,0,0,1708,1685,1,0,0,0,1708,1698,1,0,0,0,1709,283,1,
0,0,0,1710,1712,3,10,5,0,1711,1710,1,0,0,0,1711,1712,1,0,0,0,1712,1713,1,
0,0,0,1713,1714,3,278,139,0,1714,285,1,0,0,0,1715,1716,5,38,0,0,1716,287,
1,0,0,0,1717,1718,7,15,0,0,1718,289,1,0,0,0,1719,1724,3,292,146,0,1720,1721,
3,314,157,0,1721,1722,5,126,0,0,1722,1724,1,0,0,0,1723,1719,1,0,0,0,1723,
1720,1,0,0,0,1724,1725,1,0,0,0,1725,1723,1,0,0,0,1725,1726,1,0,0,0,1726,
291,1,0,0,0,1727,1729,3,204,102,0,1728,1727,1,0,0,0,1728,1729,1,0,0,0,1729,
1731,1,0,0,0,1730,1732,3,138,69,0,1731,1730,1,0,0,0,1731,1732,1,0,0,0,1732,
1734,1,0,0,0,1733,1735,3,294,147,0,1734,1733,1,0,0,0,1734,1735,1,0,0,0,1735,
1736,1,0,0,0,1736,1744,5,128,0,0,1737,1744,3,264,132,0,1738,1744,3,196,98,
0,1739,1744,3,130,65,0,1740,1744,3,334,167,0,1741,1744,3,126,63,0,1742,1744,
3,132,66,0,1743,1728,1,0,0,0,1743,1737,1,0,0,0,1743,1738,1,0,0,0,1743,1739,
1,0,0,0,1743,1740,1,0,0,0,1743,1741,1,0,0,0,1743,1742,1,0,0,0,1744,293,1,
0,0,0,1745,1750,3,296,148,0,1746,1747,5,122,0,0,1747,1749,3,296,148,0,1748,
1746,1,0,0,0,1749,1752,1,0,0,0,1750,1748,1,0,0,0,1750,1751,1,0,0,0,1751,
295,1,0,0,0,1752,1750,1,0,0,0,1753,1763,3,226,113,0,1754,1756,3,298,149,
0,1755,1754,1,0,0,0,1755,1756,1,0,0,0,1756,1758,1,0,0,0,1757,1759,3,302,
151,0,1758,1757,1,0,0,0,1758,1759,1,0,0,0,1759,1764,1,0,0,0,1760,1762,3,
270,135,0,1761,1760,1,0,0,0,1761,1762,1,0,0,0,1762,1764,1,0,0,0,1763,1755,
1,0,0,0,1763,1761,1,0,0,0,1764,1774,1,0,0,0,1765,1767,5,132,0,0,1766,1765,
1,0,0,0,1766,1767,1,0,0,0,1767,1769,1,0,0,0,1768,1770,3,204,102,0,1769,1768,
1,0,0,0,1769,1770,1,0,0,0,1770,1771,1,0,0,0,1771,1772,5,126,0,0,1772,1774,
3,92,46,0,1773,1753,1,0,0,0,1773,1766,1,0,0,0,1774,297,1,0,0,0,1775,1777,
3,300,150,0,1776,1775,1,0,0,0,1777,1778,1,0,0,0,1778,1776,1,0,0,0,1778,1779,
1,0,0,0,1779,299,1,0,0,0,1780,1781,7,20,0,0,1781,301,1,0,0,0,1782,1783,5,
101,0,0,1783,1784,5,134,0,0,1784,1785,6,151,-1,0,1785,303,1,0,0,0,1786,1787,
5,126,0,0,1787,1788,3,306,153,0,1788,305,1,0,0,0,1789,1791,3,308,154,0,1790,
1792,5,131,0,0,1791,1790,1,0,0,0,1791,1792,1,0,0,0,1792,1800,1,0,0,0,1793,
1794,5,122,0,0,1794,1796,3,308,154,0,1795,1797,5,131,0,0,1796,1795,1,0,0,
0,1796,1797,1,0,0,0,1797,1799,1,0,0,0,1798,1793,1,0,0,0,1799,1802,1,0,0,
0,1800,1798,1,0,0,0,1800,1801,1,0,0,0,1801,307,1,0,0,0,1802,1800,1,0,0,0,
1803,1805,3,204,102,0,1804,1803,1,0,0,0,1804,1805,1,0,0,0,1805,1818,1,0,
0,0,1806,1819,3,312,156,0,1807,1809,5,80,0,0,1808,1810,3,314,157,0,1809,
1808,1,0,0,0,1809,1810,1,0,0,0,1810,1811,1,0,0,0,1811,1819,3,312,156,0,1812,
1814,3,314,157,0,1813,1815,5,80,0,0,1814,1813,1,0,0,0,1814,1815,1,0,0,0,
1815,1816,1,0,0,0,1816,1817,3,312,156,0,1817,1819,1,0,0,0,1818,1806,1,0,
0,0,1818,1807,1,0,0,0,1818,1812,1,0,0,0,1819,309,1,0,0,0,1820,1822,3,10,
5,0,1821,1820,1,0,0,0,1821,1822,1,0,0,0,1822,1823,1,0,0,0,1823,1826,3,278,
139,0,1824,1826,3,162,81,0,1825,1821,1,0,0,0,1825,1824,1,0,0,0,1826,311,
1,0,0,0,1827,1828,3,310,155,0,1828,313,1,0,0,0,1829,1830,7,21,0,0,1830,315,
1,0,0,0,1831,1832,5,52,0,0,1832,1833,3,318,159,0,1833,317,1,0,0,0,1834,1836,
3,150,75,0,1835,1837,3,320,160,0,1836,1835,1,0,0,0,1836,1837,1,0,0,0,1837,
319,1,0,0,0,1838,1840,3,236,118,0,1839,1841,3,320,160,0,1840,1839,1,0,0,
0,1840,1841,1,0,0,0,1841,321,1,0,0,0,1842,1843,5,126,0,0,1843,1844,3,324,
162,0,1844,323,1,0,0,0,1845,1847,3,326,163,0,1846,1848,5,131,0,0,1847,1846,
1,0,0,0,1847,1848,1,0,0,0,1848,1856,1,0,0,0,1849,1850,5,122,0,0,1850,1852,
3,326,163,0,1851,1853,5,131,0,0,1852,1851,1,0,0,0,1852,1853,1,0,0,0,1853,
1855,1,0,0,0,1854,1849,1,0,0,0,1855,1858,1,0,0,0,1856,1854,1,0,0,0,1856,
1857,1,0,0,0,1857,325,1,0,0,0,1858,1856,1,0,0,0,1859,1866,3,328,164,0,1860,
1862,5,85,0,0,1861,1863,3,34,17,0,1862,1861,1,0,0,0,1862,1863,1,0,0,0,1863,
1864,1,0,0,0,1864,1867,5,86,0,0,1865,1867,3,276,138,0,1866,1860,1,0,0,0,
1866,1865,1,0,0,0,1867,327,1,0,0,0,1868,1871,3,310,155,0,1869,1871,5,132,
0,0,1870,1868,1,0,0,0,1870,1869,1,0,0,0,1871,329,1,0,0,0,1872,1873,5,52,
0,0,1873,1874,3,378,189,0,1874,331,1,0,0,0,1875,1879,5,52,0,0,1876,1877,
5,4,0,0,1877,1880,5,132,0,0,1878,1880,5,140,0,0,1879,1876,1,0,0,0,1879,1878,
1,0,0,0,1880,333,1,0,0,0,1881,1882,5,68,0,0,1882,1883,5,102,0,0,1883,1884,
3,336,168,0,1884,1885,5,103,0,0,1885,1886,3,122,61,0,1886,335,1,0,0,0,1887,
1892,3,338,169,0,1888,1889,5,122,0,0,1889,1891,3,338,169,0,1890,1888,1,0,
0,0,1891,1894,1,0,0,0,1892,1890,1,0,0,0,1892,1893,1,0,0,0,1893,337,1,0,0,
0,1894,1892,1,0,0,0,1895,1898,3,340,170,0,1896,1898,3,262,131,0,1897,1895,
1,0,0,0,1897,1896,1,0,0,0,1898,339,1,0,0,0,1899,1900,5,68,0,0,1900,1901,
5,102,0,0,1901,1902,3,336,168,0,1902,1903,5,103,0,0,1903,1905,1,0,0,0,1904,
1899,1,0,0,0,1904,1905,1,0,0,0,1905,1906,1,0,0,0,1906,1909,5,21,0,0,1907,
1909,5,76,0,0,1908,1904,1,0,0,0,1908,1907,1,0,0,0,1909,1921,1,0,0,0,1910,
1912,5,131,0,0,1911,1910,1,0,0,0,1911,1912,1,0,0,0,1912,1914,1,0,0,0,1913,
1915,5,132,0,0,1914,1913,1,0,0,0,1914,1915,1,0,0,0,1915,1922,1,0,0,0,1916,
1918,5,132,0,0,1917,1916,1,0,0,0,1917,1918,1,0,0,0,1918,1919,1,0,0,0,1919,
1920,5,101,0,0,1920,1922,3,246,123,0,1921,1911,1,0,0,0,1921,1917,1,0,0,0,
1922,341,1,0,0,0,1923,1924,3,346,173,0,1924,1926,5,102,0,0,1925,1927,3,348,
174,0,1926,1925,1,0,0,0,1926,1927,1,0,0,0,1927,1928,1,0,0,0,1928,1929,5,
103,0,0,1929,343,1,0,0,0,1930,1942,3,342,171,0,1931,1934,3,330,165,0,1932,
1934,3,332,166,0,1933,1931,1,0,0,0,1933,1932,1,0,0,0,1934,1935,1,0,0,0,1935,
1937,5,102,0,0,1936,1938,3,348,174,0,1937,1936,1,0,0,0,1937,1938,1,0,0,0,
1938,1939,1,0,0,0,1939,1940,5,103,0,0,1940,1942,1,0,0,0,1941,1930,1,0,0,
0,1941,1933,1,0,0,0,1942,345,1,0,0,0,1943,1944,5,132,0,0,1944,347,1,0,0,
0,1945,1947,3,350,175,0,1946,1948,5,131,0,0,1947,1946,1,0,0,0,1947,1948,
1,0,0,0,1948,1956,1,0,0,0,1949,1950,5,122,0,0,1950,1952,3,350,175,0,1951,
1953,5,131,0,0,1952,1951,1,0,0,0,1952,1953,1,0,0,0,1953,1955,1,0,0,0,1954,
1949,1,0,0,0,1955,1958,1,0,0,0,1956,1954,1,0,0,0,1956,1957,1,0,0,0,1957,
349,1,0,0,0,1958,1956,1,0,0,0,1959,1963,3,246,123,0,1960,1963,3,92,46,0,
1961,1963,3,4,2,0,1962,1959,1,0,0,0,1962,1960,1,0,0,0,1962,1961,1,0,0,0,
1963,351,1,0,0,0,1964,1965,5,76,0,0,1965,1971,3,10,5,0,1966,1972,5,132,0,
0,1967,1969,5,68,0,0,1968,1967,1,0,0,0,1968,1969,1,0,0,0,1969,1970,1,0,0,
0,1970,1972,3,342,171,0,1971,1966,1,0,0,0,1971,1968,1,0,0,0,1972,353,1,0,
0,0,1973,1975,5,36,0,0,1974,1973,1,0,0,0,1974,1975,1,0,0,0,1975,1976,1,0,
0,0,1976,1977,5,68,0,0,1977,1978,3,122,61,0,1978,355,1,0,0,0,1979,1980,5,
68,0,0,1980,1981,5,102,0,0,1981,1982,5,103,0,0,1982,1983,3,122,61,0,1983,
357,1,0,0,0,1984,1985,5,73,0,0,1985,1986,3,100,50,0,1986,1987,3,362,181,
0,1987,359,1,0,0,0,1988,1990,5,73,0,0,1989,1991,3,322,161,0,1990,1989,1,
0,0,0,1990,1991,1,0,0,0,1991,1992,1,0,0,0,1992,1993,3,100,50,0,1993,1994,
3,362,181,0,1994,361,1,0,0,0,1995,1997,3,364,182,0,1996,1995,1,0,0,0,1997,
1998,1,0,0,0,1998,1996,1,0,0,0,1998,1999,1,0,0,0,1999,363,1,0,0,0,2000,2001,
5,17,0,0,2001,2002,5,85,0,0,2002,2003,3,366,183,0,2003,2004,5,86,0,0,2004,
2005,3,100,50,0,2005,365,1,0,0,0,2006,2008,3,204,102,0,2007,2006,1,0,0,0,
2007,2008,1,0,0,0,2008,2009,1,0,0,0,2009,2012,3,150,75,0,2010,2013,3,226,
113,0,2011,2013,3,248,124,0,2012,2010,1,0,0,0,2012,2011,1,0,0,0,2012,2013,
1,0,0,0,2013,2016,1,0,0,0,2014,2016,5,131,0,0,2015,2007,1,0,0,0,2015,2014,
1,0,0,0,2016,367,1,0,0,0,2017,2019,5,71,0,0,2018,2020,3,86,43,0,2019,2018,
1,0,0,0,2019,2020,1,0,0,0,2020,369,1,0,0,0,2021,2024,3,372,186,0,2022,2024,
3,376,188,0,2023,2021,1,0,0,0,2023,2022,1,0,0,0,2024,371,1,0,0,0,2025,2026,
5,71,0,0,2026,2028,5,85,0,0,2027,2029,3,374,187,0,2028,2027,1,0,0,0,2028,
2029,1,0,0,0,2029,2030,1,0,0,0,2030,2031,5,86,0,0,2031,373,1,0,0,0,2032,
2034,3,246,123,0,2033,2035,5,131,0,0,2034,2033,1,0,0,0,2034,2035,1,0,0,0,
2035,2043,1,0,0,0,2036,2037,5,122,0,0,2037,2039,3,246,123,0,2038,2040,5,
131,0,0,2039,2038,1,0,0,0,2039,2040,1,0,0,0,2040,2042,1,0,0,0,2041,2036,
1,0,0,0,2042,2045,1,0,0,0,2043,2041,1,0,0,0,2043,2044,1,0,0,0,2044,375,1,
0,0,0,2045,2043,1,0,0,0,2046,2047,5,50,0,0,2047,2048,5,85,0,0,2048,2049,
3,92,46,0,2049,2050,5,86,0,0,2050,2053,1,0,0,0,2051,2053,5,50,0,0,2052,2046,
1,0,0,0,2052,2051,1,0,0,0,2053,377,1,0,0,0,2054,2057,5,49,0,0,2055,2056,
5,87,0,0,2056,2058,5,88,0,0,2057,2055,1,0,0,0,2057,2058,1,0,0,0,2058,2106,
1,0,0,0,2059,2062,5,28,0,0,2060,2061,5,87,0,0,2061,2063,5,88,0,0,2062,2060,
1,0,0,0,2062,2063,1,0,0,0,2063,2106,1,0,0,0,2064,2106,5,91,0,0,2065,2106,
5,92,0,0,2066,2106,5,93,0,0,2067,2106,5,94,0,0,2068,2106,5,95,0,0,2069,2106,
5,96,0,0,2070,2106,5,97,0,0,2071,2106,5,98,0,0,2072,2106,5,99,0,0,2073,2106,
5,100,0,0,2074,2106,5,101,0,0,2075,2106,5,103,0,0,2076,2106,5,102,0,0,2077,
2106,5,117,0,0,2078,2106,5,104,0,0,2079,2106,5,105,0,0,2080,2106,5,106,0,
0,2081,2106,5,108,0,0,2082,2106,5,109,0,0,2083,2106,5,110,0,0,2084,2106,
5,111,0,0,2085,2086,5,102,0,0,2086,2106,5,102,0,0,2087,2088,5,103,0,0,2088,
2106,5,103,0,0,2089,2106,5,113,0,0,2090,2106,5,112,0,0,2091,2106,5,114,0,
0,2092,2106,5,115,0,0,2093,2106,5,116,0,0,2094,2106,5,118,0,0,2095,2106,
5,119,0,0,2096,2106,5,120,0,0,2097,2106,5,121,0,0,2098,2106,5,122,0,0,2099,
2106,5,123,0,0,2100,2106,5,124,0,0,2101,2102,5,85,0,0,2102,2106,5,86,0,0,
2103,2104,5,87,0,0,2104,2106,5,88,0,0,2105,2054,1,0,0,0,2105,2059,1,0,0,
0,2105,2064,1,0,0,0,2105,2065,1,0,0,0,2105,2066,1,0,0,0,2105,2067,1,0,0,
0,2105,2068,1,0,0,0,2105,2069,1,0,0,0,2105,2070,1,0,0,0,2105,2071,1,0,0,
0,2105,2072,1,0,0,0,2105,2073,1,0,0,0,2105,2074,1,0,0,0,2105,2075,1,0,0,
0,2105,2076,1,0,0,0,2105,2077,1,0,0,0,2105,2078,1,0,0,0,2105,2079,1,0,0,
0,2105,2080,1,0,0,0,2105,2081,1,0,0,0,2105,2082,1,0,0,0,2105,2083,1,0,0,
0,2105,2084,1,0,0,0,2105,2085,1,0,0,0,2105,2087,1,0,0,0,2105,2089,1,0,0,
0,2105,2090,1,0,0,0,2105,2091,1,0,0,0,2105,2092,1,0,0,0,2105,2093,1,0,0,
0,2105,2094,1,0,0,0,2105,2095,1,0,0,0,2105,2096,1,0,0,0,2105,2097,1,0,0,
0,2105,2098,1,0,0,0,2105,2099,1,0,0,0,2105,2100,1,0,0,0,2105,2101,1,0,0,
0,2105,2103,1,0,0,0,2106,379,1,0,0,0,2107,2108,7,22,0,0,2108,381,1,0,0,0,
306,383,390,399,403,412,415,419,427,434,437,442,447,453,461,463,472,476,
480,483,487,490,497,501,504,507,510,516,520,524,538,542,548,555,561,565,
569,571,579,584,597,604,616,626,631,635,642,645,653,657,660,667,674,678,
683,687,690,695,710,717,725,733,742,749,756,764,772,780,788,796,804,813,
821,830,838,846,848,851,857,863,869,876,885,893,897,904,906,926,930,936,
941,945,948,955,962,966,975,986,996,1001,1008,1011,1016,1021,1042,1047,1050,
1061,1067,1072,1075,1080,1083,1090,1099,1104,1107,1111,1115,1119,1124,1129,
1135,1141,1147,1153,1159,1162,1168,1172,1176,1179,1187,1189,1195,1198,1201,
1204,1208,1212,1218,1228,1234,1240,1245,1250,1254,1267,1273,1277,1283,1288,
1303,1307,1312,1317,1322,1328,1331,1340,1344,1349,1353,1359,1366,1383,1385,
1392,1397,1404,1408,1412,1420,1426,1432,1436,1438,1442,1447,1451,1454,1457,
1460,1465,1469,1472,1476,1479,1481,1486,1493,1499,1503,1509,1515,1518,1520,
1526,1530,1536,1543,1547,1549,1553,1559,1571,1575,1577,1581,1586,1589,1596,
1600,1605,1607,1611,1614,1617,1621,1626,1633,1640,1645,1649,1653,1658,1662,
1668,1670,1676,1681,1687,1691,1693,1696,1700,1704,1706,1708,1711,1723,1725,
1728,1731,1734,1743,1750,1755,1758,1761,1763,1766,1769,1773,1778,1791,1796,
1800,1804,1809,1814,1818,1821,1825,1836,1840,1847,1852,1856,1862,1866,1870,
1879,1892,1897,1904,1908,1911,1914,1917,1921,1926,1933,1937,1941,1947,1952,
1956,1962,1968,1971,1974,1990,1998,2007,2012,2015,2019,2023,2028,2034,2039,
2043,2052,2057,2062,2105];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class CPP14Parser extends antlr4.Parser {

    static grammarFileName = "CPP14Parser.g4";
    static literalNames = [ null, null, null, null, null, null, null, null, 
                            null, null, "'alignas'", "'alignof'", "'asm'", 
                            "'auto'", "'bool'", "'break'", "'case'", "'catch'", 
                            "'char'", "'char16_t'", "'char32_t'", "'class'", 
                            "'const'", "'constexpr'", "'const_cast'", "'continue'", 
                            "'decltype'", "'default'", "'delete'", "'do'", 
                            "'double'", "'dynamic_cast'", "'else'", "'enum'", 
                            "'explicit'", "'export'", "'extern'", "'false'", 
                            "'final'", "'float'", "'for'", "'friend'", "'goto'", 
                            "'if'", "'inline'", "'int'", "'long'", "'mutable'", 
                            "'namespace'", "'new'", "'noexcept'", "'nullptr'", 
                            "'operator'", "'override'", "'private'", "'protected'", 
                            "'public'", "'register'", "'reinterpret_cast'", 
                            "'return'", "'short'", "'signed'", "'sizeof'", 
                            "'static'", "'static_assert'", "'static_cast'", 
                            "'struct'", "'switch'", "'template'", "'this'", 
                            "'thread_local'", "'throw'", "'true'", "'try'", 
                            "'typedef'", "'typeid'", "'typename'", "'union'", 
                            "'unsigned'", "'using'", "'virtual'", "'void'", 
                            "'volatile'", "'wchar_t'", "'while'", "'('", 
                            "')'", "'['", "']'", "'{'", "'}'", "'+'", "'-'", 
                            "'*'", "'/'", "'%'", "'^'", "'&'", "'|'", "'~'", 
                            null, "'='", "'<'", "'>'", "'+='", "'-='", "'*='", 
                            "'/='", "'%='", "'^='", "'&='", "'|='", "'<<='", 
                            "'>>='", "'=='", "'!='", "'<='", "'>='", null, 
                            null, "'++'", "'--'", "','", "'->*'", "'->'", 
                            "'?'", "':'", "'::'", "';'", "'.'", "'.*'", 
                            "'...'" ];
    static symbolicNames = [ null, "IntegerLiteral", "CharacterLiteral", 
                             "FloatingLiteral", "StringLiteral", "BooleanLiteral", 
                             "PointerLiteral", "UserDefinedLiteral", "MultiLineMacro", 
                             "Directive", "Alignas", "Alignof", "Asm", "Auto", 
                             "Bool", "Break", "Case", "Catch", "Char", "Char16", 
                             "Char32", "Class", "Const", "Constexpr", "Const_cast", 
                             "Continue", "Decltype", "Default", "Delete", 
                             "Do", "Double", "Dynamic_cast", "Else", "Enum", 
                             "Explicit", "Export", "Extern", "False_", "Final", 
                             "Float", "For", "Friend", "Goto", "If", "Inline", 
                             "Int", "Long", "Mutable", "Namespace", "New", 
                             "Noexcept", "Nullptr", "Operator", "Override", 
                             "Private", "Protected", "Public", "Register", 
                             "Reinterpret_cast", "Return", "Short", "Signed", 
                             "Sizeof", "Static", "Static_assert", "Static_cast", 
                             "Struct", "Switch", "Template", "This", "Thread_local", 
                             "Throw", "True_", "Try", "Typedef", "Typeid_", 
                             "Typename_", "Union", "Unsigned", "Using", 
                             "Virtual", "Void", "Volatile", "Wchar", "While", 
                             "LeftParen", "RightParen", "LeftBracket", "RightBracket", 
                             "LeftBrace", "RightBrace", "Plus", "Minus", 
                             "Star", "Div", "Mod", "Caret", "And", "Or", 
                             "Tilde", "Not", "Assign", "Less", "Greater", 
                             "PlusAssign", "MinusAssign", "StarAssign", 
                             "DivAssign", "ModAssign", "XorAssign", "AndAssign", 
                             "OrAssign", "LeftShiftAssign", "RightShiftAssign", 
                             "Equal", "NotEqual", "LessEqual", "GreaterEqual", 
                             "AndAnd", "OrOr", "PlusPlus", "MinusMinus", 
                             "Comma", "ArrowStar", "Arrow", "Question", 
                             "Colon", "Doublecolon", "Semi", "Dot", "DotStar", 
                             "Ellipsis", "Identifier", "DecimalLiteral", 
                             "OctalLiteral", "HexadecimalLiteral", "BinaryLiteral", 
                             "Integersuffix", "UserDefinedIntegerLiteral", 
                             "UserDefinedFloatingLiteral", "UserDefinedStringLiteral", 
                             "UserDefinedCharacterLiteral", "Whitespace", 
                             "Newline", "BlockComment", "LineComment" ];
    static ruleNames = [ "translationUnit", "primaryExpression", "idExpression", 
                         "unqualifiedId", "qualifiedId", "nestedNameSpecifier", 
                         "lambdaExpression", "lambdaIntroducer", "lambdaCapture", 
                         "captureDefault", "captureList", "capture", "simpleCapture", 
                         "initcapture", "lambdaDeclarator", "postfixExpression", 
                         "typeIdOfTheTypeId", "expressionList", "pseudoDestructorName", 
                         "unaryExpression", "unaryOperator", "newExpression", 
                         "newPlacement", "newTypeId", "newDeclarator", "noPointerNewDeclarator", 
                         "newInitializer", "deleteExpression", "noExceptExpression", 
                         "castExpression", "pointerMemberExpression", "multiplicativeExpression", 
                         "additiveExpression", "shiftExpression", "shiftOperator", 
                         "relationalExpression", "equalityExpression", "andExpression", 
                         "exclusiveOrExpression", "inclusiveOrExpression", 
                         "logicalAndExpression", "logicalOrExpression", 
                         "conditionalExpression", "assignmentExpression", 
                         "assignmentOperator", "expression", "constantExpression", 
                         "statement", "labeledStatement", "expressionStatement", 
                         "compoundStatement", "statementSeq", "selectionStatement", 
                         "condition", "iterationStatement", "forInitStatement", 
                         "forRangeDeclaration", "forRangeInitializer", "jumpStatement", 
                         "declarationStatement", "declarationseq", "declaration", 
                         "blockDeclaration", "aliasDeclaration", "simpleDeclaration", 
                         "staticAssertDeclaration", "emptyDeclaration", 
                         "attributeDeclaration", "declSpecifier", "declSpecifierSeq", 
                         "storageClassSpecifier", "functionSpecifier", "typedefName", 
                         "typeSpecifier", "trailingTypeSpecifier", "typeSpecifierSeq", 
                         "trailingTypeSpecifierSeq", "simpleTypeLengthModifier", 
                         "simpleTypeSignednessModifier", "simpleTypeSpecifier", 
                         "theTypeName", "decltypeSpecifier", "elaboratedTypeSpecifier", 
                         "enumName", "enumSpecifier", "enumHead", "opaqueEnumDeclaration", 
                         "enumkey", "enumbase", "enumeratorList", "enumeratorDefinition", 
                         "enumerator", "namespaceName", "originalNamespaceName", 
                         "namespaceDefinition", "namespaceAlias", "namespaceAliasDefinition", 
                         "qualifiednamespacespecifier", "usingDeclaration", 
                         "usingDirective", "asmDefinition", "linkageSpecification", 
                         "attributeSpecifierSeq", "attributeSpecifier", 
                         "alignmentspecifier", "attributeList", "attribute", 
                         "attributeNamespace", "attributeArgumentClause", 
                         "balancedTokenSeq", "balancedtoken", "initDeclaratorList", 
                         "initDeclarator", "declarator", "pointerDeclarator", 
                         "noPointerDeclarator", "parametersAndQualifiers", 
                         "trailingReturnType", "pointerOperator", "cvqualifierseq", 
                         "cvQualifier", "refqualifier", "declaratorid", 
                         "theTypeId", "abstractDeclarator", "pointerAbstractDeclarator", 
                         "noPointerAbstractDeclarator", "abstractPackDeclarator", 
                         "noPointerAbstractPackDeclarator", "parameterDeclarationClause", 
                         "parameterDeclarationList", "parameterDeclaration", 
                         "functionDefinition", "functionBody", "initializer", 
                         "braceOrEqualInitializer", "initializerClause", 
                         "initializerList", "bracedInitList", "className", 
                         "classSpecifier", "classHead", "classHeadName", 
                         "classVirtSpecifier", "classKey", "memberSpecification", 
                         "memberdeclaration", "memberDeclaratorList", "memberDeclarator", 
                         "virtualSpecifierSeq", "virtualSpecifier", "pureSpecifier", 
                         "baseClause", "baseSpecifierList", "baseSpecifier", 
                         "classOrDeclType", "baseTypeSpecifier", "accessSpecifier", 
                         "conversionFunctionId", "conversionTypeId", "conversionDeclarator", 
                         "constructorInitializer", "memInitializerList", 
                         "memInitializer", "meminitializerid", "operatorFunctionId", 
                         "literalOperatorId", "templateDeclaration", "templateparameterList", 
                         "templateParameter", "typeParameter", "simpleTemplateId", 
                         "templateId", "templateName", "templateArgumentList", 
                         "templateArgument", "typeNameSpecifier", "explicitInstantiation", 
                         "explicitSpecialization", "tryBlock", "functionTryBlock", 
                         "handlerSeq", "handler", "exceptionDeclaration", 
                         "throwExpression", "exceptionSpecification", "dynamicExceptionSpecification", 
                         "typeIdList", "noeExceptSpecification", "theOperator", 
                         "literal" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = CPP14Parser.ruleNames;
        this.literalNames = CPP14Parser.literalNames;
        this.symbolicNames = CPP14Parser.symbolicNames;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 5:
    	    		return this.nestedNameSpecifier_sempred(localctx, predIndex);
    	case 15:
    	    		return this.postfixExpression_sempred(localctx, predIndex);
    	case 25:
    	    		return this.noPointerNewDeclarator_sempred(localctx, predIndex);
    	case 115:
    	    		return this.noPointerDeclarator_sempred(localctx, predIndex);
    	case 126:
    	    		return this.noPointerAbstractDeclarator_sempred(localctx, predIndex);
    	case 128:
    	    		return this.noPointerAbstractPackDeclarator_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    nestedNameSpecifier_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    postfixExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 7);
    		case 2:
    			return this.precpred(this._ctx, 6);
    		case 3:
    			return this.precpred(this._ctx, 4);
    		case 4:
    			return this.precpred(this._ctx, 3);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    noPointerNewDeclarator_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 5:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    noPointerDeclarator_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 6:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    noPointerAbstractDeclarator_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 7:
    			return this.precpred(this._ctx, 4);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    noPointerAbstractPackDeclarator_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 8:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	translationUnit() {
	    let localctx = new TranslationUnitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, CPP14Parser.RULE_translationUnit);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 383;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 10)) & ~0x1f) === 0 && ((1 << (_la - 10)) & 2777759517) !== 0) || ((((_la - 44)) & ~0x1f) === 0 && ((1 << (_la - 44)) & 1163600159) !== 0) || ((((_la - 76)) & ~0x1f) === 0 && ((1 << (_la - 76)) & 10619647) !== 0) || ((((_la - 118)) & ~0x1f) === 0 && ((1 << (_la - 118)) & 26113) !== 0)) {
	            this.state = 382;
	            this.declarationseq();
	        }

	        this.state = 385;
	        this.match(CPP14Parser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryExpression() {
	    let localctx = new PrimaryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, CPP14Parser.RULE_primaryExpression);
	    try {
	        this.state = 399;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 2:
	        case 3:
	        case 4:
	        case 5:
	        case 6:
	        case 7:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 388; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 387;
	            		this.literal();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 390; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,1, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;
	        case 69:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 392;
	            this.match(CPP14Parser.This);
	            break;
	        case 85:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 393;
	            this.match(CPP14Parser.LeftParen);
	            this.state = 394;
	            this.expression();
	            this.state = 395;
	            this.match(CPP14Parser.RightParen);
	            break;
	        case 26:
	        case 52:
	        case 99:
	        case 127:
	        case 132:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 397;
	            this.idExpression();
	            break;
	        case 87:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 398;
	            this.lambdaExpression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	idExpression() {
	    let localctx = new IdExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, CPP14Parser.RULE_idExpression);
	    try {
	        this.state = 403;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 401;
	            this.unqualifiedId();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 402;
	            this.qualifiedId();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unqualifiedId() {
	    let localctx = new UnqualifiedIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, CPP14Parser.RULE_unqualifiedId);
	    try {
	        this.state = 415;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 405;
	            this.match(CPP14Parser.Identifier);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 406;
	            this.operatorFunctionId();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 407;
	            this.conversionFunctionId();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 408;
	            this.literalOperatorId();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 409;
	            this.match(CPP14Parser.Tilde);
	            this.state = 412;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 132:
	                this.state = 410;
	                this.className();
	                break;
	            case 26:
	                this.state = 411;
	                this.decltypeSpecifier();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 414;
	            this.templateId();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedId() {
	    let localctx = new QualifiedIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, CPP14Parser.RULE_qualifiedId);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 417;
	        this.nestedNameSpecifier(0);
	        this.state = 419;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===68) {
	            this.state = 418;
	            this.match(CPP14Parser.Template);
	        }

	        this.state = 421;
	        this.unqualifiedId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	nestedNameSpecifier(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new NestedNameSpecifierContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 10;
	    this.enterRecursionRule(localctx, 10, CPP14Parser.RULE_nestedNameSpecifier, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 427;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	        if(la_===1) {
	            this.state = 424;
	            this.theTypeName();

	        } else if(la_===2) {
	            this.state = 425;
	            this.namespaceName();

	        } else if(la_===3) {
	            this.state = 426;
	            this.decltypeSpecifier();

	        }
	        this.state = 429;
	        this.match(CPP14Parser.Doublecolon);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 442;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,10,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new NestedNameSpecifierContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_nestedNameSpecifier);
	                this.state = 431;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 437;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 432;
	                    this.match(CPP14Parser.Identifier);
	                    break;

	                case 2:
	                    this.state = 434;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===68) {
	                        this.state = 433;
	                        this.match(CPP14Parser.Template);
	                    }

	                    this.state = 436;
	                    this.simpleTemplateId();
	                    break;

	                }
	                this.state = 439;
	                this.match(CPP14Parser.Doublecolon); 
	            }
	            this.state = 444;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,10,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	lambdaExpression() {
	    let localctx = new LambdaExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, CPP14Parser.RULE_lambdaExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 445;
	        this.lambdaIntroducer();
	        this.state = 447;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===85) {
	            this.state = 446;
	            this.lambdaDeclarator();
	        }

	        this.state = 449;
	        this.compoundStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaIntroducer() {
	    let localctx = new LambdaIntroducerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, CPP14Parser.RULE_lambdaIntroducer);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 451;
	        this.match(CPP14Parser.LeftBracket);
	        this.state = 453;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===69 || _la===97 || _la===101 || _la===132) {
	            this.state = 452;
	            this.lambdaCapture();
	        }

	        this.state = 455;
	        this.match(CPP14Parser.RightBracket);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaCapture() {
	    let localctx = new LambdaCaptureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, CPP14Parser.RULE_lambdaCapture);
	    var _la = 0;
	    try {
	        this.state = 463;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 457;
	            this.captureList();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 458;
	            this.captureDefault();
	            this.state = 461;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===122) {
	                this.state = 459;
	                this.match(CPP14Parser.Comma);
	                this.state = 460;
	                this.captureList();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	captureDefault() {
	    let localctx = new CaptureDefaultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, CPP14Parser.RULE_captureDefault);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 465;
	        _la = this._input.LA(1);
	        if(!(_la===97 || _la===101)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	captureList() {
	    let localctx = new CaptureListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, CPP14Parser.RULE_captureList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 467;
	        this.capture();
	        this.state = 472;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===122) {
	            this.state = 468;
	            this.match(CPP14Parser.Comma);
	            this.state = 469;
	            this.capture();
	            this.state = 474;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 476;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===131) {
	            this.state = 475;
	            this.match(CPP14Parser.Ellipsis);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	capture() {
	    let localctx = new CaptureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, CPP14Parser.RULE_capture);
	    try {
	        this.state = 480;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 478;
	            this.simpleCapture();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 479;
	            this.initcapture();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleCapture() {
	    let localctx = new SimpleCaptureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, CPP14Parser.RULE_simpleCapture);
	    var _la = 0;
	    try {
	        this.state = 487;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 97:
	        case 132:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 483;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===97) {
	                this.state = 482;
	                this.match(CPP14Parser.And);
	            }

	            this.state = 485;
	            this.match(CPP14Parser.Identifier);
	            break;
	        case 69:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 486;
	            this.match(CPP14Parser.This);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initcapture() {
	    let localctx = new InitcaptureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, CPP14Parser.RULE_initcapture);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 490;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===97) {
	            this.state = 489;
	            this.match(CPP14Parser.And);
	        }

	        this.state = 492;
	        this.match(CPP14Parser.Identifier);
	        this.state = 493;
	        this.initializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaDeclarator() {
	    let localctx = new LambdaDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, CPP14Parser.RULE_lambdaDeclarator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 495;
	        this.match(CPP14Parser.LeftParen);
	        this.state = 497;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 1157391360) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 1493203275) !== 0) || ((((_la - 66)) & ~0x1f) === 0 && ((1 << (_la - 66)) & 2350353) !== 0) || _la===127 || _la===132) {
	            this.state = 496;
	            this.parameterDeclarationClause();
	        }

	        this.state = 499;
	        this.match(CPP14Parser.RightParen);
	        this.state = 501;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===47) {
	            this.state = 500;
	            this.match(CPP14Parser.Mutable);
	        }

	        this.state = 504;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===50 || _la===71) {
	            this.state = 503;
	            this.exceptionSpecification();
	        }

	        this.state = 507;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===10 || _la===87) {
	            this.state = 506;
	            this.attributeSpecifierSeq();
	        }

	        this.state = 510;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===124) {
	            this.state = 509;
	            this.trailingReturnType();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	postfixExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new PostfixExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 30;
	    this.enterRecursionRule(localctx, 30, CPP14Parser.RULE_postfixExpression, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 542;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 513;
	            this.primaryExpression();
	            break;

	        case 2:
	            this.state = 516;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 13:
	            case 14:
	            case 18:
	            case 19:
	            case 20:
	            case 26:
	            case 30:
	            case 39:
	            case 45:
	            case 46:
	            case 60:
	            case 61:
	            case 78:
	            case 81:
	            case 83:
	            case 127:
	            case 132:
	                this.state = 514;
	                this.simpleTypeSpecifier();
	                break;
	            case 76:
	                this.state = 515;
	                this.typeNameSpecifier();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 524;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 85:
	                this.state = 518;
	                this.match(CPP14Parser.LeftParen);
	                this.state = 520;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3575408894) !== 0) || ((((_la - 39)) & ~0x1f) === 0 && ((1 << (_la - 39)) & 1156066497) !== 0) || ((((_la - 71)) & ~0x1f) === 0 && ((1 << (_la - 71)) & 1014322353) !== 0) || ((((_la - 120)) & ~0x1f) === 0 && ((1 << (_la - 120)) & 4227) !== 0)) {
	                    this.state = 519;
	                    this.expressionList();
	                }

	                this.state = 522;
	                this.match(CPP14Parser.RightParen);
	                break;
	            case 89:
	                this.state = 523;
	                this.bracedInitList();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 3:
	            this.state = 526;
	            _la = this._input.LA(1);
	            if(!(_la===24 || _la===31 || _la===58 || _la===65)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 527;
	            this.match(CPP14Parser.Less);
	            this.state = 528;
	            this.theTypeId();
	            this.state = 529;
	            this.match(CPP14Parser.Greater);
	            this.state = 530;
	            this.match(CPP14Parser.LeftParen);
	            this.state = 531;
	            this.expression();
	            this.state = 532;
	            this.match(CPP14Parser.RightParen);
	            break;

	        case 4:
	            this.state = 534;
	            this.typeIdOfTheTypeId();
	            this.state = 535;
	            this.match(CPP14Parser.LeftParen);
	            this.state = 538;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 536;
	                this.expression();
	                break;

	            case 2:
	                this.state = 537;
	                this.theTypeId();
	                break;

	            }
	            this.state = 540;
	            this.match(CPP14Parser.RightParen);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 571;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,36,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 569;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new PostfixExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixExpression);
	                    this.state = 544;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 545;
	                    this.match(CPP14Parser.LeftBracket);
	                    this.state = 548;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case 1:
	                    case 2:
	                    case 3:
	                    case 4:
	                    case 5:
	                    case 6:
	                    case 7:
	                    case 11:
	                    case 13:
	                    case 14:
	                    case 18:
	                    case 19:
	                    case 20:
	                    case 24:
	                    case 26:
	                    case 28:
	                    case 30:
	                    case 31:
	                    case 39:
	                    case 45:
	                    case 46:
	                    case 49:
	                    case 50:
	                    case 52:
	                    case 58:
	                    case 60:
	                    case 61:
	                    case 62:
	                    case 65:
	                    case 69:
	                    case 71:
	                    case 75:
	                    case 76:
	                    case 78:
	                    case 81:
	                    case 83:
	                    case 85:
	                    case 87:
	                    case 91:
	                    case 92:
	                    case 93:
	                    case 97:
	                    case 98:
	                    case 99:
	                    case 100:
	                    case 120:
	                    case 121:
	                    case 127:
	                    case 132:
	                        this.state = 546;
	                        this.expression();
	                        break;
	                    case 89:
	                        this.state = 547;
	                        this.bracedInitList();
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    }
	                    this.state = 550;
	                    this.match(CPP14Parser.RightBracket);
	                    break;

	                case 2:
	                    localctx = new PostfixExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixExpression);
	                    this.state = 552;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 553;
	                    this.match(CPP14Parser.LeftParen);
	                    this.state = 555;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3575408894) !== 0) || ((((_la - 39)) & ~0x1f) === 0 && ((1 << (_la - 39)) & 1156066497) !== 0) || ((((_la - 71)) & ~0x1f) === 0 && ((1 << (_la - 71)) & 1014322353) !== 0) || ((((_la - 120)) & ~0x1f) === 0 && ((1 << (_la - 120)) & 4227) !== 0)) {
	                        this.state = 554;
	                        this.expressionList();
	                    }

	                    this.state = 557;
	                    this.match(CPP14Parser.RightParen);
	                    break;

	                case 3:
	                    localctx = new PostfixExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixExpression);
	                    this.state = 558;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 559;
	                    _la = this._input.LA(1);
	                    if(!(_la===124 || _la===129)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 565;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 561;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        if(_la===68) {
	                            this.state = 560;
	                            this.match(CPP14Parser.Template);
	                        }

	                        this.state = 563;
	                        this.idExpression();
	                        break;

	                    case 2:
	                        this.state = 564;
	                        this.pseudoDestructorName();
	                        break;

	                    }
	                    break;

	                case 4:
	                    localctx = new PostfixExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixExpression);
	                    this.state = 567;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 568;
	                    _la = this._input.LA(1);
	                    if(!(_la===120 || _la===121)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    break;

	                } 
	            }
	            this.state = 573;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,36,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	typeIdOfTheTypeId() {
	    let localctx = new TypeIdOfTheTypeIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, CPP14Parser.RULE_typeIdOfTheTypeId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 574;
	        this.match(CPP14Parser.Typeid_);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionList() {
	    let localctx = new ExpressionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, CPP14Parser.RULE_expressionList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 576;
	        this.initializerList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pseudoDestructorName() {
	    let localctx = new PseudoDestructorNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, CPP14Parser.RULE_pseudoDestructorName);
	    var _la = 0;
	    try {
	        this.state = 597;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 579;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	            if(la_===1) {
	                this.state = 578;
	                this.nestedNameSpecifier(0);

	            }
	            this.state = 584;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===132) {
	                this.state = 581;
	                this.theTypeName();
	                this.state = 582;
	                this.match(CPP14Parser.Doublecolon);
	            }

	            this.state = 586;
	            this.match(CPP14Parser.Tilde);
	            this.state = 587;
	            this.theTypeName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 588;
	            this.nestedNameSpecifier(0);
	            this.state = 589;
	            this.match(CPP14Parser.Template);
	            this.state = 590;
	            this.simpleTemplateId();
	            this.state = 591;
	            this.match(CPP14Parser.Doublecolon);
	            this.state = 592;
	            this.match(CPP14Parser.Tilde);
	            this.state = 593;
	            this.theTypeName();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 595;
	            this.match(CPP14Parser.Tilde);
	            this.state = 596;
	            this.decltypeSpecifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryExpression() {
	    let localctx = new UnaryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, CPP14Parser.RULE_unaryExpression);
	    try {
	        this.state = 626;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 599;
	            this.postfixExpression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 604;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 120:
	                this.state = 600;
	                this.match(CPP14Parser.PlusPlus);
	                break;
	            case 121:
	                this.state = 601;
	                this.match(CPP14Parser.MinusMinus);
	                break;
	            case 91:
	            case 92:
	            case 93:
	            case 97:
	            case 98:
	            case 99:
	            case 100:
	                this.state = 602;
	                this.unaryOperator();
	                break;
	            case 62:
	                this.state = 603;
	                this.match(CPP14Parser.Sizeof);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 606;
	            this.unaryExpression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 607;
	            this.match(CPP14Parser.Sizeof);
	            this.state = 616;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 85:
	                this.state = 608;
	                this.match(CPP14Parser.LeftParen);
	                this.state = 609;
	                this.theTypeId();
	                this.state = 610;
	                this.match(CPP14Parser.RightParen);
	                break;
	            case 131:
	                this.state = 612;
	                this.match(CPP14Parser.Ellipsis);
	                this.state = 613;
	                this.match(CPP14Parser.LeftParen);
	                this.state = 614;
	                this.match(CPP14Parser.Identifier);
	                this.state = 615;
	                this.match(CPP14Parser.RightParen);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 618;
	            this.match(CPP14Parser.Alignof);
	            this.state = 619;
	            this.match(CPP14Parser.LeftParen);
	            this.state = 620;
	            this.theTypeId();
	            this.state = 621;
	            this.match(CPP14Parser.RightParen);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 623;
	            this.noExceptExpression();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 624;
	            this.newExpression();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 625;
	            this.deleteExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryOperator() {
	    let localctx = new UnaryOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, CPP14Parser.RULE_unaryOperator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 628;
	        _la = this._input.LA(1);
	        if(!(((((_la - 91)) & ~0x1f) === 0 && ((1 << (_la - 91)) & 967) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	newExpression() {
	    let localctx = new NewExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, CPP14Parser.RULE_newExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 631;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===127) {
	            this.state = 630;
	            this.match(CPP14Parser.Doublecolon);
	        }

	        this.state = 633;
	        this.match(CPP14Parser.New);
	        this.state = 635;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
	        if(la_===1) {
	            this.state = 634;
	            this.newPlacement();

	        }
	        this.state = 642;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 13:
	        case 14:
	        case 18:
	        case 19:
	        case 20:
	        case 21:
	        case 22:
	        case 26:
	        case 30:
	        case 33:
	        case 39:
	        case 45:
	        case 46:
	        case 60:
	        case 61:
	        case 66:
	        case 76:
	        case 77:
	        case 78:
	        case 81:
	        case 82:
	        case 83:
	        case 127:
	        case 132:
	            this.state = 637;
	            this.newTypeId();
	            break;
	        case 85:
	            this.state = 638;
	            this.match(CPP14Parser.LeftParen);
	            this.state = 639;
	            this.theTypeId();
	            this.state = 640;
	            this.match(CPP14Parser.RightParen);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 645;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===85 || _la===89) {
	            this.state = 644;
	            this.newInitializer();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	newPlacement() {
	    let localctx = new NewPlacementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, CPP14Parser.RULE_newPlacement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 647;
	        this.match(CPP14Parser.LeftParen);
	        this.state = 648;
	        this.expressionList();
	        this.state = 649;
	        this.match(CPP14Parser.RightParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	newTypeId() {
	    let localctx = new NewTypeIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, CPP14Parser.RULE_newTypeId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 651;
	        this.typeSpecifierSeq();
	        this.state = 653;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
	        if(la_===1) {
	            this.state = 652;
	            this.newDeclarator();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	newDeclarator() {
	    let localctx = new NewDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, CPP14Parser.RULE_newDeclarator);
	    try {
	        this.state = 660;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 26:
	        case 93:
	        case 97:
	        case 118:
	        case 127:
	        case 132:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 655;
	            this.pointerOperator();
	            this.state = 657;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
	            if(la_===1) {
	                this.state = 656;
	                this.newDeclarator();

	            }
	            break;
	        case 87:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 659;
	            this.noPointerNewDeclarator(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	noPointerNewDeclarator(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new NoPointerNewDeclaratorContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 50;
	    this.enterRecursionRule(localctx, 50, CPP14Parser.RULE_noPointerNewDeclarator, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 663;
	        this.match(CPP14Parser.LeftBracket);
	        this.state = 664;
	        this.expression();
	        this.state = 665;
	        this.match(CPP14Parser.RightBracket);
	        this.state = 667;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
	        if(la_===1) {
	            this.state = 666;
	            this.attributeSpecifierSeq();

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 678;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,52,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new NoPointerNewDeclaratorContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_noPointerNewDeclarator);
	                this.state = 669;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 670;
	                this.match(CPP14Parser.LeftBracket);
	                this.state = 671;
	                this.constantExpression();
	                this.state = 672;
	                this.match(CPP14Parser.RightBracket);
	                this.state = 674;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
	                if(la_===1) {
	                    this.state = 673;
	                    this.attributeSpecifierSeq();

	                } 
	            }
	            this.state = 680;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,52,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	newInitializer() {
	    let localctx = new NewInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, CPP14Parser.RULE_newInitializer);
	    var _la = 0;
	    try {
	        this.state = 687;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 85:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 681;
	            this.match(CPP14Parser.LeftParen);
	            this.state = 683;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3575408894) !== 0) || ((((_la - 39)) & ~0x1f) === 0 && ((1 << (_la - 39)) & 1156066497) !== 0) || ((((_la - 71)) & ~0x1f) === 0 && ((1 << (_la - 71)) & 1014322353) !== 0) || ((((_la - 120)) & ~0x1f) === 0 && ((1 << (_la - 120)) & 4227) !== 0)) {
	                this.state = 682;
	                this.expressionList();
	            }

	            this.state = 685;
	            this.match(CPP14Parser.RightParen);
	            break;
	        case 89:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 686;
	            this.bracedInitList();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deleteExpression() {
	    let localctx = new DeleteExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, CPP14Parser.RULE_deleteExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 690;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===127) {
	            this.state = 689;
	            this.match(CPP14Parser.Doublecolon);
	        }

	        this.state = 692;
	        this.match(CPP14Parser.Delete);
	        this.state = 695;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
	        if(la_===1) {
	            this.state = 693;
	            this.match(CPP14Parser.LeftBracket);
	            this.state = 694;
	            this.match(CPP14Parser.RightBracket);

	        }
	        this.state = 697;
	        this.castExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	noExceptExpression() {
	    let localctx = new NoExceptExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, CPP14Parser.RULE_noExceptExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 699;
	        this.match(CPP14Parser.Noexcept);
	        this.state = 700;
	        this.match(CPP14Parser.LeftParen);
	        this.state = 701;
	        this.expression();
	        this.state = 702;
	        this.match(CPP14Parser.RightParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	castExpression() {
	    let localctx = new CastExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, CPP14Parser.RULE_castExpression);
	    try {
	        this.state = 710;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 704;
	            this.unaryExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 705;
	            this.match(CPP14Parser.LeftParen);
	            this.state = 706;
	            this.theTypeId();
	            this.state = 707;
	            this.match(CPP14Parser.RightParen);
	            this.state = 708;
	            this.castExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pointerMemberExpression() {
	    let localctx = new PointerMemberExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, CPP14Parser.RULE_pointerMemberExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 712;
	        this.castExpression();
	        this.state = 717;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===123 || _la===130) {
	            this.state = 713;
	            _la = this._input.LA(1);
	            if(!(_la===123 || _la===130)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 714;
	            this.castExpression();
	            this.state = 719;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplicativeExpression() {
	    let localctx = new MultiplicativeExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, CPP14Parser.RULE_multiplicativeExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 720;
	        this.pointerMemberExpression();
	        this.state = 725;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 93)) & ~0x1f) === 0 && ((1 << (_la - 93)) & 7) !== 0)) {
	            this.state = 721;
	            _la = this._input.LA(1);
	            if(!(((((_la - 93)) & ~0x1f) === 0 && ((1 << (_la - 93)) & 7) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 722;
	            this.pointerMemberExpression();
	            this.state = 727;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	additiveExpression() {
	    let localctx = new AdditiveExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, CPP14Parser.RULE_additiveExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 728;
	        this.multiplicativeExpression();
	        this.state = 733;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===91 || _la===92) {
	            this.state = 729;
	            _la = this._input.LA(1);
	            if(!(_la===91 || _la===92)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 730;
	            this.multiplicativeExpression();
	            this.state = 735;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shiftExpression() {
	    let localctx = new ShiftExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, CPP14Parser.RULE_shiftExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 736;
	        this.additiveExpression();
	        this.state = 742;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,61,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 737;
	                this.shiftOperator();
	                this.state = 738;
	                this.additiveExpression(); 
	            }
	            this.state = 744;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,61,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shiftOperator() {
	    let localctx = new ShiftOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, CPP14Parser.RULE_shiftOperator);
	    try {
	        this.state = 749;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 103:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 745;
	            this.match(CPP14Parser.Greater);
	            this.state = 746;
	            this.match(CPP14Parser.Greater);
	            break;
	        case 102:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 747;
	            this.match(CPP14Parser.Less);
	            this.state = 748;
	            this.match(CPP14Parser.Less);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationalExpression() {
	    let localctx = new RelationalExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, CPP14Parser.RULE_relationalExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 751;
	        this.shiftExpression();
	        this.state = 756;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,63,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 752;
	                _la = this._input.LA(1);
	                if(!(((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 49155) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 753;
	                this.shiftExpression(); 
	            }
	            this.state = 758;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,63,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	equalityExpression() {
	    let localctx = new EqualityExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, CPP14Parser.RULE_equalityExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 759;
	        this.relationalExpression();
	        this.state = 764;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===114 || _la===115) {
	            this.state = 760;
	            _la = this._input.LA(1);
	            if(!(_la===114 || _la===115)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 761;
	            this.relationalExpression();
	            this.state = 766;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	andExpression() {
	    let localctx = new AndExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, CPP14Parser.RULE_andExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 767;
	        this.equalityExpression();
	        this.state = 772;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===97) {
	            this.state = 768;
	            this.match(CPP14Parser.And);
	            this.state = 769;
	            this.equalityExpression();
	            this.state = 774;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exclusiveOrExpression() {
	    let localctx = new ExclusiveOrExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, CPP14Parser.RULE_exclusiveOrExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 775;
	        this.andExpression();
	        this.state = 780;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===96) {
	            this.state = 776;
	            this.match(CPP14Parser.Caret);
	            this.state = 777;
	            this.andExpression();
	            this.state = 782;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inclusiveOrExpression() {
	    let localctx = new InclusiveOrExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, CPP14Parser.RULE_inclusiveOrExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 783;
	        this.exclusiveOrExpression();
	        this.state = 788;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===98) {
	            this.state = 784;
	            this.match(CPP14Parser.Or);
	            this.state = 785;
	            this.exclusiveOrExpression();
	            this.state = 790;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logicalAndExpression() {
	    let localctx = new LogicalAndExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, CPP14Parser.RULE_logicalAndExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 791;
	        this.inclusiveOrExpression();
	        this.state = 796;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===118) {
	            this.state = 792;
	            this.match(CPP14Parser.AndAnd);
	            this.state = 793;
	            this.inclusiveOrExpression();
	            this.state = 798;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logicalOrExpression() {
	    let localctx = new LogicalOrExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, CPP14Parser.RULE_logicalOrExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 799;
	        this.logicalAndExpression();
	        this.state = 804;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===119) {
	            this.state = 800;
	            this.match(CPP14Parser.OrOr);
	            this.state = 801;
	            this.logicalAndExpression();
	            this.state = 806;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalExpression() {
	    let localctx = new ConditionalExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, CPP14Parser.RULE_conditionalExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 807;
	        this.logicalOrExpression();
	        this.state = 813;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===125) {
	            this.state = 808;
	            this.match(CPP14Parser.Question);
	            this.state = 809;
	            this.expression();
	            this.state = 810;
	            this.match(CPP14Parser.Colon);
	            this.state = 811;
	            this.assignmentExpression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentExpression() {
	    let localctx = new AssignmentExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, CPP14Parser.RULE_assignmentExpression);
	    try {
	        this.state = 821;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 815;
	            this.conditionalExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 816;
	            this.logicalOrExpression();
	            this.state = 817;
	            this.assignmentOperator();
	            this.state = 818;
	            this.initializerClause();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 820;
	            this.throwExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentOperator() {
	    let localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, CPP14Parser.RULE_assignmentOperator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 823;
	        _la = this._input.LA(1);
	        if(!(((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 8185) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, CPP14Parser.RULE_expression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 825;
	        this.assignmentExpression();
	        this.state = 830;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===122) {
	            this.state = 826;
	            this.match(CPP14Parser.Comma);
	            this.state = 827;
	            this.assignmentExpression();
	            this.state = 832;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantExpression() {
	    let localctx = new ConstantExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, CPP14Parser.RULE_constantExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 833;
	        this.conditionalExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, CPP14Parser.RULE_statement);
	    try {
	        this.state = 848;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 835;
	            this.labeledStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 836;
	            this.declarationStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 838;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
	            if(la_===1) {
	                this.state = 837;
	                this.attributeSpecifierSeq();

	            }
	            this.state = 846;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 1:
	            case 2:
	            case 3:
	            case 4:
	            case 5:
	            case 6:
	            case 7:
	            case 11:
	            case 13:
	            case 14:
	            case 18:
	            case 19:
	            case 20:
	            case 24:
	            case 26:
	            case 28:
	            case 30:
	            case 31:
	            case 39:
	            case 45:
	            case 46:
	            case 49:
	            case 50:
	            case 52:
	            case 58:
	            case 60:
	            case 61:
	            case 62:
	            case 65:
	            case 69:
	            case 71:
	            case 75:
	            case 76:
	            case 78:
	            case 81:
	            case 83:
	            case 85:
	            case 87:
	            case 91:
	            case 92:
	            case 93:
	            case 97:
	            case 98:
	            case 99:
	            case 100:
	            case 120:
	            case 121:
	            case 127:
	            case 128:
	            case 132:
	                this.state = 840;
	                this.expressionStatement();
	                break;
	            case 89:
	                this.state = 841;
	                this.compoundStatement();
	                break;
	            case 43:
	            case 67:
	                this.state = 842;
	                this.selectionStatement();
	                break;
	            case 29:
	            case 40:
	            case 84:
	                this.state = 843;
	                this.iterationStatement();
	                break;
	            case 15:
	            case 25:
	            case 42:
	            case 59:
	                this.state = 844;
	                this.jumpStatement();
	                break;
	            case 73:
	                this.state = 845;
	                this.tryBlock();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labeledStatement() {
	    let localctx = new LabeledStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, CPP14Parser.RULE_labeledStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 851;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===10 || _la===87) {
	            this.state = 850;
	            this.attributeSpecifierSeq();
	        }

	        this.state = 857;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 132:
	            this.state = 853;
	            this.match(CPP14Parser.Identifier);
	            break;
	        case 16:
	            this.state = 854;
	            this.match(CPP14Parser.Case);
	            this.state = 855;
	            this.constantExpression();
	            break;
	        case 27:
	            this.state = 856;
	            this.match(CPP14Parser.Default);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 859;
	        this.match(CPP14Parser.Colon);
	        this.state = 860;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionStatement() {
	    let localctx = new ExpressionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, CPP14Parser.RULE_expressionStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 863;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3575408894) !== 0) || ((((_la - 39)) & ~0x1f) === 0 && ((1 << (_la - 39)) & 1156066497) !== 0) || ((((_la - 71)) & ~0x1f) === 0 && ((1 << (_la - 71)) & 1014060209) !== 0) || ((((_la - 120)) & ~0x1f) === 0 && ((1 << (_la - 120)) & 4227) !== 0)) {
	            this.state = 862;
	            this.expression();
	        }

	        this.state = 865;
	        this.match(CPP14Parser.Semi);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compoundStatement() {
	    let localctx = new CompoundStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, CPP14Parser.RULE_compoundStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 867;
	        this.match(CPP14Parser.LeftBrace);
	        this.state = 869;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 4294835454) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 4278976459) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 492830583) !== 0) || ((((_la - 97)) & ~0x1f) === 0 && ((1 << (_la - 97)) & 3248488463) !== 0) || _la===131 || _la===132) {
	            this.state = 868;
	            this.statementSeq();
	        }

	        this.state = 871;
	        this.match(CPP14Parser.RightBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementSeq() {
	    let localctx = new StatementSeqContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, CPP14Parser.RULE_statementSeq);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 874; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 873;
	            this.statement();
	            this.state = 876; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) === 0 && ((1 << _la) & 4294835454) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 4278976459) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 492830583) !== 0) || ((((_la - 97)) & ~0x1f) === 0 && ((1 << (_la - 97)) & 3248488463) !== 0) || _la===131 || _la===132);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectionStatement() {
	    let localctx = new SelectionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, CPP14Parser.RULE_selectionStatement);
	    try {
	        this.state = 893;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 43:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 878;
	            this.match(CPP14Parser.If);
	            this.state = 879;
	            this.match(CPP14Parser.LeftParen);
	            this.state = 880;
	            this.condition();
	            this.state = 881;
	            this.match(CPP14Parser.RightParen);
	            this.state = 882;
	            this.statement();
	            this.state = 885;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
	            if(la_===1) {
	                this.state = 883;
	                this.match(CPP14Parser.Else);
	                this.state = 884;
	                this.statement();

	            }
	            break;
	        case 67:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 887;
	            this.match(CPP14Parser.Switch);
	            this.state = 888;
	            this.match(CPP14Parser.LeftParen);
	            this.state = 889;
	            this.condition();
	            this.state = 890;
	            this.match(CPP14Parser.RightParen);
	            this.state = 891;
	            this.statement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	condition() {
	    let localctx = new ConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, CPP14Parser.RULE_condition);
	    var _la = 0;
	    try {
	        this.state = 906;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 895;
	            this.expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 897;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===10 || _la===87) {
	                this.state = 896;
	                this.attributeSpecifierSeq();
	            }

	            this.state = 899;
	            this.declSpecifierSeq();
	            this.state = 900;
	            this.declarator();
	            this.state = 904;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 101:
	                this.state = 901;
	                this.match(CPP14Parser.Assign);
	                this.state = 902;
	                this.initializerClause();
	                break;
	            case 89:
	                this.state = 903;
	                this.bracedInitList();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iterationStatement() {
	    let localctx = new IterationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, CPP14Parser.RULE_iterationStatement);
	    var _la = 0;
	    try {
	        this.state = 941;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 84:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 908;
	            this.match(CPP14Parser.While);
	            this.state = 909;
	            this.match(CPP14Parser.LeftParen);
	            this.state = 910;
	            this.condition();
	            this.state = 911;
	            this.match(CPP14Parser.RightParen);
	            this.state = 912;
	            this.statement();
	            break;
	        case 29:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 914;
	            this.match(CPP14Parser.Do);
	            this.state = 915;
	            this.statement();
	            this.state = 916;
	            this.match(CPP14Parser.While);
	            this.state = 917;
	            this.match(CPP14Parser.LeftParen);
	            this.state = 918;
	            this.expression();
	            this.state = 919;
	            this.match(CPP14Parser.RightParen);
	            this.state = 920;
	            this.match(CPP14Parser.Semi);
	            break;
	        case 40:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 922;
	            this.match(CPP14Parser.For);
	            this.state = 923;
	            this.match(CPP14Parser.LeftParen);
	            this.state = 936;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 924;
	                this.forInitStatement();
	                this.state = 926;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3590089982) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 2064349515) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 475512435) !== 0) || ((((_la - 97)) & ~0x1f) === 0 && ((1 << (_la - 97)) & 1098907663) !== 0) || _la===132) {
	                    this.state = 925;
	                    this.condition();
	                }

	                this.state = 928;
	                this.match(CPP14Parser.Semi);
	                this.state = 930;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3575408894) !== 0) || ((((_la - 39)) & ~0x1f) === 0 && ((1 << (_la - 39)) & 1156066497) !== 0) || ((((_la - 71)) & ~0x1f) === 0 && ((1 << (_la - 71)) & 1014060209) !== 0) || ((((_la - 120)) & ~0x1f) === 0 && ((1 << (_la - 120)) & 4227) !== 0)) {
	                    this.state = 929;
	                    this.expression();
	                }

	                break;

	            case 2:
	                this.state = 932;
	                this.forRangeDeclaration();
	                this.state = 933;
	                this.match(CPP14Parser.Colon);
	                this.state = 934;
	                this.forRangeInitializer();
	                break;

	            }
	            this.state = 938;
	            this.match(CPP14Parser.RightParen);
	            this.state = 939;
	            this.statement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forInitStatement() {
	    let localctx = new ForInitStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, CPP14Parser.RULE_forInitStatement);
	    try {
	        this.state = 945;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 943;
	            this.expressionStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 944;
	            this.simpleDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forRangeDeclaration() {
	    let localctx = new ForRangeDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, CPP14Parser.RULE_forRangeDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 948;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===10 || _la===87) {
	            this.state = 947;
	            this.attributeSpecifierSeq();
	        }

	        this.state = 950;
	        this.declSpecifierSeq();
	        this.state = 951;
	        this.declarator();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forRangeInitializer() {
	    let localctx = new ForRangeInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, CPP14Parser.RULE_forRangeInitializer);
	    try {
	        this.state = 955;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 2:
	        case 3:
	        case 4:
	        case 5:
	        case 6:
	        case 7:
	        case 11:
	        case 13:
	        case 14:
	        case 18:
	        case 19:
	        case 20:
	        case 24:
	        case 26:
	        case 28:
	        case 30:
	        case 31:
	        case 39:
	        case 45:
	        case 46:
	        case 49:
	        case 50:
	        case 52:
	        case 58:
	        case 60:
	        case 61:
	        case 62:
	        case 65:
	        case 69:
	        case 71:
	        case 75:
	        case 76:
	        case 78:
	        case 81:
	        case 83:
	        case 85:
	        case 87:
	        case 91:
	        case 92:
	        case 93:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 120:
	        case 121:
	        case 127:
	        case 132:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 953;
	            this.expression();
	            break;
	        case 89:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 954;
	            this.bracedInitList();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jumpStatement() {
	    let localctx = new JumpStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, CPP14Parser.RULE_jumpStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 966;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 15:
	            this.state = 957;
	            this.match(CPP14Parser.Break);
	            break;
	        case 25:
	            this.state = 958;
	            this.match(CPP14Parser.Continue);
	            break;
	        case 59:
	            this.state = 959;
	            this.match(CPP14Parser.Return);
	            this.state = 962;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 1:
	            case 2:
	            case 3:
	            case 4:
	            case 5:
	            case 6:
	            case 7:
	            case 11:
	            case 13:
	            case 14:
	            case 18:
	            case 19:
	            case 20:
	            case 24:
	            case 26:
	            case 28:
	            case 30:
	            case 31:
	            case 39:
	            case 45:
	            case 46:
	            case 49:
	            case 50:
	            case 52:
	            case 58:
	            case 60:
	            case 61:
	            case 62:
	            case 65:
	            case 69:
	            case 71:
	            case 75:
	            case 76:
	            case 78:
	            case 81:
	            case 83:
	            case 85:
	            case 87:
	            case 91:
	            case 92:
	            case 93:
	            case 97:
	            case 98:
	            case 99:
	            case 100:
	            case 120:
	            case 121:
	            case 127:
	            case 132:
	            	this.state = 960;
	            	this.expression();
	            	break;
	            case 89:
	            	this.state = 961;
	            	this.bracedInitList();
	            	break;
	            case 128:
	            	break;
	            default:
	            	break;
	            }
	            break;
	        case 42:
	            this.state = 964;
	            this.match(CPP14Parser.Goto);
	            this.state = 965;
	            this.match(CPP14Parser.Identifier);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 968;
	        this.match(CPP14Parser.Semi);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declarationStatement() {
	    let localctx = new DeclarationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, CPP14Parser.RULE_declarationStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 970;
	        this.blockDeclaration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declarationseq() {
	    let localctx = new DeclarationseqContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, CPP14Parser.RULE_declarationseq);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 973; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 972;
	            this.declaration();
	            this.state = 975; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 10)) & ~0x1f) === 0 && ((1 << (_la - 10)) & 2777759517) !== 0) || ((((_la - 44)) & ~0x1f) === 0 && ((1 << (_la - 44)) & 1163600159) !== 0) || ((((_la - 76)) & ~0x1f) === 0 && ((1 << (_la - 76)) & 10619647) !== 0) || ((((_la - 118)) & ~0x1f) === 0 && ((1 << (_la - 118)) & 26113) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaration() {
	    let localctx = new DeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, CPP14Parser.RULE_declaration);
	    try {
	        this.state = 986;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 977;
	            this.blockDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 978;
	            this.functionDefinition();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 979;
	            this.templateDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 980;
	            this.explicitInstantiation();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 981;
	            this.explicitSpecialization();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 982;
	            this.linkageSpecification();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 983;
	            this.namespaceDefinition();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 984;
	            this.emptyDeclaration();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 985;
	            this.attributeDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blockDeclaration() {
	    let localctx = new BlockDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, CPP14Parser.RULE_blockDeclaration);
	    try {
	        this.state = 996;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,97,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 988;
	            this.simpleDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 989;
	            this.asmDefinition();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 990;
	            this.namespaceAliasDefinition();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 991;
	            this.usingDeclaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 992;
	            this.usingDirective();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 993;
	            this.staticAssertDeclaration();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 994;
	            this.aliasDeclaration();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 995;
	            this.opaqueEnumDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aliasDeclaration() {
	    let localctx = new AliasDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, CPP14Parser.RULE_aliasDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 998;
	        this.match(CPP14Parser.Using);
	        this.state = 999;
	        this.match(CPP14Parser.Identifier);
	        this.state = 1001;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===10 || _la===87) {
	            this.state = 1000;
	            this.attributeSpecifierSeq();
	        }

	        this.state = 1003;
	        this.match(CPP14Parser.Assign);
	        this.state = 1004;
	        this.theTypeId();
	        this.state = 1005;
	        this.match(CPP14Parser.Semi);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleDeclaration() {
	    let localctx = new SimpleDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, CPP14Parser.RULE_simpleDeclaration);
	    var _la = 0;
	    try {
	        this.state = 1021;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 13:
	        case 14:
	        case 18:
	        case 19:
	        case 20:
	        case 21:
	        case 22:
	        case 23:
	        case 26:
	        case 30:
	        case 33:
	        case 34:
	        case 36:
	        case 39:
	        case 41:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 52:
	        case 57:
	        case 60:
	        case 61:
	        case 63:
	        case 66:
	        case 70:
	        case 74:
	        case 76:
	        case 77:
	        case 78:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 85:
	        case 93:
	        case 97:
	        case 99:
	        case 118:
	        case 127:
	        case 128:
	        case 131:
	        case 132:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1008;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
	            if(la_===1) {
	                this.state = 1007;
	                this.declSpecifierSeq();

	            }
	            this.state = 1011;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===26 || _la===52 || ((((_la - 85)) & ~0x1f) === 0 && ((1 << (_la - 85)) & 20737) !== 0) || ((((_la - 118)) & ~0x1f) === 0 && ((1 << (_la - 118)) & 25089) !== 0)) {
	                this.state = 1010;
	                this.initDeclaratorList();
	            }

	            this.state = 1013;
	            this.match(CPP14Parser.Semi);
	            break;
	        case 10:
	        case 87:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1014;
	            this.attributeSpecifierSeq();
	            this.state = 1016;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
	            if(la_===1) {
	                this.state = 1015;
	                this.declSpecifierSeq();

	            }
	            this.state = 1018;
	            this.initDeclaratorList();
	            this.state = 1019;
	            this.match(CPP14Parser.Semi);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	staticAssertDeclaration() {
	    let localctx = new StaticAssertDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, CPP14Parser.RULE_staticAssertDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1023;
	        this.match(CPP14Parser.Static_assert);
	        this.state = 1024;
	        this.match(CPP14Parser.LeftParen);
	        this.state = 1025;
	        this.constantExpression();
	        this.state = 1026;
	        this.match(CPP14Parser.Comma);
	        this.state = 1027;
	        this.match(CPP14Parser.StringLiteral);
	        this.state = 1028;
	        this.match(CPP14Parser.RightParen);
	        this.state = 1029;
	        this.match(CPP14Parser.Semi);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	emptyDeclaration() {
	    let localctx = new EmptyDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, CPP14Parser.RULE_emptyDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1031;
	        this.match(CPP14Parser.Semi);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attributeDeclaration() {
	    let localctx = new AttributeDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, CPP14Parser.RULE_attributeDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1033;
	        this.attributeSpecifierSeq();
	        this.state = 1034;
	        this.match(CPP14Parser.Semi);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declSpecifier() {
	    let localctx = new DeclSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, CPP14Parser.RULE_declSpecifier);
	    try {
	        this.state = 1042;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 36:
	        case 47:
	        case 57:
	        case 63:
	        case 70:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1036;
	            this.storageClassSpecifier();
	            break;
	        case 13:
	        case 14:
	        case 18:
	        case 19:
	        case 20:
	        case 21:
	        case 22:
	        case 26:
	        case 30:
	        case 33:
	        case 39:
	        case 45:
	        case 46:
	        case 60:
	        case 61:
	        case 66:
	        case 76:
	        case 77:
	        case 78:
	        case 81:
	        case 82:
	        case 83:
	        case 127:
	        case 132:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1037;
	            this.typeSpecifier();
	            break;
	        case 34:
	        case 44:
	        case 80:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1038;
	            this.functionSpecifier();
	            break;
	        case 41:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1039;
	            this.match(CPP14Parser.Friend);
	            break;
	        case 74:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1040;
	            this.match(CPP14Parser.Typedef);
	            break;
	        case 23:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1041;
	            this.match(CPP14Parser.Constexpr);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declSpecifierSeq() {
	    let localctx = new DeclSpecifierSeqContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, CPP14Parser.RULE_declSpecifierSeq);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1045; 
	        this._errHandler.sync(this);
	        var _alt = 1+1;
	        do {
	        	switch (_alt) {
	        	case 1+1:
	        		this.state = 1044;
	        		this.declSpecifier();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1047; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,104, this._ctx);
	        } while ( _alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 1050;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
	        if(la_===1) {
	            this.state = 1049;
	            this.attributeSpecifierSeq();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	storageClassSpecifier() {
	    let localctx = new StorageClassSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, CPP14Parser.RULE_storageClassSpecifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1052;
	        _la = this._input.LA(1);
	        if(!(((((_la - 36)) & ~0x1f) === 0 && ((1 << (_la - 36)) & 136316929) !== 0) || _la===70)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionSpecifier() {
	    let localctx = new FunctionSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, CPP14Parser.RULE_functionSpecifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1054;
	        _la = this._input.LA(1);
	        if(!(_la===34 || _la===44 || _la===80)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typedefName() {
	    let localctx = new TypedefNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, CPP14Parser.RULE_typedefName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1056;
	        this.match(CPP14Parser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeSpecifier() {
	    let localctx = new TypeSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, CPP14Parser.RULE_typeSpecifier);
	    try {
	        this.state = 1061;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1058;
	            this.trailingTypeSpecifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1059;
	            this.classSpecifier();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1060;
	            this.enumSpecifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trailingTypeSpecifier() {
	    let localctx = new TrailingTypeSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, CPP14Parser.RULE_trailingTypeSpecifier);
	    try {
	        this.state = 1067;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 13:
	        case 14:
	        case 18:
	        case 19:
	        case 20:
	        case 26:
	        case 30:
	        case 39:
	        case 45:
	        case 46:
	        case 60:
	        case 61:
	        case 78:
	        case 81:
	        case 83:
	        case 127:
	        case 132:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1063;
	            this.simpleTypeSpecifier();
	            break;
	        case 21:
	        case 33:
	        case 66:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1064;
	            this.elaboratedTypeSpecifier();
	            break;
	        case 76:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1065;
	            this.typeNameSpecifier();
	            break;
	        case 22:
	        case 82:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1066;
	            this.cvQualifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeSpecifierSeq() {
	    let localctx = new TypeSpecifierSeqContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, CPP14Parser.RULE_typeSpecifierSeq);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1070; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1069;
	        		this.typeSpecifier();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1072; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,108, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 1075;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
	        if(la_===1) {
	            this.state = 1074;
	            this.attributeSpecifierSeq();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trailingTypeSpecifierSeq() {
	    let localctx = new TrailingTypeSpecifierSeqContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, CPP14Parser.RULE_trailingTypeSpecifierSeq);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1078; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1077;
	        		this.trailingTypeSpecifier();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1080; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,110, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 1083;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
	        if(la_===1) {
	            this.state = 1082;
	            this.attributeSpecifierSeq();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleTypeLengthModifier() {
	    let localctx = new SimpleTypeLengthModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, CPP14Parser.RULE_simpleTypeLengthModifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1085;
	        _la = this._input.LA(1);
	        if(!(_la===46 || _la===60)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleTypeSignednessModifier() {
	    let localctx = new SimpleTypeSignednessModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, CPP14Parser.RULE_simpleTypeSignednessModifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1087;
	        _la = this._input.LA(1);
	        if(!(_la===61 || _la===78)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleTypeSpecifier() {
	    let localctx = new SimpleTypeSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, CPP14Parser.RULE_simpleTypeSpecifier);
	    var _la = 0;
	    try {
	        this.state = 1141;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1090;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
	            if(la_===1) {
	                this.state = 1089;
	                this.nestedNameSpecifier(0);

	            }
	            this.state = 1092;
	            this.theTypeName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1093;
	            this.nestedNameSpecifier(0);
	            this.state = 1094;
	            this.match(CPP14Parser.Template);
	            this.state = 1095;
	            this.simpleTemplateId();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1097;
	            this.simpleTypeSignednessModifier();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1099;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===61 || _la===78) {
	                this.state = 1098;
	                this.simpleTypeSignednessModifier();
	            }

	            this.state = 1102; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1101;
	            		this.simpleTypeLengthModifier();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1104; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,114, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1107;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===61 || _la===78) {
	                this.state = 1106;
	                this.simpleTypeSignednessModifier();
	            }

	            this.state = 1109;
	            this.match(CPP14Parser.Char);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1111;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===61 || _la===78) {
	                this.state = 1110;
	                this.simpleTypeSignednessModifier();
	            }

	            this.state = 1113;
	            this.match(CPP14Parser.Char16);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1115;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===61 || _la===78) {
	                this.state = 1114;
	                this.simpleTypeSignednessModifier();
	            }

	            this.state = 1117;
	            this.match(CPP14Parser.Char32);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1119;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===61 || _la===78) {
	                this.state = 1118;
	                this.simpleTypeSignednessModifier();
	            }

	            this.state = 1121;
	            this.match(CPP14Parser.Wchar);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1122;
	            this.match(CPP14Parser.Bool);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1124;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===61 || _la===78) {
	                this.state = 1123;
	                this.simpleTypeSignednessModifier();
	            }

	            this.state = 1129;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===46 || _la===60) {
	                this.state = 1126;
	                this.simpleTypeLengthModifier();
	                this.state = 1131;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1132;
	            this.match(CPP14Parser.Int);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1133;
	            this.match(CPP14Parser.Float);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1135;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===46 || _la===60) {
	                this.state = 1134;
	                this.simpleTypeLengthModifier();
	            }

	            this.state = 1137;
	            this.match(CPP14Parser.Double);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1138;
	            this.match(CPP14Parser.Void);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1139;
	            this.match(CPP14Parser.Auto);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1140;
	            this.decltypeSpecifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	theTypeName() {
	    let localctx = new TheTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, CPP14Parser.RULE_theTypeName);
	    try {
	        this.state = 1147;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1143;
	            this.className();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1144;
	            this.enumName();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1145;
	            this.typedefName();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1146;
	            this.simpleTemplateId();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decltypeSpecifier() {
	    let localctx = new DecltypeSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, CPP14Parser.RULE_decltypeSpecifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1149;
	        this.match(CPP14Parser.Decltype);
	        this.state = 1150;
	        this.match(CPP14Parser.LeftParen);
	        this.state = 1153;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1151;
	            this.expression();
	            break;

	        case 2:
	            this.state = 1152;
	            this.match(CPP14Parser.Auto);
	            break;

	        }
	        this.state = 1155;
	        this.match(CPP14Parser.RightParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elaboratedTypeSpecifier() {
	    let localctx = new ElaboratedTypeSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, CPP14Parser.RULE_elaboratedTypeSpecifier);
	    var _la = 0;
	    try {
	        this.state = 1179;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 21:
	        case 66:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1157;
	            this.classKey();
	            this.state = 1172;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,128,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1159;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===10 || _la===87) {
	                    this.state = 1158;
	                    this.attributeSpecifierSeq();
	                }

	                this.state = 1162;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
	                if(la_===1) {
	                    this.state = 1161;
	                    this.nestedNameSpecifier(0);

	                }
	                this.state = 1164;
	                this.match(CPP14Parser.Identifier);
	                break;

	            case 2:
	                this.state = 1165;
	                this.simpleTemplateId();
	                break;

	            case 3:
	                this.state = 1166;
	                this.nestedNameSpecifier(0);
	                this.state = 1168;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===68) {
	                    this.state = 1167;
	                    this.match(CPP14Parser.Template);
	                }

	                this.state = 1170;
	                this.simpleTemplateId();
	                break;

	            }
	            break;
	        case 33:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1174;
	            this.match(CPP14Parser.Enum);
	            this.state = 1176;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,129,this._ctx);
	            if(la_===1) {
	                this.state = 1175;
	                this.nestedNameSpecifier(0);

	            }
	            this.state = 1178;
	            this.match(CPP14Parser.Identifier);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumName() {
	    let localctx = new EnumNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, CPP14Parser.RULE_enumName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1181;
	        this.match(CPP14Parser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumSpecifier() {
	    let localctx = new EnumSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, CPP14Parser.RULE_enumSpecifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1183;
	        this.enumHead();
	        this.state = 1184;
	        this.match(CPP14Parser.LeftBrace);
	        this.state = 1189;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===132) {
	            this.state = 1185;
	            this.enumeratorList();
	            this.state = 1187;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===122) {
	                this.state = 1186;
	                this.match(CPP14Parser.Comma);
	            }

	        }

	        this.state = 1191;
	        this.match(CPP14Parser.RightBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumHead() {
	    let localctx = new EnumHeadContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, CPP14Parser.RULE_enumHead);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1193;
	        this.enumkey();
	        this.state = 1195;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===10 || _la===87) {
	            this.state = 1194;
	            this.attributeSpecifierSeq();
	        }

	        this.state = 1201;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===26 || _la===127 || _la===132) {
	            this.state = 1198;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,134,this._ctx);
	            if(la_===1) {
	                this.state = 1197;
	                this.nestedNameSpecifier(0);

	            }
	            this.state = 1200;
	            this.match(CPP14Parser.Identifier);
	        }

	        this.state = 1204;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===126) {
	            this.state = 1203;
	            this.enumbase();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	opaqueEnumDeclaration() {
	    let localctx = new OpaqueEnumDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, CPP14Parser.RULE_opaqueEnumDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1206;
	        this.enumkey();
	        this.state = 1208;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===10 || _la===87) {
	            this.state = 1207;
	            this.attributeSpecifierSeq();
	        }

	        this.state = 1210;
	        this.match(CPP14Parser.Identifier);
	        this.state = 1212;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===126) {
	            this.state = 1211;
	            this.enumbase();
	        }

	        this.state = 1214;
	        this.match(CPP14Parser.Semi);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumkey() {
	    let localctx = new EnumkeyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, CPP14Parser.RULE_enumkey);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1216;
	        this.match(CPP14Parser.Enum);
	        this.state = 1218;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===21 || _la===66) {
	            this.state = 1217;
	            _la = this._input.LA(1);
	            if(!(_la===21 || _la===66)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumbase() {
	    let localctx = new EnumbaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, CPP14Parser.RULE_enumbase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1220;
	        this.match(CPP14Parser.Colon);
	        this.state = 1221;
	        this.typeSpecifierSeq();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumeratorList() {
	    let localctx = new EnumeratorListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, CPP14Parser.RULE_enumeratorList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1223;
	        this.enumeratorDefinition();
	        this.state = 1228;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,140,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1224;
	                this.match(CPP14Parser.Comma);
	                this.state = 1225;
	                this.enumeratorDefinition(); 
	            }
	            this.state = 1230;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,140,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumeratorDefinition() {
	    let localctx = new EnumeratorDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, CPP14Parser.RULE_enumeratorDefinition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1231;
	        this.enumerator();
	        this.state = 1234;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===101) {
	            this.state = 1232;
	            this.match(CPP14Parser.Assign);
	            this.state = 1233;
	            this.constantExpression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumerator() {
	    let localctx = new EnumeratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, CPP14Parser.RULE_enumerator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1236;
	        this.match(CPP14Parser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespaceName() {
	    let localctx = new NamespaceNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, CPP14Parser.RULE_namespaceName);
	    try {
	        this.state = 1240;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,142,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1238;
	            this.originalNamespaceName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1239;
	            this.namespaceAlias();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	originalNamespaceName() {
	    let localctx = new OriginalNamespaceNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, CPP14Parser.RULE_originalNamespaceName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1242;
	        this.match(CPP14Parser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespaceDefinition() {
	    let localctx = new NamespaceDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, CPP14Parser.RULE_namespaceDefinition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1245;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===44) {
	            this.state = 1244;
	            this.match(CPP14Parser.Inline);
	        }

	        this.state = 1247;
	        this.match(CPP14Parser.Namespace);
	        this.state = 1250;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,144,this._ctx);
	        if(la_===1) {
	            this.state = 1248;
	            this.match(CPP14Parser.Identifier);

	        } else if(la_===2) {
	            this.state = 1249;
	            this.originalNamespaceName();

	        }
	        this.state = 1252;
	        this.match(CPP14Parser.LeftBrace);
	        this.state = 1254;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 10)) & ~0x1f) === 0 && ((1 << (_la - 10)) & 2777759517) !== 0) || ((((_la - 44)) & ~0x1f) === 0 && ((1 << (_la - 44)) & 1163600159) !== 0) || ((((_la - 76)) & ~0x1f) === 0 && ((1 << (_la - 76)) & 10619647) !== 0) || ((((_la - 118)) & ~0x1f) === 0 && ((1 << (_la - 118)) & 26113) !== 0)) {
	            this.state = 1253;
	            localctx.namespaceBody = this.declarationseq();
	        }

	        this.state = 1256;
	        this.match(CPP14Parser.RightBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespaceAlias() {
	    let localctx = new NamespaceAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, CPP14Parser.RULE_namespaceAlias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1258;
	        this.match(CPP14Parser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespaceAliasDefinition() {
	    let localctx = new NamespaceAliasDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, CPP14Parser.RULE_namespaceAliasDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1260;
	        this.match(CPP14Parser.Namespace);
	        this.state = 1261;
	        this.match(CPP14Parser.Identifier);
	        this.state = 1262;
	        this.match(CPP14Parser.Assign);
	        this.state = 1263;
	        this.qualifiednamespacespecifier();
	        this.state = 1264;
	        this.match(CPP14Parser.Semi);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiednamespacespecifier() {
	    let localctx = new QualifiednamespacespecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, CPP14Parser.RULE_qualifiednamespacespecifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1267;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
	        if(la_===1) {
	            this.state = 1266;
	            this.nestedNameSpecifier(0);

	        }
	        this.state = 1269;
	        this.namespaceName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	usingDeclaration() {
	    let localctx = new UsingDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, CPP14Parser.RULE_usingDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1271;
	        this.match(CPP14Parser.Using);
	        this.state = 1277;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,148,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1273;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===76) {
	                this.state = 1272;
	                this.match(CPP14Parser.Typename_);
	            }

	            this.state = 1275;
	            this.nestedNameSpecifier(0);
	            break;

	        case 2:
	            this.state = 1276;
	            this.match(CPP14Parser.Doublecolon);
	            break;

	        }
	        this.state = 1279;
	        this.unqualifiedId();
	        this.state = 1280;
	        this.match(CPP14Parser.Semi);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	usingDirective() {
	    let localctx = new UsingDirectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, CPP14Parser.RULE_usingDirective);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1283;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===10 || _la===87) {
	            this.state = 1282;
	            this.attributeSpecifierSeq();
	        }

	        this.state = 1285;
	        this.match(CPP14Parser.Using);
	        this.state = 1286;
	        this.match(CPP14Parser.Namespace);
	        this.state = 1288;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,150,this._ctx);
	        if(la_===1) {
	            this.state = 1287;
	            this.nestedNameSpecifier(0);

	        }
	        this.state = 1290;
	        this.namespaceName();
	        this.state = 1291;
	        this.match(CPP14Parser.Semi);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	asmDefinition() {
	    let localctx = new AsmDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, CPP14Parser.RULE_asmDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1293;
	        this.match(CPP14Parser.Asm);
	        this.state = 1294;
	        this.match(CPP14Parser.LeftParen);
	        this.state = 1295;
	        this.match(CPP14Parser.StringLiteral);
	        this.state = 1296;
	        this.match(CPP14Parser.RightParen);
	        this.state = 1297;
	        this.match(CPP14Parser.Semi);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	linkageSpecification() {
	    let localctx = new LinkageSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, CPP14Parser.RULE_linkageSpecification);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1299;
	        this.match(CPP14Parser.Extern);
	        this.state = 1300;
	        this.match(CPP14Parser.StringLiteral);
	        this.state = 1307;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 89:
	            this.state = 1301;
	            this.match(CPP14Parser.LeftBrace);
	            this.state = 1303;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 10)) & ~0x1f) === 0 && ((1 << (_la - 10)) & 2777759517) !== 0) || ((((_la - 44)) & ~0x1f) === 0 && ((1 << (_la - 44)) & 1163600159) !== 0) || ((((_la - 76)) & ~0x1f) === 0 && ((1 << (_la - 76)) & 10619647) !== 0) || ((((_la - 118)) & ~0x1f) === 0 && ((1 << (_la - 118)) & 26113) !== 0)) {
	                this.state = 1302;
	                this.declarationseq();
	            }

	            this.state = 1305;
	            this.match(CPP14Parser.RightBrace);
	            break;
	        case 10:
	        case 12:
	        case 13:
	        case 14:
	        case 18:
	        case 19:
	        case 20:
	        case 21:
	        case 22:
	        case 23:
	        case 26:
	        case 30:
	        case 33:
	        case 34:
	        case 36:
	        case 39:
	        case 41:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 52:
	        case 57:
	        case 60:
	        case 61:
	        case 63:
	        case 64:
	        case 66:
	        case 68:
	        case 70:
	        case 74:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 85:
	        case 87:
	        case 93:
	        case 97:
	        case 99:
	        case 118:
	        case 127:
	        case 128:
	        case 131:
	        case 132:
	            this.state = 1306;
	            this.declaration();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attributeSpecifierSeq() {
	    let localctx = new AttributeSpecifierSeqContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, CPP14Parser.RULE_attributeSpecifierSeq);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1310; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1309;
	        		this.attributeSpecifier();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1312; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,153, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attributeSpecifier() {
	    let localctx = new AttributeSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, CPP14Parser.RULE_attributeSpecifier);
	    var _la = 0;
	    try {
	        this.state = 1322;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 87:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1314;
	            this.match(CPP14Parser.LeftBracket);
	            this.state = 1315;
	            this.match(CPP14Parser.LeftBracket);
	            this.state = 1317;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===132) {
	                this.state = 1316;
	                this.attributeList();
	            }

	            this.state = 1319;
	            this.match(CPP14Parser.RightBracket);
	            this.state = 1320;
	            this.match(CPP14Parser.RightBracket);
	            break;
	        case 10:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1321;
	            this.alignmentspecifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alignmentspecifier() {
	    let localctx = new AlignmentspecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, CPP14Parser.RULE_alignmentspecifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1324;
	        this.match(CPP14Parser.Alignas);
	        this.state = 1325;
	        this.match(CPP14Parser.LeftParen);
	        this.state = 1328;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1326;
	            this.theTypeId();
	            break;

	        case 2:
	            this.state = 1327;
	            this.constantExpression();
	            break;

	        }
	        this.state = 1331;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===131) {
	            this.state = 1330;
	            this.match(CPP14Parser.Ellipsis);
	        }

	        this.state = 1333;
	        this.match(CPP14Parser.RightParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attributeList() {
	    let localctx = new AttributeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, CPP14Parser.RULE_attributeList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1335;
	        this.attribute();
	        this.state = 1340;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===122) {
	            this.state = 1336;
	            this.match(CPP14Parser.Comma);
	            this.state = 1337;
	            this.attribute();
	            this.state = 1342;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1344;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===131) {
	            this.state = 1343;
	            this.match(CPP14Parser.Ellipsis);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attribute() {
	    let localctx = new AttributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, CPP14Parser.RULE_attribute);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1349;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,160,this._ctx);
	        if(la_===1) {
	            this.state = 1346;
	            this.attributeNamespace();
	            this.state = 1347;
	            this.match(CPP14Parser.Doublecolon);

	        }
	        this.state = 1351;
	        this.match(CPP14Parser.Identifier);
	        this.state = 1353;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===85) {
	            this.state = 1352;
	            this.attributeArgumentClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attributeNamespace() {
	    let localctx = new AttributeNamespaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, CPP14Parser.RULE_attributeNamespace);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1355;
	        this.match(CPP14Parser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attributeArgumentClause() {
	    let localctx = new AttributeArgumentClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, CPP14Parser.RULE_attributeArgumentClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1357;
	        this.match(CPP14Parser.LeftParen);
	        this.state = 1359;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 4206886911) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1f) === 0 && ((1 << (_la - 128)) & 262143) !== 0)) {
	            this.state = 1358;
	            this.balancedTokenSeq();
	        }

	        this.state = 1361;
	        this.match(CPP14Parser.RightParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	balancedTokenSeq() {
	    let localctx = new BalancedTokenSeqContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, CPP14Parser.RULE_balancedTokenSeq);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1364; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1363;
	            this.balancedtoken();
	            this.state = 1366; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 4206886911) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1f) === 0 && ((1 << (_la - 128)) & 262143) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	balancedtoken() {
	    let localctx = new BalancedtokenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, CPP14Parser.RULE_balancedtoken);
	    var _la = 0;
	    try {
	        this.state = 1385;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 85:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1368;
	            this.match(CPP14Parser.LeftParen);
	            this.state = 1369;
	            this.balancedTokenSeq();
	            this.state = 1370;
	            this.match(CPP14Parser.RightParen);
	            break;
	        case 87:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1372;
	            this.match(CPP14Parser.LeftBracket);
	            this.state = 1373;
	            this.balancedTokenSeq();
	            this.state = 1374;
	            this.match(CPP14Parser.RightBracket);
	            break;
	        case 89:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1376;
	            this.match(CPP14Parser.LeftBrace);
	            this.state = 1377;
	            this.balancedTokenSeq();
	            this.state = 1378;
	            this.match(CPP14Parser.RightBrace);
	            break;
	        case 1:
	        case 2:
	        case 3:
	        case 4:
	        case 5:
	        case 6:
	        case 7:
	        case 8:
	        case 9:
	        case 10:
	        case 11:
	        case 12:
	        case 13:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 18:
	        case 19:
	        case 20:
	        case 21:
	        case 22:
	        case 23:
	        case 24:
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1381; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1380;
	            		_la = this._input.LA(1);
	            		if(_la<=0 || ((((_la - 85)) & ~0x1f) === 0 && ((1 << (_la - 85)) & 63) !== 0)) {
	            		this._errHandler.recoverInline(this);
	            		}
	            		else {
	            			this._errHandler.reportMatch(this);
	            		    this.consume();
	            		}
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1383; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,164, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initDeclaratorList() {
	    let localctx = new InitDeclaratorListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, CPP14Parser.RULE_initDeclaratorList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1387;
	        this.initDeclarator();
	        this.state = 1392;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===122) {
	            this.state = 1388;
	            this.match(CPP14Parser.Comma);
	            this.state = 1389;
	            this.initDeclarator();
	            this.state = 1394;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initDeclarator() {
	    let localctx = new InitDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, CPP14Parser.RULE_initDeclarator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1395;
	        this.declarator();
	        this.state = 1397;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 85)) & ~0x1f) === 0 && ((1 << (_la - 85)) & 65553) !== 0)) {
	            this.state = 1396;
	            this.initializer();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declarator() {
	    let localctx = new DeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, CPP14Parser.RULE_declarator);
	    try {
	        this.state = 1404;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,168,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1399;
	            this.pointerDeclarator();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1400;
	            this.noPointerDeclarator(0);
	            this.state = 1401;
	            this.parametersAndQualifiers();
	            this.state = 1402;
	            this.trailingReturnType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pointerDeclarator() {
	    let localctx = new PointerDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, CPP14Parser.RULE_pointerDeclarator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1412;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,170,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1406;
	                this.pointerOperator();
	                this.state = 1408;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===22) {
	                    this.state = 1407;
	                    this.match(CPP14Parser.Const);
	                }
	         
	            }
	            this.state = 1414;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,170,this._ctx);
	        }

	        this.state = 1415;
	        this.noPointerDeclarator(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	noPointerDeclarator(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new NoPointerDeclaratorContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 230;
	    this.enterRecursionRule(localctx, 230, CPP14Parser.RULE_noPointerDeclarator, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1426;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 26:
	        case 52:
	        case 99:
	        case 127:
	        case 131:
	        case 132:
	            this.state = 1418;
	            this.declaratorid();
	            this.state = 1420;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,171,this._ctx);
	            if(la_===1) {
	                this.state = 1419;
	                this.attributeSpecifierSeq();

	            }
	            break;
	        case 85:
	            this.state = 1422;
	            this.match(CPP14Parser.LeftParen);
	            this.state = 1423;
	            this.pointerDeclarator();
	            this.state = 1424;
	            this.match(CPP14Parser.RightParen);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1442;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,176,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new NoPointerDeclaratorContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_noPointerDeclarator);
	                this.state = 1428;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 1438;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 85:
	                    this.state = 1429;
	                    this.parametersAndQualifiers();
	                    break;
	                case 87:
	                    this.state = 1430;
	                    this.match(CPP14Parser.LeftBracket);
	                    this.state = 1432;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3575408894) !== 0) || ((((_la - 39)) & ~0x1f) === 0 && ((1 << (_la - 39)) & 1156066497) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 63378763) !== 0) || ((((_la - 120)) & ~0x1f) === 0 && ((1 << (_la - 120)) & 4227) !== 0)) {
	                        this.state = 1431;
	                        this.constantExpression();
	                    }

	                    this.state = 1434;
	                    this.match(CPP14Parser.RightBracket);
	                    this.state = 1436;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,174,this._ctx);
	                    if(la_===1) {
	                        this.state = 1435;
	                        this.attributeSpecifierSeq();

	                    }
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 1444;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,176,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	parametersAndQualifiers() {
	    let localctx = new ParametersAndQualifiersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, CPP14Parser.RULE_parametersAndQualifiers);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1445;
	        this.match(CPP14Parser.LeftParen);
	        this.state = 1447;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 1157391360) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 1493203275) !== 0) || ((((_la - 66)) & ~0x1f) === 0 && ((1 << (_la - 66)) & 2350353) !== 0) || _la===127 || _la===132) {
	            this.state = 1446;
	            this.parameterDeclarationClause();
	        }

	        this.state = 1449;
	        this.match(CPP14Parser.RightParen);
	        this.state = 1451;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,178,this._ctx);
	        if(la_===1) {
	            this.state = 1450;
	            this.cvqualifierseq();

	        }
	        this.state = 1454;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,179,this._ctx);
	        if(la_===1) {
	            this.state = 1453;
	            this.refqualifier();

	        }
	        this.state = 1457;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,180,this._ctx);
	        if(la_===1) {
	            this.state = 1456;
	            this.exceptionSpecification();

	        }
	        this.state = 1460;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,181,this._ctx);
	        if(la_===1) {
	            this.state = 1459;
	            this.attributeSpecifierSeq();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trailingReturnType() {
	    let localctx = new TrailingReturnTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, CPP14Parser.RULE_trailingReturnType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1462;
	        this.match(CPP14Parser.Arrow);
	        this.state = 1463;
	        this.trailingTypeSpecifierSeq();
	        this.state = 1465;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,182,this._ctx);
	        if(la_===1) {
	            this.state = 1464;
	            this.abstractDeclarator();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pointerOperator() {
	    let localctx = new PointerOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, CPP14Parser.RULE_pointerOperator);
	    var _la = 0;
	    try {
	        this.state = 1481;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 97:
	        case 118:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1467;
	            _la = this._input.LA(1);
	            if(!(_la===97 || _la===118)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1469;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,183,this._ctx);
	            if(la_===1) {
	                this.state = 1468;
	                this.attributeSpecifierSeq();

	            }
	            break;
	        case 26:
	        case 93:
	        case 127:
	        case 132:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1472;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===26 || _la===127 || _la===132) {
	                this.state = 1471;
	                this.nestedNameSpecifier(0);
	            }

	            this.state = 1474;
	            this.match(CPP14Parser.Star);
	            this.state = 1476;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,185,this._ctx);
	            if(la_===1) {
	                this.state = 1475;
	                this.attributeSpecifierSeq();

	            }
	            this.state = 1479;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,186,this._ctx);
	            if(la_===1) {
	                this.state = 1478;
	                this.cvqualifierseq();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cvqualifierseq() {
	    let localctx = new CvqualifierseqContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, CPP14Parser.RULE_cvqualifierseq);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1484; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1483;
	        		this.cvQualifier();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1486; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,188, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cvQualifier() {
	    let localctx = new CvQualifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, CPP14Parser.RULE_cvQualifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1488;
	        _la = this._input.LA(1);
	        if(!(_la===22 || _la===82)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	refqualifier() {
	    let localctx = new RefqualifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, CPP14Parser.RULE_refqualifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1490;
	        _la = this._input.LA(1);
	        if(!(_la===97 || _la===118)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaratorid() {
	    let localctx = new DeclaratoridContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, CPP14Parser.RULE_declaratorid);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1493;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===131) {
	            this.state = 1492;
	            this.match(CPP14Parser.Ellipsis);
	        }

	        this.state = 1495;
	        this.idExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	theTypeId() {
	    let localctx = new TheTypeIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, CPP14Parser.RULE_theTypeId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1497;
	        this.typeSpecifierSeq();
	        this.state = 1499;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,190,this._ctx);
	        if(la_===1) {
	            this.state = 1498;
	            this.abstractDeclarator();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	abstractDeclarator() {
	    let localctx = new AbstractDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, CPP14Parser.RULE_abstractDeclarator);
	    try {
	        this.state = 1509;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,192,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1501;
	            this.pointerAbstractDeclarator();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1503;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,191,this._ctx);
	            if(la_===1) {
	                this.state = 1502;
	                this.noPointerAbstractDeclarator(0);

	            }
	            this.state = 1505;
	            this.parametersAndQualifiers();
	            this.state = 1506;
	            this.trailingReturnType();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1508;
	            this.abstractPackDeclarator();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pointerAbstractDeclarator() {
	    let localctx = new PointerAbstractDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, CPP14Parser.RULE_pointerAbstractDeclarator);
	    var _la = 0;
	    try {
	        this.state = 1520;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 85:
	        case 87:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1511;
	            this.noPointerAbstractDeclarator(0);
	            break;
	        case 26:
	        case 93:
	        case 97:
	        case 118:
	        case 127:
	        case 132:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1513; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1512;
	                this.pointerOperator();
	                this.state = 1515; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===26 || ((((_la - 93)) & ~0x1f) === 0 && ((1 << (_la - 93)) & 33554449) !== 0) || _la===127 || _la===132);
	            this.state = 1518;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
	            if(la_===1) {
	                this.state = 1517;
	                this.noPointerAbstractDeclarator(0);

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	noPointerAbstractDeclarator(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new NoPointerAbstractDeclaratorContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 252;
	    this.enterRecursionRule(localctx, 252, CPP14Parser.RULE_noPointerAbstractDeclarator, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1536;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,198,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1523;
	            this.parametersAndQualifiers();
	            break;

	        case 2:
	            this.state = 1524;
	            this.match(CPP14Parser.LeftBracket);
	            this.state = 1526;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3575408894) !== 0) || ((((_la - 39)) & ~0x1f) === 0 && ((1 << (_la - 39)) & 1156066497) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 63378763) !== 0) || ((((_la - 120)) & ~0x1f) === 0 && ((1 << (_la - 120)) & 4227) !== 0)) {
	                this.state = 1525;
	                this.constantExpression();
	            }

	            this.state = 1528;
	            this.match(CPP14Parser.RightBracket);
	            this.state = 1530;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,197,this._ctx);
	            if(la_===1) {
	                this.state = 1529;
	                this.attributeSpecifierSeq();

	            }
	            break;

	        case 3:
	            this.state = 1532;
	            this.match(CPP14Parser.LeftParen);
	            this.state = 1533;
	            this.pointerAbstractDeclarator();
	            this.state = 1534;
	            this.match(CPP14Parser.RightParen);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1553;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,202,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new NoPointerAbstractDeclaratorContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_noPointerAbstractDeclarator);
	                this.state = 1538;
	                if (!( this.precpred(this._ctx, 4))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                }
	                this.state = 1549;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,201,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 1539;
	                    this.parametersAndQualifiers();
	                    break;

	                case 2:
	                    this.state = 1540;
	                    this.noPointerAbstractDeclarator(0);
	                    this.state = 1541;
	                    this.match(CPP14Parser.LeftBracket);
	                    this.state = 1543;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3575408894) !== 0) || ((((_la - 39)) & ~0x1f) === 0 && ((1 << (_la - 39)) & 1156066497) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 63378763) !== 0) || ((((_la - 120)) & ~0x1f) === 0 && ((1 << (_la - 120)) & 4227) !== 0)) {
	                        this.state = 1542;
	                        this.constantExpression();
	                    }

	                    this.state = 1545;
	                    this.match(CPP14Parser.RightBracket);
	                    this.state = 1547;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,200,this._ctx);
	                    if(la_===1) {
	                        this.state = 1546;
	                        this.attributeSpecifierSeq();

	                    }
	                    break;

	                } 
	            }
	            this.state = 1555;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,202,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	abstractPackDeclarator() {
	    let localctx = new AbstractPackDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, CPP14Parser.RULE_abstractPackDeclarator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1559;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===26 || ((((_la - 93)) & ~0x1f) === 0 && ((1 << (_la - 93)) & 33554449) !== 0) || _la===127 || _la===132) {
	            this.state = 1556;
	            this.pointerOperator();
	            this.state = 1561;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1562;
	        this.noPointerAbstractPackDeclarator(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	noPointerAbstractPackDeclarator(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new NoPointerAbstractPackDeclaratorContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 256;
	    this.enterRecursionRule(localctx, 256, CPP14Parser.RULE_noPointerAbstractPackDeclarator, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1565;
	        this.match(CPP14Parser.Ellipsis);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1581;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,207,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new NoPointerAbstractPackDeclaratorContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_noPointerAbstractPackDeclarator);
	                this.state = 1567;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 1577;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 85:
	                    this.state = 1568;
	                    this.parametersAndQualifiers();
	                    break;
	                case 87:
	                    this.state = 1569;
	                    this.match(CPP14Parser.LeftBracket);
	                    this.state = 1571;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3575408894) !== 0) || ((((_la - 39)) & ~0x1f) === 0 && ((1 << (_la - 39)) & 1156066497) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 63378763) !== 0) || ((((_la - 120)) & ~0x1f) === 0 && ((1 << (_la - 120)) & 4227) !== 0)) {
	                        this.state = 1570;
	                        this.constantExpression();
	                    }

	                    this.state = 1573;
	                    this.match(CPP14Parser.RightBracket);
	                    this.state = 1575;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,205,this._ctx);
	                    if(la_===1) {
	                        this.state = 1574;
	                        this.attributeSpecifierSeq();

	                    }
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 1583;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,207,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	parameterDeclarationClause() {
	    let localctx = new ParameterDeclarationClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, CPP14Parser.RULE_parameterDeclarationClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1584;
	        this.parameterDeclarationList();
	        this.state = 1589;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===122 || _la===131) {
	            this.state = 1586;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===122) {
	                this.state = 1585;
	                this.match(CPP14Parser.Comma);
	            }

	            this.state = 1588;
	            this.match(CPP14Parser.Ellipsis);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterDeclarationList() {
	    let localctx = new ParameterDeclarationListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, CPP14Parser.RULE_parameterDeclarationList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1591;
	        this.parameterDeclaration();
	        this.state = 1596;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,210,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1592;
	                this.match(CPP14Parser.Comma);
	                this.state = 1593;
	                this.parameterDeclaration(); 
	            }
	            this.state = 1598;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,210,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterDeclaration() {
	    let localctx = new ParameterDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, CPP14Parser.RULE_parameterDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1600;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===10 || _la===87) {
	            this.state = 1599;
	            this.attributeSpecifierSeq();
	        }

	        this.state = 1602;
	        this.declSpecifierSeq();

	        this.state = 1607;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,213,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1603;
	            this.declarator();
	            break;

	        case 2:
	            this.state = 1605;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,212,this._ctx);
	            if(la_===1) {
	                this.state = 1604;
	                this.abstractDeclarator();

	            }
	            break;

	        }
	        this.state = 1611;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===101) {
	            this.state = 1609;
	            this.match(CPP14Parser.Assign);
	            this.state = 1610;
	            this.initializerClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionDefinition() {
	    let localctx = new FunctionDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, CPP14Parser.RULE_functionDefinition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1614;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===10 || _la===87) {
	            this.state = 1613;
	            this.attributeSpecifierSeq();
	        }

	        this.state = 1617;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,216,this._ctx);
	        if(la_===1) {
	            this.state = 1616;
	            this.declSpecifierSeq();

	        }
	        this.state = 1619;
	        this.declarator();
	        this.state = 1621;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===38 || _la===53) {
	            this.state = 1620;
	            this.virtualSpecifierSeq();
	        }

	        this.state = 1623;
	        this.functionBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionBody() {
	    let localctx = new FunctionBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, CPP14Parser.RULE_functionBody);
	    var _la = 0;
	    try {
	        this.state = 1633;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 89:
	        case 126:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1626;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===126) {
	                this.state = 1625;
	                this.constructorInitializer();
	            }

	            this.state = 1628;
	            this.compoundStatement();
	            break;
	        case 73:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1629;
	            this.functionTryBlock();
	            break;
	        case 101:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1630;
	            this.match(CPP14Parser.Assign);
	            this.state = 1631;
	            _la = this._input.LA(1);
	            if(!(_la===27 || _la===28)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1632;
	            this.match(CPP14Parser.Semi);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initializer() {
	    let localctx = new InitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, CPP14Parser.RULE_initializer);
	    try {
	        this.state = 1640;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 89:
	        case 101:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1635;
	            this.braceOrEqualInitializer();
	            break;
	        case 85:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1636;
	            this.match(CPP14Parser.LeftParen);
	            this.state = 1637;
	            this.expressionList();
	            this.state = 1638;
	            this.match(CPP14Parser.RightParen);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	braceOrEqualInitializer() {
	    let localctx = new BraceOrEqualInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, CPP14Parser.RULE_braceOrEqualInitializer);
	    try {
	        this.state = 1645;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 101:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1642;
	            this.match(CPP14Parser.Assign);
	            this.state = 1643;
	            this.initializerClause();
	            break;
	        case 89:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1644;
	            this.bracedInitList();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initializerClause() {
	    let localctx = new InitializerClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, CPP14Parser.RULE_initializerClause);
	    try {
	        this.state = 1649;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 2:
	        case 3:
	        case 4:
	        case 5:
	        case 6:
	        case 7:
	        case 11:
	        case 13:
	        case 14:
	        case 18:
	        case 19:
	        case 20:
	        case 24:
	        case 26:
	        case 28:
	        case 30:
	        case 31:
	        case 39:
	        case 45:
	        case 46:
	        case 49:
	        case 50:
	        case 52:
	        case 58:
	        case 60:
	        case 61:
	        case 62:
	        case 65:
	        case 69:
	        case 71:
	        case 75:
	        case 76:
	        case 78:
	        case 81:
	        case 83:
	        case 85:
	        case 87:
	        case 91:
	        case 92:
	        case 93:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 120:
	        case 121:
	        case 127:
	        case 132:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1647;
	            this.assignmentExpression();
	            break;
	        case 89:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1648;
	            this.bracedInitList();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initializerList() {
	    let localctx = new InitializerListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, CPP14Parser.RULE_initializerList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1651;
	        this.initializerClause();
	        this.state = 1653;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===131) {
	            this.state = 1652;
	            this.match(CPP14Parser.Ellipsis);
	        }

	        this.state = 1662;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,225,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1655;
	                this.match(CPP14Parser.Comma);
	                this.state = 1656;
	                this.initializerClause();
	                this.state = 1658;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===131) {
	                    this.state = 1657;
	                    this.match(CPP14Parser.Ellipsis);
	                }
	         
	            }
	            this.state = 1664;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,225,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bracedInitList() {
	    let localctx = new BracedInitListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, CPP14Parser.RULE_bracedInitList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1665;
	        this.match(CPP14Parser.LeftBrace);
	        this.state = 1670;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3575408894) !== 0) || ((((_la - 39)) & ~0x1f) === 0 && ((1 << (_la - 39)) & 1156066497) !== 0) || ((((_la - 71)) & ~0x1f) === 0 && ((1 << (_la - 71)) & 1014322353) !== 0) || ((((_la - 120)) & ~0x1f) === 0 && ((1 << (_la - 120)) & 4227) !== 0)) {
	            this.state = 1666;
	            this.initializerList();
	            this.state = 1668;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===122) {
	                this.state = 1667;
	                this.match(CPP14Parser.Comma);
	            }

	        }

	        this.state = 1672;
	        this.match(CPP14Parser.RightBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	className() {
	    let localctx = new ClassNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, CPP14Parser.RULE_className);
	    try {
	        this.state = 1676;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,228,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1674;
	            this.match(CPP14Parser.Identifier);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1675;
	            this.simpleTemplateId();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classSpecifier() {
	    let localctx = new ClassSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, CPP14Parser.RULE_classSpecifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1678;
	        this.classHead();
	        this.state = 1679;
	        this.match(CPP14Parser.LeftBrace);
	        this.state = 1681;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 10)) & ~0x1f) === 0 && ((1 << (_la - 10)) & 2777759513) !== 0) || ((((_la - 44)) & ~0x1f) === 0 && ((1 << (_la - 44)) & 1163607311) !== 0) || ((((_la - 76)) & ~0x1f) === 0 && ((1 << (_la - 76)) & 10619647) !== 0) || ((((_la - 118)) & ~0x1f) === 0 && ((1 << (_la - 118)) & 26369) !== 0)) {
	            this.state = 1680;
	            this.memberSpecification();
	        }

	        this.state = 1683;
	        this.match(CPP14Parser.RightBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classHead() {
	    let localctx = new ClassHeadContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, CPP14Parser.RULE_classHead);
	    var _la = 0;
	    try {
	        this.state = 1708;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 21:
	        case 66:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1685;
	            this.classKey();
	            this.state = 1687;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===10 || _la===87) {
	                this.state = 1686;
	                this.attributeSpecifierSeq();
	            }

	            this.state = 1693;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===26 || _la===127 || _la===132) {
	                this.state = 1689;
	                this.classHeadName();
	                this.state = 1691;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===38) {
	                    this.state = 1690;
	                    this.classVirtSpecifier();
	                }

	            }

	            this.state = 1696;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===126) {
	                this.state = 1695;
	                this.baseClause();
	            }

	            break;
	        case 77:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1698;
	            this.match(CPP14Parser.Union);
	            this.state = 1700;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===10 || _la===87) {
	                this.state = 1699;
	                this.attributeSpecifierSeq();
	            }

	            this.state = 1706;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===26 || _la===127 || _la===132) {
	                this.state = 1702;
	                this.classHeadName();
	                this.state = 1704;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===38) {
	                    this.state = 1703;
	                    this.classVirtSpecifier();
	                }

	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classHeadName() {
	    let localctx = new ClassHeadNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, CPP14Parser.RULE_classHeadName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1711;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,238,this._ctx);
	        if(la_===1) {
	            this.state = 1710;
	            this.nestedNameSpecifier(0);

	        }
	        this.state = 1713;
	        this.className();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classVirtSpecifier() {
	    let localctx = new ClassVirtSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, CPP14Parser.RULE_classVirtSpecifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1715;
	        this.match(CPP14Parser.Final);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classKey() {
	    let localctx = new ClassKeyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, CPP14Parser.RULE_classKey);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1717;
	        _la = this._input.LA(1);
	        if(!(_la===21 || _la===66)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	memberSpecification() {
	    let localctx = new MemberSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, CPP14Parser.RULE_memberSpecification);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1723; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1723;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 10:
	            case 13:
	            case 14:
	            case 18:
	            case 19:
	            case 20:
	            case 21:
	            case 22:
	            case 23:
	            case 26:
	            case 30:
	            case 33:
	            case 34:
	            case 36:
	            case 39:
	            case 41:
	            case 44:
	            case 45:
	            case 46:
	            case 47:
	            case 52:
	            case 57:
	            case 60:
	            case 61:
	            case 63:
	            case 64:
	            case 66:
	            case 68:
	            case 70:
	            case 74:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 80:
	            case 81:
	            case 82:
	            case 83:
	            case 85:
	            case 87:
	            case 93:
	            case 97:
	            case 99:
	            case 118:
	            case 126:
	            case 127:
	            case 128:
	            case 131:
	            case 132:
	                this.state = 1719;
	                this.memberdeclaration();
	                break;
	            case 54:
	            case 55:
	            case 56:
	                this.state = 1720;
	                this.accessSpecifier();
	                this.state = 1721;
	                this.match(CPP14Parser.Colon);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1725; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 10)) & ~0x1f) === 0 && ((1 << (_la - 10)) & 2777759513) !== 0) || ((((_la - 44)) & ~0x1f) === 0 && ((1 << (_la - 44)) & 1163607311) !== 0) || ((((_la - 76)) & ~0x1f) === 0 && ((1 << (_la - 76)) & 10619647) !== 0) || ((((_la - 118)) & ~0x1f) === 0 && ((1 << (_la - 118)) & 26369) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	memberdeclaration() {
	    let localctx = new MemberdeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, CPP14Parser.RULE_memberdeclaration);
	    var _la = 0;
	    try {
	        this.state = 1743;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,244,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1728;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,241,this._ctx);
	            if(la_===1) {
	                this.state = 1727;
	                this.attributeSpecifierSeq();

	            }
	            this.state = 1731;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,242,this._ctx);
	            if(la_===1) {
	                this.state = 1730;
	                this.declSpecifierSeq();

	            }
	            this.state = 1734;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===10 || _la===26 || _la===52 || ((((_la - 85)) & ~0x1f) === 0 && ((1 << (_la - 85)) & 20741) !== 0) || ((((_la - 118)) & ~0x1f) === 0 && ((1 << (_la - 118)) & 25345) !== 0)) {
	                this.state = 1733;
	                this.memberDeclaratorList();
	            }

	            this.state = 1736;
	            this.match(CPP14Parser.Semi);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1737;
	            this.functionDefinition();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1738;
	            this.usingDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1739;
	            this.staticAssertDeclaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1740;
	            this.templateDeclaration();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1741;
	            this.aliasDeclaration();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1742;
	            this.emptyDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	memberDeclaratorList() {
	    let localctx = new MemberDeclaratorListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, CPP14Parser.RULE_memberDeclaratorList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1745;
	        this.memberDeclarator();
	        this.state = 1750;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===122) {
	            this.state = 1746;
	            this.match(CPP14Parser.Comma);
	            this.state = 1747;
	            this.memberDeclarator();
	            this.state = 1752;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	memberDeclarator() {
	    let localctx = new MemberDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, CPP14Parser.RULE_memberDeclarator);
	    var _la = 0;
	    try {
	        this.state = 1773;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,252,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1753;
	            this.declarator();
	            this.state = 1763;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,249,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1755;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===38 || _la===53) {
	                    this.state = 1754;
	                    this.virtualSpecifierSeq();
	                }

	                this.state = 1758;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===101) {
	                    this.state = 1757;
	                    this.pureSpecifier();
	                }

	                break;

	            case 2:
	                this.state = 1761;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===89 || _la===101) {
	                    this.state = 1760;
	                    this.braceOrEqualInitializer();
	                }

	                break;

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1766;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===132) {
	                this.state = 1765;
	                this.match(CPP14Parser.Identifier);
	            }

	            this.state = 1769;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===10 || _la===87) {
	                this.state = 1768;
	                this.attributeSpecifierSeq();
	            }

	            this.state = 1771;
	            this.match(CPP14Parser.Colon);
	            this.state = 1772;
	            this.constantExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	virtualSpecifierSeq() {
	    let localctx = new VirtualSpecifierSeqContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, CPP14Parser.RULE_virtualSpecifierSeq);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1776; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1775;
	            this.virtualSpecifier();
	            this.state = 1778; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===38 || _la===53);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	virtualSpecifier() {
	    let localctx = new VirtualSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, CPP14Parser.RULE_virtualSpecifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1780;
	        _la = this._input.LA(1);
	        if(!(_la===38 || _la===53)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pureSpecifier() {
	    let localctx = new PureSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, CPP14Parser.RULE_pureSpecifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1782;
	        this.match(CPP14Parser.Assign);
	        this.state = 1783;
	        localctx.val = this.match(CPP14Parser.OctalLiteral);
	        if((localctx.val == null ? null : localctx.val.text).compareTo("0")!=0) throw new InputMismatchException(this);
	        		
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	baseClause() {
	    let localctx = new BaseClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, CPP14Parser.RULE_baseClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1786;
	        this.match(CPP14Parser.Colon);
	        this.state = 1787;
	        this.baseSpecifierList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	baseSpecifierList() {
	    let localctx = new BaseSpecifierListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, CPP14Parser.RULE_baseSpecifierList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1789;
	        this.baseSpecifier();
	        this.state = 1791;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===131) {
	            this.state = 1790;
	            this.match(CPP14Parser.Ellipsis);
	        }

	        this.state = 1800;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===122) {
	            this.state = 1793;
	            this.match(CPP14Parser.Comma);
	            this.state = 1794;
	            this.baseSpecifier();
	            this.state = 1796;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===131) {
	                this.state = 1795;
	                this.match(CPP14Parser.Ellipsis);
	            }

	            this.state = 1802;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	baseSpecifier() {
	    let localctx = new BaseSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, CPP14Parser.RULE_baseSpecifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1804;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===10 || _la===87) {
	            this.state = 1803;
	            this.attributeSpecifierSeq();
	        }

	        this.state = 1818;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 26:
	        case 127:
	        case 132:
	            this.state = 1806;
	            this.baseTypeSpecifier();
	            break;
	        case 80:
	            this.state = 1807;
	            this.match(CPP14Parser.Virtual);
	            this.state = 1809;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 54)) & ~0x1f) === 0 && ((1 << (_la - 54)) & 7) !== 0)) {
	                this.state = 1808;
	                this.accessSpecifier();
	            }

	            this.state = 1811;
	            this.baseTypeSpecifier();
	            break;
	        case 54:
	        case 55:
	        case 56:
	            this.state = 1812;
	            this.accessSpecifier();
	            this.state = 1814;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===80) {
	                this.state = 1813;
	                this.match(CPP14Parser.Virtual);
	            }

	            this.state = 1816;
	            this.baseTypeSpecifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classOrDeclType() {
	    let localctx = new ClassOrDeclTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, CPP14Parser.RULE_classOrDeclType);
	    try {
	        this.state = 1825;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,262,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1821;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,261,this._ctx);
	            if(la_===1) {
	                this.state = 1820;
	                this.nestedNameSpecifier(0);

	            }
	            this.state = 1823;
	            this.className();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1824;
	            this.decltypeSpecifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	baseTypeSpecifier() {
	    let localctx = new BaseTypeSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, CPP14Parser.RULE_baseTypeSpecifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1827;
	        this.classOrDeclType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	accessSpecifier() {
	    let localctx = new AccessSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, CPP14Parser.RULE_accessSpecifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1829;
	        _la = this._input.LA(1);
	        if(!(((((_la - 54)) & ~0x1f) === 0 && ((1 << (_la - 54)) & 7) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conversionFunctionId() {
	    let localctx = new ConversionFunctionIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, CPP14Parser.RULE_conversionFunctionId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1831;
	        this.match(CPP14Parser.Operator);
	        this.state = 1832;
	        this.conversionTypeId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conversionTypeId() {
	    let localctx = new ConversionTypeIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, CPP14Parser.RULE_conversionTypeId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1834;
	        this.typeSpecifierSeq();
	        this.state = 1836;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,263,this._ctx);
	        if(la_===1) {
	            this.state = 1835;
	            this.conversionDeclarator();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conversionDeclarator() {
	    let localctx = new ConversionDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, CPP14Parser.RULE_conversionDeclarator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1838;
	        this.pointerOperator();
	        this.state = 1840;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,264,this._ctx);
	        if(la_===1) {
	            this.state = 1839;
	            this.conversionDeclarator();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructorInitializer() {
	    let localctx = new ConstructorInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, CPP14Parser.RULE_constructorInitializer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1842;
	        this.match(CPP14Parser.Colon);
	        this.state = 1843;
	        this.memInitializerList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	memInitializerList() {
	    let localctx = new MemInitializerListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, CPP14Parser.RULE_memInitializerList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1845;
	        this.memInitializer();
	        this.state = 1847;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===131) {
	            this.state = 1846;
	            this.match(CPP14Parser.Ellipsis);
	        }

	        this.state = 1856;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===122) {
	            this.state = 1849;
	            this.match(CPP14Parser.Comma);
	            this.state = 1850;
	            this.memInitializer();
	            this.state = 1852;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===131) {
	                this.state = 1851;
	                this.match(CPP14Parser.Ellipsis);
	            }

	            this.state = 1858;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	memInitializer() {
	    let localctx = new MemInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, CPP14Parser.RULE_memInitializer);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1859;
	        this.meminitializerid();
	        this.state = 1866;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 85:
	            this.state = 1860;
	            this.match(CPP14Parser.LeftParen);
	            this.state = 1862;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3575408894) !== 0) || ((((_la - 39)) & ~0x1f) === 0 && ((1 << (_la - 39)) & 1156066497) !== 0) || ((((_la - 71)) & ~0x1f) === 0 && ((1 << (_la - 71)) & 1014322353) !== 0) || ((((_la - 120)) & ~0x1f) === 0 && ((1 << (_la - 120)) & 4227) !== 0)) {
	                this.state = 1861;
	                this.expressionList();
	            }

	            this.state = 1864;
	            this.match(CPP14Parser.RightParen);
	            break;
	        case 89:
	            this.state = 1865;
	            this.bracedInitList();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	meminitializerid() {
	    let localctx = new MeminitializeridContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, CPP14Parser.RULE_meminitializerid);
	    try {
	        this.state = 1870;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,270,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1868;
	            this.classOrDeclType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1869;
	            this.match(CPP14Parser.Identifier);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operatorFunctionId() {
	    let localctx = new OperatorFunctionIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, CPP14Parser.RULE_operatorFunctionId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1872;
	        this.match(CPP14Parser.Operator);
	        this.state = 1873;
	        this.theOperator();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literalOperatorId() {
	    let localctx = new LiteralOperatorIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, CPP14Parser.RULE_literalOperatorId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1875;
	        this.match(CPP14Parser.Operator);
	        this.state = 1879;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 4:
	            this.state = 1876;
	            this.match(CPP14Parser.StringLiteral);
	            this.state = 1877;
	            this.match(CPP14Parser.Identifier);
	            break;
	        case 140:
	            this.state = 1878;
	            this.match(CPP14Parser.UserDefinedStringLiteral);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	templateDeclaration() {
	    let localctx = new TemplateDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, CPP14Parser.RULE_templateDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1881;
	        this.match(CPP14Parser.Template);
	        this.state = 1882;
	        this.match(CPP14Parser.Less);
	        this.state = 1883;
	        this.templateparameterList();
	        this.state = 1884;
	        this.match(CPP14Parser.Greater);
	        this.state = 1885;
	        this.declaration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	templateparameterList() {
	    let localctx = new TemplateparameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, CPP14Parser.RULE_templateparameterList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1887;
	        this.templateParameter();
	        this.state = 1892;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===122) {
	            this.state = 1888;
	            this.match(CPP14Parser.Comma);
	            this.state = 1889;
	            this.templateParameter();
	            this.state = 1894;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	templateParameter() {
	    let localctx = new TemplateParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, CPP14Parser.RULE_templateParameter);
	    try {
	        this.state = 1897;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,273,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1895;
	            this.typeParameter();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1896;
	            this.parameterDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameter() {
	    let localctx = new TypeParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, CPP14Parser.RULE_typeParameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1908;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 21:
	        case 68:
	            this.state = 1904;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 1899;
	                this.match(CPP14Parser.Template);
	                this.state = 1900;
	                this.match(CPP14Parser.Less);
	                this.state = 1901;
	                this.templateparameterList();
	                this.state = 1902;
	                this.match(CPP14Parser.Greater);
	            }

	            this.state = 1906;
	            this.match(CPP14Parser.Class);
	            break;
	        case 76:
	            this.state = 1907;
	            this.match(CPP14Parser.Typename_);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1921;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,279,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1911;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===131) {
	                this.state = 1910;
	                this.match(CPP14Parser.Ellipsis);
	            }

	            this.state = 1914;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===132) {
	                this.state = 1913;
	                this.match(CPP14Parser.Identifier);
	            }

	            break;

	        case 2:
	            this.state = 1917;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===132) {
	                this.state = 1916;
	                this.match(CPP14Parser.Identifier);
	            }

	            this.state = 1919;
	            this.match(CPP14Parser.Assign);
	            this.state = 1920;
	            this.theTypeId();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleTemplateId() {
	    let localctx = new SimpleTemplateIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, CPP14Parser.RULE_simpleTemplateId);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1923;
	        this.templateName();
	        this.state = 1924;
	        this.match(CPP14Parser.Less);
	        this.state = 1926;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3581700350) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 973811777) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 475479059) !== 0) || ((((_la - 97)) & ~0x1f) === 0 && ((1 << (_la - 97)) & 1098907663) !== 0) || _la===132) {
	            this.state = 1925;
	            this.templateArgumentList();
	        }

	        this.state = 1928;
	        this.match(CPP14Parser.Greater);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	templateId() {
	    let localctx = new TemplateIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, CPP14Parser.RULE_templateId);
	    var _la = 0;
	    try {
	        this.state = 1941;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 132:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1930;
	            this.simpleTemplateId();
	            break;
	        case 52:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1933;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,281,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1931;
	                this.operatorFunctionId();
	                break;

	            case 2:
	                this.state = 1932;
	                this.literalOperatorId();
	                break;

	            }
	            this.state = 1935;
	            this.match(CPP14Parser.Less);
	            this.state = 1937;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3581700350) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 973811777) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 475479059) !== 0) || ((((_la - 97)) & ~0x1f) === 0 && ((1 << (_la - 97)) & 1098907663) !== 0) || _la===132) {
	                this.state = 1936;
	                this.templateArgumentList();
	            }

	            this.state = 1939;
	            this.match(CPP14Parser.Greater);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	templateName() {
	    let localctx = new TemplateNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, CPP14Parser.RULE_templateName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1943;
	        this.match(CPP14Parser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	templateArgumentList() {
	    let localctx = new TemplateArgumentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, CPP14Parser.RULE_templateArgumentList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1945;
	        this.templateArgument();
	        this.state = 1947;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===131) {
	            this.state = 1946;
	            this.match(CPP14Parser.Ellipsis);
	        }

	        this.state = 1956;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===122) {
	            this.state = 1949;
	            this.match(CPP14Parser.Comma);
	            this.state = 1950;
	            this.templateArgument();
	            this.state = 1952;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===131) {
	                this.state = 1951;
	                this.match(CPP14Parser.Ellipsis);
	            }

	            this.state = 1958;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	templateArgument() {
	    let localctx = new TemplateArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, CPP14Parser.RULE_templateArgument);
	    try {
	        this.state = 1962;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,287,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1959;
	            this.theTypeId();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1960;
	            this.constantExpression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1961;
	            this.idExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeNameSpecifier() {
	    let localctx = new TypeNameSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, CPP14Parser.RULE_typeNameSpecifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1964;
	        this.match(CPP14Parser.Typename_);
	        this.state = 1965;
	        this.nestedNameSpecifier(0);
	        this.state = 1971;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,289,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1966;
	            this.match(CPP14Parser.Identifier);
	            break;

	        case 2:
	            this.state = 1968;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 1967;
	                this.match(CPP14Parser.Template);
	            }

	            this.state = 1970;
	            this.simpleTemplateId();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explicitInstantiation() {
	    let localctx = new ExplicitInstantiationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, CPP14Parser.RULE_explicitInstantiation);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1974;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===36) {
	            this.state = 1973;
	            this.match(CPP14Parser.Extern);
	        }

	        this.state = 1976;
	        this.match(CPP14Parser.Template);
	        this.state = 1977;
	        this.declaration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explicitSpecialization() {
	    let localctx = new ExplicitSpecializationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, CPP14Parser.RULE_explicitSpecialization);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1979;
	        this.match(CPP14Parser.Template);
	        this.state = 1980;
	        this.match(CPP14Parser.Less);
	        this.state = 1981;
	        this.match(CPP14Parser.Greater);
	        this.state = 1982;
	        this.declaration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tryBlock() {
	    let localctx = new TryBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, CPP14Parser.RULE_tryBlock);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1984;
	        this.match(CPP14Parser.Try);
	        this.state = 1985;
	        this.compoundStatement();
	        this.state = 1986;
	        this.handlerSeq();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionTryBlock() {
	    let localctx = new FunctionTryBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, CPP14Parser.RULE_functionTryBlock);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1988;
	        this.match(CPP14Parser.Try);
	        this.state = 1990;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===126) {
	            this.state = 1989;
	            this.constructorInitializer();
	        }

	        this.state = 1992;
	        this.compoundStatement();
	        this.state = 1993;
	        this.handlerSeq();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	handlerSeq() {
	    let localctx = new HandlerSeqContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, CPP14Parser.RULE_handlerSeq);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1996; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1995;
	            this.handler();
	            this.state = 1998; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===17);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	handler() {
	    let localctx = new HandlerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, CPP14Parser.RULE_handler);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2000;
	        this.match(CPP14Parser.Catch);
	        this.state = 2001;
	        this.match(CPP14Parser.LeftParen);
	        this.state = 2002;
	        this.exceptionDeclaration();
	        this.state = 2003;
	        this.match(CPP14Parser.RightParen);
	        this.state = 2004;
	        this.compoundStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exceptionDeclaration() {
	    let localctx = new ExceptionDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, CPP14Parser.RULE_exceptionDeclaration);
	    var _la = 0;
	    try {
	        this.state = 2015;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 10:
	        case 13:
	        case 14:
	        case 18:
	        case 19:
	        case 20:
	        case 21:
	        case 22:
	        case 26:
	        case 30:
	        case 33:
	        case 39:
	        case 45:
	        case 46:
	        case 60:
	        case 61:
	        case 66:
	        case 76:
	        case 77:
	        case 78:
	        case 81:
	        case 82:
	        case 83:
	        case 87:
	        case 127:
	        case 132:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2007;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===10 || _la===87) {
	                this.state = 2006;
	                this.attributeSpecifierSeq();
	            }

	            this.state = 2009;
	            this.typeSpecifierSeq();
	            this.state = 2012;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,294,this._ctx);
	            if(la_===1) {
	                this.state = 2010;
	                this.declarator();

	            } else if(la_===2) {
	                this.state = 2011;
	                this.abstractDeclarator();

	            }
	            break;
	        case 131:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2014;
	            this.match(CPP14Parser.Ellipsis);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	throwExpression() {
	    let localctx = new ThrowExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, CPP14Parser.RULE_throwExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2017;
	        this.match(CPP14Parser.Throw);
	        this.state = 2019;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3575408894) !== 0) || ((((_la - 39)) & ~0x1f) === 0 && ((1 << (_la - 39)) & 1156066497) !== 0) || ((((_la - 71)) & ~0x1f) === 0 && ((1 << (_la - 71)) & 1014060209) !== 0) || ((((_la - 120)) & ~0x1f) === 0 && ((1 << (_la - 120)) & 4227) !== 0)) {
	            this.state = 2018;
	            this.assignmentExpression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exceptionSpecification() {
	    let localctx = new ExceptionSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, CPP14Parser.RULE_exceptionSpecification);
	    try {
	        this.state = 2023;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 71:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2021;
	            this.dynamicExceptionSpecification();
	            break;
	        case 50:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2022;
	            this.noeExceptSpecification();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dynamicExceptionSpecification() {
	    let localctx = new DynamicExceptionSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, CPP14Parser.RULE_dynamicExceptionSpecification);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2025;
	        this.match(CPP14Parser.Throw);
	        this.state = 2026;
	        this.match(CPP14Parser.LeftParen);
	        this.state = 2028;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 1149001728) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 402665537) !== 0) || ((((_la - 66)) & ~0x1f) === 0 && ((1 << (_la - 66)) & 236545) !== 0) || _la===127 || _la===132) {
	            this.state = 2027;
	            this.typeIdList();
	        }

	        this.state = 2030;
	        this.match(CPP14Parser.RightParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeIdList() {
	    let localctx = new TypeIdListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, CPP14Parser.RULE_typeIdList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2032;
	        this.theTypeId();
	        this.state = 2034;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===131) {
	            this.state = 2033;
	            this.match(CPP14Parser.Ellipsis);
	        }

	        this.state = 2043;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===122) {
	            this.state = 2036;
	            this.match(CPP14Parser.Comma);
	            this.state = 2037;
	            this.theTypeId();
	            this.state = 2039;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===131) {
	                this.state = 2038;
	                this.match(CPP14Parser.Ellipsis);
	            }

	            this.state = 2045;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	noeExceptSpecification() {
	    let localctx = new NoeExceptSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, CPP14Parser.RULE_noeExceptSpecification);
	    try {
	        this.state = 2052;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,302,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2046;
	            this.match(CPP14Parser.Noexcept);
	            this.state = 2047;
	            this.match(CPP14Parser.LeftParen);
	            this.state = 2048;
	            this.constantExpression();
	            this.state = 2049;
	            this.match(CPP14Parser.RightParen);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2051;
	            this.match(CPP14Parser.Noexcept);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	theOperator() {
	    let localctx = new TheOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, CPP14Parser.RULE_theOperator);
	    try {
	        this.state = 2105;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,305,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2054;
	            this.match(CPP14Parser.New);
	            this.state = 2057;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,303,this._ctx);
	            if(la_===1) {
	                this.state = 2055;
	                this.match(CPP14Parser.LeftBracket);
	                this.state = 2056;
	                this.match(CPP14Parser.RightBracket);

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2059;
	            this.match(CPP14Parser.Delete);
	            this.state = 2062;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,304,this._ctx);
	            if(la_===1) {
	                this.state = 2060;
	                this.match(CPP14Parser.LeftBracket);
	                this.state = 2061;
	                this.match(CPP14Parser.RightBracket);

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2064;
	            this.match(CPP14Parser.Plus);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2065;
	            this.match(CPP14Parser.Minus);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2066;
	            this.match(CPP14Parser.Star);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2067;
	            this.match(CPP14Parser.Div);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2068;
	            this.match(CPP14Parser.Mod);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2069;
	            this.match(CPP14Parser.Caret);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2070;
	            this.match(CPP14Parser.And);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2071;
	            this.match(CPP14Parser.Or);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2072;
	            this.match(CPP14Parser.Tilde);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2073;
	            this.match(CPP14Parser.Not);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 2074;
	            this.match(CPP14Parser.Assign);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 2075;
	            this.match(CPP14Parser.Greater);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 2076;
	            this.match(CPP14Parser.Less);
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 2077;
	            this.match(CPP14Parser.GreaterEqual);
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 2078;
	            this.match(CPP14Parser.PlusAssign);
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 2079;
	            this.match(CPP14Parser.MinusAssign);
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 2080;
	            this.match(CPP14Parser.StarAssign);
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 2081;
	            this.match(CPP14Parser.ModAssign);
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 2082;
	            this.match(CPP14Parser.XorAssign);
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 2083;
	            this.match(CPP14Parser.AndAssign);
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 2084;
	            this.match(CPP14Parser.OrAssign);
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 2085;
	            this.match(CPP14Parser.Less);
	            this.state = 2086;
	            this.match(CPP14Parser.Less);
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 2087;
	            this.match(CPP14Parser.Greater);
	            this.state = 2088;
	            this.match(CPP14Parser.Greater);
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 2089;
	            this.match(CPP14Parser.RightShiftAssign);
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 2090;
	            this.match(CPP14Parser.LeftShiftAssign);
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 2091;
	            this.match(CPP14Parser.Equal);
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 2092;
	            this.match(CPP14Parser.NotEqual);
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 2093;
	            this.match(CPP14Parser.LessEqual);
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 2094;
	            this.match(CPP14Parser.AndAnd);
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 2095;
	            this.match(CPP14Parser.OrOr);
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 2096;
	            this.match(CPP14Parser.PlusPlus);
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 2097;
	            this.match(CPP14Parser.MinusMinus);
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 2098;
	            this.match(CPP14Parser.Comma);
	            break;

	        case 36:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 2099;
	            this.match(CPP14Parser.ArrowStar);
	            break;

	        case 37:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 2100;
	            this.match(CPP14Parser.Arrow);
	            break;

	        case 38:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 2101;
	            this.match(CPP14Parser.LeftParen);
	            this.state = 2102;
	            this.match(CPP14Parser.RightParen);
	            break;

	        case 39:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 2103;
	            this.match(CPP14Parser.LeftBracket);
	            this.state = 2104;
	            this.match(CPP14Parser.RightBracket);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, CPP14Parser.RULE_literal);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2107;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 254) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

CPP14Parser.EOF = antlr4.Token.EOF;
CPP14Parser.IntegerLiteral = 1;
CPP14Parser.CharacterLiteral = 2;
CPP14Parser.FloatingLiteral = 3;
CPP14Parser.StringLiteral = 4;
CPP14Parser.BooleanLiteral = 5;
CPP14Parser.PointerLiteral = 6;
CPP14Parser.UserDefinedLiteral = 7;
CPP14Parser.MultiLineMacro = 8;
CPP14Parser.Directive = 9;
CPP14Parser.Alignas = 10;
CPP14Parser.Alignof = 11;
CPP14Parser.Asm = 12;
CPP14Parser.Auto = 13;
CPP14Parser.Bool = 14;
CPP14Parser.Break = 15;
CPP14Parser.Case = 16;
CPP14Parser.Catch = 17;
CPP14Parser.Char = 18;
CPP14Parser.Char16 = 19;
CPP14Parser.Char32 = 20;
CPP14Parser.Class = 21;
CPP14Parser.Const = 22;
CPP14Parser.Constexpr = 23;
CPP14Parser.Const_cast = 24;
CPP14Parser.Continue = 25;
CPP14Parser.Decltype = 26;
CPP14Parser.Default = 27;
CPP14Parser.Delete = 28;
CPP14Parser.Do = 29;
CPP14Parser.Double = 30;
CPP14Parser.Dynamic_cast = 31;
CPP14Parser.Else = 32;
CPP14Parser.Enum = 33;
CPP14Parser.Explicit = 34;
CPP14Parser.Export = 35;
CPP14Parser.Extern = 36;
CPP14Parser.False_ = 37;
CPP14Parser.Final = 38;
CPP14Parser.Float = 39;
CPP14Parser.For = 40;
CPP14Parser.Friend = 41;
CPP14Parser.Goto = 42;
CPP14Parser.If = 43;
CPP14Parser.Inline = 44;
CPP14Parser.Int = 45;
CPP14Parser.Long = 46;
CPP14Parser.Mutable = 47;
CPP14Parser.Namespace = 48;
CPP14Parser.New = 49;
CPP14Parser.Noexcept = 50;
CPP14Parser.Nullptr = 51;
CPP14Parser.Operator = 52;
CPP14Parser.Override = 53;
CPP14Parser.Private = 54;
CPP14Parser.Protected = 55;
CPP14Parser.Public = 56;
CPP14Parser.Register = 57;
CPP14Parser.Reinterpret_cast = 58;
CPP14Parser.Return = 59;
CPP14Parser.Short = 60;
CPP14Parser.Signed = 61;
CPP14Parser.Sizeof = 62;
CPP14Parser.Static = 63;
CPP14Parser.Static_assert = 64;
CPP14Parser.Static_cast = 65;
CPP14Parser.Struct = 66;
CPP14Parser.Switch = 67;
CPP14Parser.Template = 68;
CPP14Parser.This = 69;
CPP14Parser.Thread_local = 70;
CPP14Parser.Throw = 71;
CPP14Parser.True_ = 72;
CPP14Parser.Try = 73;
CPP14Parser.Typedef = 74;
CPP14Parser.Typeid_ = 75;
CPP14Parser.Typename_ = 76;
CPP14Parser.Union = 77;
CPP14Parser.Unsigned = 78;
CPP14Parser.Using = 79;
CPP14Parser.Virtual = 80;
CPP14Parser.Void = 81;
CPP14Parser.Volatile = 82;
CPP14Parser.Wchar = 83;
CPP14Parser.While = 84;
CPP14Parser.LeftParen = 85;
CPP14Parser.RightParen = 86;
CPP14Parser.LeftBracket = 87;
CPP14Parser.RightBracket = 88;
CPP14Parser.LeftBrace = 89;
CPP14Parser.RightBrace = 90;
CPP14Parser.Plus = 91;
CPP14Parser.Minus = 92;
CPP14Parser.Star = 93;
CPP14Parser.Div = 94;
CPP14Parser.Mod = 95;
CPP14Parser.Caret = 96;
CPP14Parser.And = 97;
CPP14Parser.Or = 98;
CPP14Parser.Tilde = 99;
CPP14Parser.Not = 100;
CPP14Parser.Assign = 101;
CPP14Parser.Less = 102;
CPP14Parser.Greater = 103;
CPP14Parser.PlusAssign = 104;
CPP14Parser.MinusAssign = 105;
CPP14Parser.StarAssign = 106;
CPP14Parser.DivAssign = 107;
CPP14Parser.ModAssign = 108;
CPP14Parser.XorAssign = 109;
CPP14Parser.AndAssign = 110;
CPP14Parser.OrAssign = 111;
CPP14Parser.LeftShiftAssign = 112;
CPP14Parser.RightShiftAssign = 113;
CPP14Parser.Equal = 114;
CPP14Parser.NotEqual = 115;
CPP14Parser.LessEqual = 116;
CPP14Parser.GreaterEqual = 117;
CPP14Parser.AndAnd = 118;
CPP14Parser.OrOr = 119;
CPP14Parser.PlusPlus = 120;
CPP14Parser.MinusMinus = 121;
CPP14Parser.Comma = 122;
CPP14Parser.ArrowStar = 123;
CPP14Parser.Arrow = 124;
CPP14Parser.Question = 125;
CPP14Parser.Colon = 126;
CPP14Parser.Doublecolon = 127;
CPP14Parser.Semi = 128;
CPP14Parser.Dot = 129;
CPP14Parser.DotStar = 130;
CPP14Parser.Ellipsis = 131;
CPP14Parser.Identifier = 132;
CPP14Parser.DecimalLiteral = 133;
CPP14Parser.OctalLiteral = 134;
CPP14Parser.HexadecimalLiteral = 135;
CPP14Parser.BinaryLiteral = 136;
CPP14Parser.Integersuffix = 137;
CPP14Parser.UserDefinedIntegerLiteral = 138;
CPP14Parser.UserDefinedFloatingLiteral = 139;
CPP14Parser.UserDefinedStringLiteral = 140;
CPP14Parser.UserDefinedCharacterLiteral = 141;
CPP14Parser.Whitespace = 142;
CPP14Parser.Newline = 143;
CPP14Parser.BlockComment = 144;
CPP14Parser.LineComment = 145;

CPP14Parser.RULE_translationUnit = 0;
CPP14Parser.RULE_primaryExpression = 1;
CPP14Parser.RULE_idExpression = 2;
CPP14Parser.RULE_unqualifiedId = 3;
CPP14Parser.RULE_qualifiedId = 4;
CPP14Parser.RULE_nestedNameSpecifier = 5;
CPP14Parser.RULE_lambdaExpression = 6;
CPP14Parser.RULE_lambdaIntroducer = 7;
CPP14Parser.RULE_lambdaCapture = 8;
CPP14Parser.RULE_captureDefault = 9;
CPP14Parser.RULE_captureList = 10;
CPP14Parser.RULE_capture = 11;
CPP14Parser.RULE_simpleCapture = 12;
CPP14Parser.RULE_initcapture = 13;
CPP14Parser.RULE_lambdaDeclarator = 14;
CPP14Parser.RULE_postfixExpression = 15;
CPP14Parser.RULE_typeIdOfTheTypeId = 16;
CPP14Parser.RULE_expressionList = 17;
CPP14Parser.RULE_pseudoDestructorName = 18;
CPP14Parser.RULE_unaryExpression = 19;
CPP14Parser.RULE_unaryOperator = 20;
CPP14Parser.RULE_newExpression = 21;
CPP14Parser.RULE_newPlacement = 22;
CPP14Parser.RULE_newTypeId = 23;
CPP14Parser.RULE_newDeclarator = 24;
CPP14Parser.RULE_noPointerNewDeclarator = 25;
CPP14Parser.RULE_newInitializer = 26;
CPP14Parser.RULE_deleteExpression = 27;
CPP14Parser.RULE_noExceptExpression = 28;
CPP14Parser.RULE_castExpression = 29;
CPP14Parser.RULE_pointerMemberExpression = 30;
CPP14Parser.RULE_multiplicativeExpression = 31;
CPP14Parser.RULE_additiveExpression = 32;
CPP14Parser.RULE_shiftExpression = 33;
CPP14Parser.RULE_shiftOperator = 34;
CPP14Parser.RULE_relationalExpression = 35;
CPP14Parser.RULE_equalityExpression = 36;
CPP14Parser.RULE_andExpression = 37;
CPP14Parser.RULE_exclusiveOrExpression = 38;
CPP14Parser.RULE_inclusiveOrExpression = 39;
CPP14Parser.RULE_logicalAndExpression = 40;
CPP14Parser.RULE_logicalOrExpression = 41;
CPP14Parser.RULE_conditionalExpression = 42;
CPP14Parser.RULE_assignmentExpression = 43;
CPP14Parser.RULE_assignmentOperator = 44;
CPP14Parser.RULE_expression = 45;
CPP14Parser.RULE_constantExpression = 46;
CPP14Parser.RULE_statement = 47;
CPP14Parser.RULE_labeledStatement = 48;
CPP14Parser.RULE_expressionStatement = 49;
CPP14Parser.RULE_compoundStatement = 50;
CPP14Parser.RULE_statementSeq = 51;
CPP14Parser.RULE_selectionStatement = 52;
CPP14Parser.RULE_condition = 53;
CPP14Parser.RULE_iterationStatement = 54;
CPP14Parser.RULE_forInitStatement = 55;
CPP14Parser.RULE_forRangeDeclaration = 56;
CPP14Parser.RULE_forRangeInitializer = 57;
CPP14Parser.RULE_jumpStatement = 58;
CPP14Parser.RULE_declarationStatement = 59;
CPP14Parser.RULE_declarationseq = 60;
CPP14Parser.RULE_declaration = 61;
CPP14Parser.RULE_blockDeclaration = 62;
CPP14Parser.RULE_aliasDeclaration = 63;
CPP14Parser.RULE_simpleDeclaration = 64;
CPP14Parser.RULE_staticAssertDeclaration = 65;
CPP14Parser.RULE_emptyDeclaration = 66;
CPP14Parser.RULE_attributeDeclaration = 67;
CPP14Parser.RULE_declSpecifier = 68;
CPP14Parser.RULE_declSpecifierSeq = 69;
CPP14Parser.RULE_storageClassSpecifier = 70;
CPP14Parser.RULE_functionSpecifier = 71;
CPP14Parser.RULE_typedefName = 72;
CPP14Parser.RULE_typeSpecifier = 73;
CPP14Parser.RULE_trailingTypeSpecifier = 74;
CPP14Parser.RULE_typeSpecifierSeq = 75;
CPP14Parser.RULE_trailingTypeSpecifierSeq = 76;
CPP14Parser.RULE_simpleTypeLengthModifier = 77;
CPP14Parser.RULE_simpleTypeSignednessModifier = 78;
CPP14Parser.RULE_simpleTypeSpecifier = 79;
CPP14Parser.RULE_theTypeName = 80;
CPP14Parser.RULE_decltypeSpecifier = 81;
CPP14Parser.RULE_elaboratedTypeSpecifier = 82;
CPP14Parser.RULE_enumName = 83;
CPP14Parser.RULE_enumSpecifier = 84;
CPP14Parser.RULE_enumHead = 85;
CPP14Parser.RULE_opaqueEnumDeclaration = 86;
CPP14Parser.RULE_enumkey = 87;
CPP14Parser.RULE_enumbase = 88;
CPP14Parser.RULE_enumeratorList = 89;
CPP14Parser.RULE_enumeratorDefinition = 90;
CPP14Parser.RULE_enumerator = 91;
CPP14Parser.RULE_namespaceName = 92;
CPP14Parser.RULE_originalNamespaceName = 93;
CPP14Parser.RULE_namespaceDefinition = 94;
CPP14Parser.RULE_namespaceAlias = 95;
CPP14Parser.RULE_namespaceAliasDefinition = 96;
CPP14Parser.RULE_qualifiednamespacespecifier = 97;
CPP14Parser.RULE_usingDeclaration = 98;
CPP14Parser.RULE_usingDirective = 99;
CPP14Parser.RULE_asmDefinition = 100;
CPP14Parser.RULE_linkageSpecification = 101;
CPP14Parser.RULE_attributeSpecifierSeq = 102;
CPP14Parser.RULE_attributeSpecifier = 103;
CPP14Parser.RULE_alignmentspecifier = 104;
CPP14Parser.RULE_attributeList = 105;
CPP14Parser.RULE_attribute = 106;
CPP14Parser.RULE_attributeNamespace = 107;
CPP14Parser.RULE_attributeArgumentClause = 108;
CPP14Parser.RULE_balancedTokenSeq = 109;
CPP14Parser.RULE_balancedtoken = 110;
CPP14Parser.RULE_initDeclaratorList = 111;
CPP14Parser.RULE_initDeclarator = 112;
CPP14Parser.RULE_declarator = 113;
CPP14Parser.RULE_pointerDeclarator = 114;
CPP14Parser.RULE_noPointerDeclarator = 115;
CPP14Parser.RULE_parametersAndQualifiers = 116;
CPP14Parser.RULE_trailingReturnType = 117;
CPP14Parser.RULE_pointerOperator = 118;
CPP14Parser.RULE_cvqualifierseq = 119;
CPP14Parser.RULE_cvQualifier = 120;
CPP14Parser.RULE_refqualifier = 121;
CPP14Parser.RULE_declaratorid = 122;
CPP14Parser.RULE_theTypeId = 123;
CPP14Parser.RULE_abstractDeclarator = 124;
CPP14Parser.RULE_pointerAbstractDeclarator = 125;
CPP14Parser.RULE_noPointerAbstractDeclarator = 126;
CPP14Parser.RULE_abstractPackDeclarator = 127;
CPP14Parser.RULE_noPointerAbstractPackDeclarator = 128;
CPP14Parser.RULE_parameterDeclarationClause = 129;
CPP14Parser.RULE_parameterDeclarationList = 130;
CPP14Parser.RULE_parameterDeclaration = 131;
CPP14Parser.RULE_functionDefinition = 132;
CPP14Parser.RULE_functionBody = 133;
CPP14Parser.RULE_initializer = 134;
CPP14Parser.RULE_braceOrEqualInitializer = 135;
CPP14Parser.RULE_initializerClause = 136;
CPP14Parser.RULE_initializerList = 137;
CPP14Parser.RULE_bracedInitList = 138;
CPP14Parser.RULE_className = 139;
CPP14Parser.RULE_classSpecifier = 140;
CPP14Parser.RULE_classHead = 141;
CPP14Parser.RULE_classHeadName = 142;
CPP14Parser.RULE_classVirtSpecifier = 143;
CPP14Parser.RULE_classKey = 144;
CPP14Parser.RULE_memberSpecification = 145;
CPP14Parser.RULE_memberdeclaration = 146;
CPP14Parser.RULE_memberDeclaratorList = 147;
CPP14Parser.RULE_memberDeclarator = 148;
CPP14Parser.RULE_virtualSpecifierSeq = 149;
CPP14Parser.RULE_virtualSpecifier = 150;
CPP14Parser.RULE_pureSpecifier = 151;
CPP14Parser.RULE_baseClause = 152;
CPP14Parser.RULE_baseSpecifierList = 153;
CPP14Parser.RULE_baseSpecifier = 154;
CPP14Parser.RULE_classOrDeclType = 155;
CPP14Parser.RULE_baseTypeSpecifier = 156;
CPP14Parser.RULE_accessSpecifier = 157;
CPP14Parser.RULE_conversionFunctionId = 158;
CPP14Parser.RULE_conversionTypeId = 159;
CPP14Parser.RULE_conversionDeclarator = 160;
CPP14Parser.RULE_constructorInitializer = 161;
CPP14Parser.RULE_memInitializerList = 162;
CPP14Parser.RULE_memInitializer = 163;
CPP14Parser.RULE_meminitializerid = 164;
CPP14Parser.RULE_operatorFunctionId = 165;
CPP14Parser.RULE_literalOperatorId = 166;
CPP14Parser.RULE_templateDeclaration = 167;
CPP14Parser.RULE_templateparameterList = 168;
CPP14Parser.RULE_templateParameter = 169;
CPP14Parser.RULE_typeParameter = 170;
CPP14Parser.RULE_simpleTemplateId = 171;
CPP14Parser.RULE_templateId = 172;
CPP14Parser.RULE_templateName = 173;
CPP14Parser.RULE_templateArgumentList = 174;
CPP14Parser.RULE_templateArgument = 175;
CPP14Parser.RULE_typeNameSpecifier = 176;
CPP14Parser.RULE_explicitInstantiation = 177;
CPP14Parser.RULE_explicitSpecialization = 178;
CPP14Parser.RULE_tryBlock = 179;
CPP14Parser.RULE_functionTryBlock = 180;
CPP14Parser.RULE_handlerSeq = 181;
CPP14Parser.RULE_handler = 182;
CPP14Parser.RULE_exceptionDeclaration = 183;
CPP14Parser.RULE_throwExpression = 184;
CPP14Parser.RULE_exceptionSpecification = 185;
CPP14Parser.RULE_dynamicExceptionSpecification = 186;
CPP14Parser.RULE_typeIdList = 187;
CPP14Parser.RULE_noeExceptSpecification = 188;
CPP14Parser.RULE_theOperator = 189;
CPP14Parser.RULE_literal = 190;

class TranslationUnitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_translationUnit;
    }

	EOF() {
	    return this.getToken(CPP14Parser.EOF, 0);
	};

	declarationseq() {
	    return this.getTypedRuleContext(DeclarationseqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterTranslationUnit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitTranslationUnit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitTranslationUnit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_primaryExpression;
    }

	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	This() {
	    return this.getToken(CPP14Parser.This, 0);
	};

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	idExpression() {
	    return this.getTypedRuleContext(IdExpressionContext,0);
	};

	lambdaExpression() {
	    return this.getTypedRuleContext(LambdaExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterPrimaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitPrimaryExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitPrimaryExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_idExpression;
    }

	unqualifiedId() {
	    return this.getTypedRuleContext(UnqualifiedIdContext,0);
	};

	qualifiedId() {
	    return this.getTypedRuleContext(QualifiedIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterIdExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitIdExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitIdExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnqualifiedIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_unqualifiedId;
    }

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	operatorFunctionId() {
	    return this.getTypedRuleContext(OperatorFunctionIdContext,0);
	};

	conversionFunctionId() {
	    return this.getTypedRuleContext(ConversionFunctionIdContext,0);
	};

	literalOperatorId() {
	    return this.getTypedRuleContext(LiteralOperatorIdContext,0);
	};

	Tilde() {
	    return this.getToken(CPP14Parser.Tilde, 0);
	};

	className() {
	    return this.getTypedRuleContext(ClassNameContext,0);
	};

	decltypeSpecifier() {
	    return this.getTypedRuleContext(DecltypeSpecifierContext,0);
	};

	templateId() {
	    return this.getTypedRuleContext(TemplateIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterUnqualifiedId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitUnqualifiedId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitUnqualifiedId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QualifiedIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_qualifiedId;
    }

	nestedNameSpecifier() {
	    return this.getTypedRuleContext(NestedNameSpecifierContext,0);
	};

	unqualifiedId() {
	    return this.getTypedRuleContext(UnqualifiedIdContext,0);
	};

	Template() {
	    return this.getToken(CPP14Parser.Template, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterQualifiedId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitQualifiedId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitQualifiedId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NestedNameSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_nestedNameSpecifier;
    }

	Doublecolon() {
	    return this.getToken(CPP14Parser.Doublecolon, 0);
	};

	theTypeName() {
	    return this.getTypedRuleContext(TheTypeNameContext,0);
	};

	namespaceName() {
	    return this.getTypedRuleContext(NamespaceNameContext,0);
	};

	decltypeSpecifier() {
	    return this.getTypedRuleContext(DecltypeSpecifierContext,0);
	};

	nestedNameSpecifier() {
	    return this.getTypedRuleContext(NestedNameSpecifierContext,0);
	};

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	simpleTemplateId() {
	    return this.getTypedRuleContext(SimpleTemplateIdContext,0);
	};

	Template() {
	    return this.getToken(CPP14Parser.Template, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterNestedNameSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitNestedNameSpecifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitNestedNameSpecifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LambdaExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_lambdaExpression;
    }

	lambdaIntroducer() {
	    return this.getTypedRuleContext(LambdaIntroducerContext,0);
	};

	compoundStatement() {
	    return this.getTypedRuleContext(CompoundStatementContext,0);
	};

	lambdaDeclarator() {
	    return this.getTypedRuleContext(LambdaDeclaratorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterLambdaExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitLambdaExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitLambdaExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LambdaIntroducerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_lambdaIntroducer;
    }

	LeftBracket() {
	    return this.getToken(CPP14Parser.LeftBracket, 0);
	};

	RightBracket() {
	    return this.getToken(CPP14Parser.RightBracket, 0);
	};

	lambdaCapture() {
	    return this.getTypedRuleContext(LambdaCaptureContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterLambdaIntroducer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitLambdaIntroducer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitLambdaIntroducer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LambdaCaptureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_lambdaCapture;
    }

	captureList() {
	    return this.getTypedRuleContext(CaptureListContext,0);
	};

	captureDefault() {
	    return this.getTypedRuleContext(CaptureDefaultContext,0);
	};

	Comma() {
	    return this.getToken(CPP14Parser.Comma, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterLambdaCapture(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitLambdaCapture(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitLambdaCapture(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaptureDefaultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_captureDefault;
    }

	And() {
	    return this.getToken(CPP14Parser.And, 0);
	};

	Assign() {
	    return this.getToken(CPP14Parser.Assign, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterCaptureDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitCaptureDefault(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitCaptureDefault(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaptureListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_captureList;
    }

	capture = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CaptureContext);
	    } else {
	        return this.getTypedRuleContext(CaptureContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Comma);
	    } else {
	        return this.getToken(CPP14Parser.Comma, i);
	    }
	};


	Ellipsis() {
	    return this.getToken(CPP14Parser.Ellipsis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterCaptureList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitCaptureList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitCaptureList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaptureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_capture;
    }

	simpleCapture() {
	    return this.getTypedRuleContext(SimpleCaptureContext,0);
	};

	initcapture() {
	    return this.getTypedRuleContext(InitcaptureContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterCapture(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitCapture(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitCapture(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleCaptureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_simpleCapture;
    }

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	And() {
	    return this.getToken(CPP14Parser.And, 0);
	};

	This() {
	    return this.getToken(CPP14Parser.This, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterSimpleCapture(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitSimpleCapture(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitSimpleCapture(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InitcaptureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_initcapture;
    }

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	initializer() {
	    return this.getTypedRuleContext(InitializerContext,0);
	};

	And() {
	    return this.getToken(CPP14Parser.And, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterInitcapture(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitInitcapture(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitInitcapture(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LambdaDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_lambdaDeclarator;
    }

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	parameterDeclarationClause() {
	    return this.getTypedRuleContext(ParameterDeclarationClauseContext,0);
	};

	Mutable() {
	    return this.getToken(CPP14Parser.Mutable, 0);
	};

	exceptionSpecification() {
	    return this.getTypedRuleContext(ExceptionSpecificationContext,0);
	};

	attributeSpecifierSeq() {
	    return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);
	};

	trailingReturnType() {
	    return this.getTypedRuleContext(TrailingReturnTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterLambdaDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitLambdaDeclarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitLambdaDeclarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PostfixExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_postfixExpression;
    }

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	simpleTypeSpecifier() {
	    return this.getTypedRuleContext(SimpleTypeSpecifierContext,0);
	};

	typeNameSpecifier() {
	    return this.getTypedRuleContext(TypeNameSpecifierContext,0);
	};

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	bracedInitList() {
	    return this.getTypedRuleContext(BracedInitListContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	Less() {
	    return this.getToken(CPP14Parser.Less, 0);
	};

	theTypeId() {
	    return this.getTypedRuleContext(TheTypeIdContext,0);
	};

	Greater() {
	    return this.getToken(CPP14Parser.Greater, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	Dynamic_cast() {
	    return this.getToken(CPP14Parser.Dynamic_cast, 0);
	};

	Static_cast() {
	    return this.getToken(CPP14Parser.Static_cast, 0);
	};

	Reinterpret_cast() {
	    return this.getToken(CPP14Parser.Reinterpret_cast, 0);
	};

	Const_cast() {
	    return this.getToken(CPP14Parser.Const_cast, 0);
	};

	typeIdOfTheTypeId() {
	    return this.getTypedRuleContext(TypeIdOfTheTypeIdContext,0);
	};

	postfixExpression() {
	    return this.getTypedRuleContext(PostfixExpressionContext,0);
	};

	LeftBracket() {
	    return this.getToken(CPP14Parser.LeftBracket, 0);
	};

	RightBracket() {
	    return this.getToken(CPP14Parser.RightBracket, 0);
	};

	Dot() {
	    return this.getToken(CPP14Parser.Dot, 0);
	};

	Arrow() {
	    return this.getToken(CPP14Parser.Arrow, 0);
	};

	idExpression() {
	    return this.getTypedRuleContext(IdExpressionContext,0);
	};

	pseudoDestructorName() {
	    return this.getTypedRuleContext(PseudoDestructorNameContext,0);
	};

	Template() {
	    return this.getToken(CPP14Parser.Template, 0);
	};

	PlusPlus() {
	    return this.getToken(CPP14Parser.PlusPlus, 0);
	};

	MinusMinus() {
	    return this.getToken(CPP14Parser.MinusMinus, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterPostfixExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitPostfixExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitPostfixExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeIdOfTheTypeIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_typeIdOfTheTypeId;
    }

	Typeid_() {
	    return this.getToken(CPP14Parser.Typeid_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterTypeIdOfTheTypeId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitTypeIdOfTheTypeId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitTypeIdOfTheTypeId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_expressionList;
    }

	initializerList() {
	    return this.getTypedRuleContext(InitializerListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterExpressionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitExpressionList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitExpressionList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PseudoDestructorNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_pseudoDestructorName;
    }

	Tilde() {
	    return this.getToken(CPP14Parser.Tilde, 0);
	};

	theTypeName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TheTypeNameContext);
	    } else {
	        return this.getTypedRuleContext(TheTypeNameContext,i);
	    }
	};

	nestedNameSpecifier() {
	    return this.getTypedRuleContext(NestedNameSpecifierContext,0);
	};

	Doublecolon() {
	    return this.getToken(CPP14Parser.Doublecolon, 0);
	};

	Template() {
	    return this.getToken(CPP14Parser.Template, 0);
	};

	simpleTemplateId() {
	    return this.getTypedRuleContext(SimpleTemplateIdContext,0);
	};

	decltypeSpecifier() {
	    return this.getTypedRuleContext(DecltypeSpecifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterPseudoDestructorName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitPseudoDestructorName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitPseudoDestructorName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_unaryExpression;
    }

	postfixExpression() {
	    return this.getTypedRuleContext(PostfixExpressionContext,0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	PlusPlus() {
	    return this.getToken(CPP14Parser.PlusPlus, 0);
	};

	MinusMinus() {
	    return this.getToken(CPP14Parser.MinusMinus, 0);
	};

	unaryOperator() {
	    return this.getTypedRuleContext(UnaryOperatorContext,0);
	};

	Sizeof() {
	    return this.getToken(CPP14Parser.Sizeof, 0);
	};

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	theTypeId() {
	    return this.getTypedRuleContext(TheTypeIdContext,0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	Ellipsis() {
	    return this.getToken(CPP14Parser.Ellipsis, 0);
	};

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	Alignof() {
	    return this.getToken(CPP14Parser.Alignof, 0);
	};

	noExceptExpression() {
	    return this.getTypedRuleContext(NoExceptExpressionContext,0);
	};

	newExpression() {
	    return this.getTypedRuleContext(NewExpressionContext,0);
	};

	deleteExpression() {
	    return this.getTypedRuleContext(DeleteExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterUnaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitUnaryExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitUnaryExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnaryOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_unaryOperator;
    }

	Or() {
	    return this.getToken(CPP14Parser.Or, 0);
	};

	Star() {
	    return this.getToken(CPP14Parser.Star, 0);
	};

	And() {
	    return this.getToken(CPP14Parser.And, 0);
	};

	Plus() {
	    return this.getToken(CPP14Parser.Plus, 0);
	};

	Tilde() {
	    return this.getToken(CPP14Parser.Tilde, 0);
	};

	Minus() {
	    return this.getToken(CPP14Parser.Minus, 0);
	};

	Not() {
	    return this.getToken(CPP14Parser.Not, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterUnaryOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitUnaryOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitUnaryOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NewExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_newExpression;
    }

	New() {
	    return this.getToken(CPP14Parser.New, 0);
	};

	newTypeId() {
	    return this.getTypedRuleContext(NewTypeIdContext,0);
	};

	Doublecolon() {
	    return this.getToken(CPP14Parser.Doublecolon, 0);
	};

	newPlacement() {
	    return this.getTypedRuleContext(NewPlacementContext,0);
	};

	newInitializer() {
	    return this.getTypedRuleContext(NewInitializerContext,0);
	};

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	theTypeId() {
	    return this.getTypedRuleContext(TheTypeIdContext,0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterNewExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitNewExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitNewExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NewPlacementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_newPlacement;
    }

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterNewPlacement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitNewPlacement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitNewPlacement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NewTypeIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_newTypeId;
    }

	typeSpecifierSeq() {
	    return this.getTypedRuleContext(TypeSpecifierSeqContext,0);
	};

	newDeclarator() {
	    return this.getTypedRuleContext(NewDeclaratorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterNewTypeId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitNewTypeId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitNewTypeId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NewDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_newDeclarator;
    }

	pointerOperator() {
	    return this.getTypedRuleContext(PointerOperatorContext,0);
	};

	newDeclarator() {
	    return this.getTypedRuleContext(NewDeclaratorContext,0);
	};

	noPointerNewDeclarator() {
	    return this.getTypedRuleContext(NoPointerNewDeclaratorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterNewDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitNewDeclarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitNewDeclarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NoPointerNewDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_noPointerNewDeclarator;
    }

	LeftBracket() {
	    return this.getToken(CPP14Parser.LeftBracket, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RightBracket() {
	    return this.getToken(CPP14Parser.RightBracket, 0);
	};

	attributeSpecifierSeq() {
	    return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);
	};

	noPointerNewDeclarator() {
	    return this.getTypedRuleContext(NoPointerNewDeclaratorContext,0);
	};

	constantExpression() {
	    return this.getTypedRuleContext(ConstantExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterNoPointerNewDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitNoPointerNewDeclarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitNoPointerNewDeclarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NewInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_newInitializer;
    }

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	bracedInitList() {
	    return this.getTypedRuleContext(BracedInitListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterNewInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitNewInitializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitNewInitializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeleteExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_deleteExpression;
    }

	Delete() {
	    return this.getToken(CPP14Parser.Delete, 0);
	};

	castExpression() {
	    return this.getTypedRuleContext(CastExpressionContext,0);
	};

	Doublecolon() {
	    return this.getToken(CPP14Parser.Doublecolon, 0);
	};

	LeftBracket() {
	    return this.getToken(CPP14Parser.LeftBracket, 0);
	};

	RightBracket() {
	    return this.getToken(CPP14Parser.RightBracket, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterDeleteExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitDeleteExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitDeleteExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NoExceptExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_noExceptExpression;
    }

	Noexcept() {
	    return this.getToken(CPP14Parser.Noexcept, 0);
	};

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterNoExceptExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitNoExceptExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitNoExceptExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CastExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_castExpression;
    }

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	theTypeId() {
	    return this.getTypedRuleContext(TheTypeIdContext,0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	castExpression() {
	    return this.getTypedRuleContext(CastExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterCastExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitCastExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitCastExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PointerMemberExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_pointerMemberExpression;
    }

	castExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CastExpressionContext);
	    } else {
	        return this.getTypedRuleContext(CastExpressionContext,i);
	    }
	};

	DotStar = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.DotStar);
	    } else {
	        return this.getToken(CPP14Parser.DotStar, i);
	    }
	};


	ArrowStar = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.ArrowStar);
	    } else {
	        return this.getToken(CPP14Parser.ArrowStar, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterPointerMemberExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitPointerMemberExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitPointerMemberExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MultiplicativeExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_multiplicativeExpression;
    }

	pointerMemberExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PointerMemberExpressionContext);
	    } else {
	        return this.getTypedRuleContext(PointerMemberExpressionContext,i);
	    }
	};

	Star = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Star);
	    } else {
	        return this.getToken(CPP14Parser.Star, i);
	    }
	};


	Div = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Div);
	    } else {
	        return this.getToken(CPP14Parser.Div, i);
	    }
	};


	Mod = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Mod);
	    } else {
	        return this.getToken(CPP14Parser.Mod, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterMultiplicativeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitMultiplicativeExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitMultiplicativeExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AdditiveExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_additiveExpression;
    }

	multiplicativeExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultiplicativeExpressionContext);
	    } else {
	        return this.getTypedRuleContext(MultiplicativeExpressionContext,i);
	    }
	};

	Plus = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Plus);
	    } else {
	        return this.getToken(CPP14Parser.Plus, i);
	    }
	};


	Minus = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Minus);
	    } else {
	        return this.getToken(CPP14Parser.Minus, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterAdditiveExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitAdditiveExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitAdditiveExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShiftExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_shiftExpression;
    }

	additiveExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AdditiveExpressionContext);
	    } else {
	        return this.getTypedRuleContext(AdditiveExpressionContext,i);
	    }
	};

	shiftOperator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ShiftOperatorContext);
	    } else {
	        return this.getTypedRuleContext(ShiftOperatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterShiftExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitShiftExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitShiftExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShiftOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_shiftOperator;
    }

	Greater = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Greater);
	    } else {
	        return this.getToken(CPP14Parser.Greater, i);
	    }
	};


	Less = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Less);
	    } else {
	        return this.getToken(CPP14Parser.Less, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterShiftOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitShiftOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitShiftOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RelationalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_relationalExpression;
    }

	shiftExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ShiftExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ShiftExpressionContext,i);
	    }
	};

	Less = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Less);
	    } else {
	        return this.getToken(CPP14Parser.Less, i);
	    }
	};


	Greater = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Greater);
	    } else {
	        return this.getToken(CPP14Parser.Greater, i);
	    }
	};


	LessEqual = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.LessEqual);
	    } else {
	        return this.getToken(CPP14Parser.LessEqual, i);
	    }
	};


	GreaterEqual = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.GreaterEqual);
	    } else {
	        return this.getToken(CPP14Parser.GreaterEqual, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterRelationalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitRelationalExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitRelationalExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EqualityExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_equalityExpression;
    }

	relationalExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RelationalExpressionContext);
	    } else {
	        return this.getTypedRuleContext(RelationalExpressionContext,i);
	    }
	};

	Equal = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Equal);
	    } else {
	        return this.getToken(CPP14Parser.Equal, i);
	    }
	};


	NotEqual = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.NotEqual);
	    } else {
	        return this.getToken(CPP14Parser.NotEqual, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterEqualityExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitEqualityExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitEqualityExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_andExpression;
    }

	equalityExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EqualityExpressionContext);
	    } else {
	        return this.getTypedRuleContext(EqualityExpressionContext,i);
	    }
	};

	And = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.And);
	    } else {
	        return this.getToken(CPP14Parser.And, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitAndExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitAndExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExclusiveOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_exclusiveOrExpression;
    }

	andExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AndExpressionContext);
	    } else {
	        return this.getTypedRuleContext(AndExpressionContext,i);
	    }
	};

	Caret = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Caret);
	    } else {
	        return this.getToken(CPP14Parser.Caret, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterExclusiveOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitExclusiveOrExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitExclusiveOrExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InclusiveOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_inclusiveOrExpression;
    }

	exclusiveOrExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExclusiveOrExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExclusiveOrExpressionContext,i);
	    }
	};

	Or = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Or);
	    } else {
	        return this.getToken(CPP14Parser.Or, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterInclusiveOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitInclusiveOrExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitInclusiveOrExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LogicalAndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_logicalAndExpression;
    }

	inclusiveOrExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InclusiveOrExpressionContext);
	    } else {
	        return this.getTypedRuleContext(InclusiveOrExpressionContext,i);
	    }
	};

	AndAnd = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.AndAnd);
	    } else {
	        return this.getToken(CPP14Parser.AndAnd, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterLogicalAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitLogicalAndExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitLogicalAndExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LogicalOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_logicalOrExpression;
    }

	logicalAndExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LogicalAndExpressionContext);
	    } else {
	        return this.getTypedRuleContext(LogicalAndExpressionContext,i);
	    }
	};

	OrOr = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.OrOr);
	    } else {
	        return this.getToken(CPP14Parser.OrOr, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterLogicalOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitLogicalOrExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitLogicalOrExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConditionalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_conditionalExpression;
    }

	logicalOrExpression() {
	    return this.getTypedRuleContext(LogicalOrExpressionContext,0);
	};

	Question() {
	    return this.getToken(CPP14Parser.Question, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	Colon() {
	    return this.getToken(CPP14Parser.Colon, 0);
	};

	assignmentExpression() {
	    return this.getTypedRuleContext(AssignmentExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterConditionalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitConditionalExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitConditionalExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssignmentExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_assignmentExpression;
    }

	conditionalExpression() {
	    return this.getTypedRuleContext(ConditionalExpressionContext,0);
	};

	logicalOrExpression() {
	    return this.getTypedRuleContext(LogicalOrExpressionContext,0);
	};

	assignmentOperator() {
	    return this.getTypedRuleContext(AssignmentOperatorContext,0);
	};

	initializerClause() {
	    return this.getTypedRuleContext(InitializerClauseContext,0);
	};

	throwExpression() {
	    return this.getTypedRuleContext(ThrowExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterAssignmentExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitAssignmentExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitAssignmentExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssignmentOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_assignmentOperator;
    }

	Assign() {
	    return this.getToken(CPP14Parser.Assign, 0);
	};

	StarAssign() {
	    return this.getToken(CPP14Parser.StarAssign, 0);
	};

	DivAssign() {
	    return this.getToken(CPP14Parser.DivAssign, 0);
	};

	ModAssign() {
	    return this.getToken(CPP14Parser.ModAssign, 0);
	};

	PlusAssign() {
	    return this.getToken(CPP14Parser.PlusAssign, 0);
	};

	MinusAssign() {
	    return this.getToken(CPP14Parser.MinusAssign, 0);
	};

	RightShiftAssign() {
	    return this.getToken(CPP14Parser.RightShiftAssign, 0);
	};

	LeftShiftAssign() {
	    return this.getToken(CPP14Parser.LeftShiftAssign, 0);
	};

	AndAssign() {
	    return this.getToken(CPP14Parser.AndAssign, 0);
	};

	XorAssign() {
	    return this.getToken(CPP14Parser.XorAssign, 0);
	};

	OrAssign() {
	    return this.getToken(CPP14Parser.OrAssign, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterAssignmentOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitAssignmentOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitAssignmentOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_expression;
    }

	assignmentExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssignmentExpressionContext);
	    } else {
	        return this.getTypedRuleContext(AssignmentExpressionContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Comma);
	    } else {
	        return this.getToken(CPP14Parser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstantExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_constantExpression;
    }

	conditionalExpression() {
	    return this.getTypedRuleContext(ConditionalExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterConstantExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitConstantExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitConstantExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_statement;
    }

	labeledStatement() {
	    return this.getTypedRuleContext(LabeledStatementContext,0);
	};

	declarationStatement() {
	    return this.getTypedRuleContext(DeclarationStatementContext,0);
	};

	expressionStatement() {
	    return this.getTypedRuleContext(ExpressionStatementContext,0);
	};

	compoundStatement() {
	    return this.getTypedRuleContext(CompoundStatementContext,0);
	};

	selectionStatement() {
	    return this.getTypedRuleContext(SelectionStatementContext,0);
	};

	iterationStatement() {
	    return this.getTypedRuleContext(IterationStatementContext,0);
	};

	jumpStatement() {
	    return this.getTypedRuleContext(JumpStatementContext,0);
	};

	tryBlock() {
	    return this.getTypedRuleContext(TryBlockContext,0);
	};

	attributeSpecifierSeq() {
	    return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabeledStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_labeledStatement;
    }

	Colon() {
	    return this.getToken(CPP14Parser.Colon, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	Case() {
	    return this.getToken(CPP14Parser.Case, 0);
	};

	constantExpression() {
	    return this.getTypedRuleContext(ConstantExpressionContext,0);
	};

	Default() {
	    return this.getToken(CPP14Parser.Default, 0);
	};

	attributeSpecifierSeq() {
	    return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterLabeledStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitLabeledStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitLabeledStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_expressionStatement;
    }

	Semi() {
	    return this.getToken(CPP14Parser.Semi, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterExpressionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitExpressionStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitExpressionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CompoundStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_compoundStatement;
    }

	LeftBrace() {
	    return this.getToken(CPP14Parser.LeftBrace, 0);
	};

	RightBrace() {
	    return this.getToken(CPP14Parser.RightBrace, 0);
	};

	statementSeq() {
	    return this.getTypedRuleContext(StatementSeqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterCompoundStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitCompoundStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitCompoundStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementSeqContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_statementSeq;
    }

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterStatementSeq(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitStatementSeq(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitStatementSeq(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_selectionStatement;
    }

	If() {
	    return this.getToken(CPP14Parser.If, 0);
	};

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	Else() {
	    return this.getToken(CPP14Parser.Else, 0);
	};

	Switch() {
	    return this.getToken(CPP14Parser.Switch, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterSelectionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitSelectionStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitSelectionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_condition;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	declSpecifierSeq() {
	    return this.getTypedRuleContext(DeclSpecifierSeqContext,0);
	};

	declarator() {
	    return this.getTypedRuleContext(DeclaratorContext,0);
	};

	Assign() {
	    return this.getToken(CPP14Parser.Assign, 0);
	};

	initializerClause() {
	    return this.getTypedRuleContext(InitializerClauseContext,0);
	};

	bracedInitList() {
	    return this.getTypedRuleContext(BracedInitListContext,0);
	};

	attributeSpecifierSeq() {
	    return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitCondition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitCondition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IterationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_iterationStatement;
    }

	While() {
	    return this.getToken(CPP14Parser.While, 0);
	};

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	Do() {
	    return this.getToken(CPP14Parser.Do, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	Semi() {
	    return this.getToken(CPP14Parser.Semi, 0);
	};

	For() {
	    return this.getToken(CPP14Parser.For, 0);
	};

	forInitStatement() {
	    return this.getTypedRuleContext(ForInitStatementContext,0);
	};

	forRangeDeclaration() {
	    return this.getTypedRuleContext(ForRangeDeclarationContext,0);
	};

	Colon() {
	    return this.getToken(CPP14Parser.Colon, 0);
	};

	forRangeInitializer() {
	    return this.getTypedRuleContext(ForRangeInitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterIterationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitIterationStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitIterationStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForInitStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_forInitStatement;
    }

	expressionStatement() {
	    return this.getTypedRuleContext(ExpressionStatementContext,0);
	};

	simpleDeclaration() {
	    return this.getTypedRuleContext(SimpleDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterForInitStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitForInitStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitForInitStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForRangeDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_forRangeDeclaration;
    }

	declSpecifierSeq() {
	    return this.getTypedRuleContext(DeclSpecifierSeqContext,0);
	};

	declarator() {
	    return this.getTypedRuleContext(DeclaratorContext,0);
	};

	attributeSpecifierSeq() {
	    return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterForRangeDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitForRangeDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitForRangeDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForRangeInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_forRangeInitializer;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	bracedInitList() {
	    return this.getTypedRuleContext(BracedInitListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterForRangeInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitForRangeInitializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitForRangeInitializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JumpStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_jumpStatement;
    }

	Semi() {
	    return this.getToken(CPP14Parser.Semi, 0);
	};

	Break() {
	    return this.getToken(CPP14Parser.Break, 0);
	};

	Continue() {
	    return this.getToken(CPP14Parser.Continue, 0);
	};

	Return() {
	    return this.getToken(CPP14Parser.Return, 0);
	};

	Goto() {
	    return this.getToken(CPP14Parser.Goto, 0);
	};

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	bracedInitList() {
	    return this.getTypedRuleContext(BracedInitListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterJumpStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitJumpStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitJumpStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeclarationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_declarationStatement;
    }

	blockDeclaration() {
	    return this.getTypedRuleContext(BlockDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterDeclarationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitDeclarationStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitDeclarationStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeclarationseqContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_declarationseq;
    }

	declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclarationContext);
	    } else {
	        return this.getTypedRuleContext(DeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterDeclarationseq(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitDeclarationseq(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitDeclarationseq(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_declaration;
    }

	blockDeclaration() {
	    return this.getTypedRuleContext(BlockDeclarationContext,0);
	};

	functionDefinition() {
	    return this.getTypedRuleContext(FunctionDefinitionContext,0);
	};

	templateDeclaration() {
	    return this.getTypedRuleContext(TemplateDeclarationContext,0);
	};

	explicitInstantiation() {
	    return this.getTypedRuleContext(ExplicitInstantiationContext,0);
	};

	explicitSpecialization() {
	    return this.getTypedRuleContext(ExplicitSpecializationContext,0);
	};

	linkageSpecification() {
	    return this.getTypedRuleContext(LinkageSpecificationContext,0);
	};

	namespaceDefinition() {
	    return this.getTypedRuleContext(NamespaceDefinitionContext,0);
	};

	emptyDeclaration() {
	    return this.getTypedRuleContext(EmptyDeclarationContext,0);
	};

	attributeDeclaration() {
	    return this.getTypedRuleContext(AttributeDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BlockDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_blockDeclaration;
    }

	simpleDeclaration() {
	    return this.getTypedRuleContext(SimpleDeclarationContext,0);
	};

	asmDefinition() {
	    return this.getTypedRuleContext(AsmDefinitionContext,0);
	};

	namespaceAliasDefinition() {
	    return this.getTypedRuleContext(NamespaceAliasDefinitionContext,0);
	};

	usingDeclaration() {
	    return this.getTypedRuleContext(UsingDeclarationContext,0);
	};

	usingDirective() {
	    return this.getTypedRuleContext(UsingDirectiveContext,0);
	};

	staticAssertDeclaration() {
	    return this.getTypedRuleContext(StaticAssertDeclarationContext,0);
	};

	aliasDeclaration() {
	    return this.getTypedRuleContext(AliasDeclarationContext,0);
	};

	opaqueEnumDeclaration() {
	    return this.getTypedRuleContext(OpaqueEnumDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterBlockDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitBlockDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitBlockDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AliasDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_aliasDeclaration;
    }

	Using() {
	    return this.getToken(CPP14Parser.Using, 0);
	};

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	Assign() {
	    return this.getToken(CPP14Parser.Assign, 0);
	};

	theTypeId() {
	    return this.getTypedRuleContext(TheTypeIdContext,0);
	};

	Semi() {
	    return this.getToken(CPP14Parser.Semi, 0);
	};

	attributeSpecifierSeq() {
	    return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterAliasDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitAliasDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitAliasDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_simpleDeclaration;
    }

	Semi() {
	    return this.getToken(CPP14Parser.Semi, 0);
	};

	declSpecifierSeq() {
	    return this.getTypedRuleContext(DeclSpecifierSeqContext,0);
	};

	initDeclaratorList() {
	    return this.getTypedRuleContext(InitDeclaratorListContext,0);
	};

	attributeSpecifierSeq() {
	    return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterSimpleDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitSimpleDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitSimpleDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StaticAssertDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_staticAssertDeclaration;
    }

	Static_assert() {
	    return this.getToken(CPP14Parser.Static_assert, 0);
	};

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	constantExpression() {
	    return this.getTypedRuleContext(ConstantExpressionContext,0);
	};

	Comma() {
	    return this.getToken(CPP14Parser.Comma, 0);
	};

	StringLiteral() {
	    return this.getToken(CPP14Parser.StringLiteral, 0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	Semi() {
	    return this.getToken(CPP14Parser.Semi, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterStaticAssertDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitStaticAssertDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitStaticAssertDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EmptyDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_emptyDeclaration;
    }

	Semi() {
	    return this.getToken(CPP14Parser.Semi, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterEmptyDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitEmptyDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitEmptyDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AttributeDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_attributeDeclaration;
    }

	attributeSpecifierSeq() {
	    return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);
	};

	Semi() {
	    return this.getToken(CPP14Parser.Semi, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterAttributeDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitAttributeDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitAttributeDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeclSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_declSpecifier;
    }

	storageClassSpecifier() {
	    return this.getTypedRuleContext(StorageClassSpecifierContext,0);
	};

	typeSpecifier() {
	    return this.getTypedRuleContext(TypeSpecifierContext,0);
	};

	functionSpecifier() {
	    return this.getTypedRuleContext(FunctionSpecifierContext,0);
	};

	Friend() {
	    return this.getToken(CPP14Parser.Friend, 0);
	};

	Typedef() {
	    return this.getToken(CPP14Parser.Typedef, 0);
	};

	Constexpr() {
	    return this.getToken(CPP14Parser.Constexpr, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterDeclSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitDeclSpecifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitDeclSpecifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeclSpecifierSeqContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_declSpecifierSeq;
    }

	declSpecifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclSpecifierContext);
	    } else {
	        return this.getTypedRuleContext(DeclSpecifierContext,i);
	    }
	};

	attributeSpecifierSeq() {
	    return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterDeclSpecifierSeq(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitDeclSpecifierSeq(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitDeclSpecifierSeq(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StorageClassSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_storageClassSpecifier;
    }

	Register() {
	    return this.getToken(CPP14Parser.Register, 0);
	};

	Static() {
	    return this.getToken(CPP14Parser.Static, 0);
	};

	Thread_local() {
	    return this.getToken(CPP14Parser.Thread_local, 0);
	};

	Extern() {
	    return this.getToken(CPP14Parser.Extern, 0);
	};

	Mutable() {
	    return this.getToken(CPP14Parser.Mutable, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterStorageClassSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitStorageClassSpecifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitStorageClassSpecifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_functionSpecifier;
    }

	Inline() {
	    return this.getToken(CPP14Parser.Inline, 0);
	};

	Virtual() {
	    return this.getToken(CPP14Parser.Virtual, 0);
	};

	Explicit() {
	    return this.getToken(CPP14Parser.Explicit, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterFunctionSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitFunctionSpecifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitFunctionSpecifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypedefNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_typedefName;
    }

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterTypedefName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitTypedefName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitTypedefName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_typeSpecifier;
    }

	trailingTypeSpecifier() {
	    return this.getTypedRuleContext(TrailingTypeSpecifierContext,0);
	};

	classSpecifier() {
	    return this.getTypedRuleContext(ClassSpecifierContext,0);
	};

	enumSpecifier() {
	    return this.getTypedRuleContext(EnumSpecifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterTypeSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitTypeSpecifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitTypeSpecifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TrailingTypeSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_trailingTypeSpecifier;
    }

	simpleTypeSpecifier() {
	    return this.getTypedRuleContext(SimpleTypeSpecifierContext,0);
	};

	elaboratedTypeSpecifier() {
	    return this.getTypedRuleContext(ElaboratedTypeSpecifierContext,0);
	};

	typeNameSpecifier() {
	    return this.getTypedRuleContext(TypeNameSpecifierContext,0);
	};

	cvQualifier() {
	    return this.getTypedRuleContext(CvQualifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterTrailingTypeSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitTrailingTypeSpecifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitTrailingTypeSpecifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeSpecifierSeqContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_typeSpecifierSeq;
    }

	typeSpecifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeSpecifierContext);
	    } else {
	        return this.getTypedRuleContext(TypeSpecifierContext,i);
	    }
	};

	attributeSpecifierSeq() {
	    return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterTypeSpecifierSeq(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitTypeSpecifierSeq(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitTypeSpecifierSeq(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TrailingTypeSpecifierSeqContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_trailingTypeSpecifierSeq;
    }

	trailingTypeSpecifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TrailingTypeSpecifierContext);
	    } else {
	        return this.getTypedRuleContext(TrailingTypeSpecifierContext,i);
	    }
	};

	attributeSpecifierSeq() {
	    return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterTrailingTypeSpecifierSeq(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitTrailingTypeSpecifierSeq(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitTrailingTypeSpecifierSeq(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleTypeLengthModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_simpleTypeLengthModifier;
    }

	Short() {
	    return this.getToken(CPP14Parser.Short, 0);
	};

	Long() {
	    return this.getToken(CPP14Parser.Long, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterSimpleTypeLengthModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitSimpleTypeLengthModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitSimpleTypeLengthModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleTypeSignednessModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_simpleTypeSignednessModifier;
    }

	Unsigned() {
	    return this.getToken(CPP14Parser.Unsigned, 0);
	};

	Signed() {
	    return this.getToken(CPP14Parser.Signed, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterSimpleTypeSignednessModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitSimpleTypeSignednessModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitSimpleTypeSignednessModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleTypeSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_simpleTypeSpecifier;
    }

	theTypeName() {
	    return this.getTypedRuleContext(TheTypeNameContext,0);
	};

	nestedNameSpecifier() {
	    return this.getTypedRuleContext(NestedNameSpecifierContext,0);
	};

	Template() {
	    return this.getToken(CPP14Parser.Template, 0);
	};

	simpleTemplateId() {
	    return this.getTypedRuleContext(SimpleTemplateIdContext,0);
	};

	simpleTypeSignednessModifier() {
	    return this.getTypedRuleContext(SimpleTypeSignednessModifierContext,0);
	};

	simpleTypeLengthModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleTypeLengthModifierContext);
	    } else {
	        return this.getTypedRuleContext(SimpleTypeLengthModifierContext,i);
	    }
	};

	Char() {
	    return this.getToken(CPP14Parser.Char, 0);
	};

	Char16() {
	    return this.getToken(CPP14Parser.Char16, 0);
	};

	Char32() {
	    return this.getToken(CPP14Parser.Char32, 0);
	};

	Wchar() {
	    return this.getToken(CPP14Parser.Wchar, 0);
	};

	Bool() {
	    return this.getToken(CPP14Parser.Bool, 0);
	};

	Int() {
	    return this.getToken(CPP14Parser.Int, 0);
	};

	Float() {
	    return this.getToken(CPP14Parser.Float, 0);
	};

	Double() {
	    return this.getToken(CPP14Parser.Double, 0);
	};

	Void() {
	    return this.getToken(CPP14Parser.Void, 0);
	};

	Auto() {
	    return this.getToken(CPP14Parser.Auto, 0);
	};

	decltypeSpecifier() {
	    return this.getTypedRuleContext(DecltypeSpecifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterSimpleTypeSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitSimpleTypeSpecifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitSimpleTypeSpecifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TheTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_theTypeName;
    }

	className() {
	    return this.getTypedRuleContext(ClassNameContext,0);
	};

	enumName() {
	    return this.getTypedRuleContext(EnumNameContext,0);
	};

	typedefName() {
	    return this.getTypedRuleContext(TypedefNameContext,0);
	};

	simpleTemplateId() {
	    return this.getTypedRuleContext(SimpleTemplateIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterTheTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitTheTypeName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitTheTypeName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DecltypeSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_decltypeSpecifier;
    }

	Decltype() {
	    return this.getToken(CPP14Parser.Decltype, 0);
	};

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	Auto() {
	    return this.getToken(CPP14Parser.Auto, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterDecltypeSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitDecltypeSpecifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitDecltypeSpecifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElaboratedTypeSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_elaboratedTypeSpecifier;
    }

	classKey() {
	    return this.getTypedRuleContext(ClassKeyContext,0);
	};

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	simpleTemplateId() {
	    return this.getTypedRuleContext(SimpleTemplateIdContext,0);
	};

	nestedNameSpecifier() {
	    return this.getTypedRuleContext(NestedNameSpecifierContext,0);
	};

	attributeSpecifierSeq() {
	    return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);
	};

	Template() {
	    return this.getToken(CPP14Parser.Template, 0);
	};

	Enum() {
	    return this.getToken(CPP14Parser.Enum, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterElaboratedTypeSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitElaboratedTypeSpecifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitElaboratedTypeSpecifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_enumName;
    }

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterEnumName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitEnumName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitEnumName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_enumSpecifier;
    }

	enumHead() {
	    return this.getTypedRuleContext(EnumHeadContext,0);
	};

	LeftBrace() {
	    return this.getToken(CPP14Parser.LeftBrace, 0);
	};

	RightBrace() {
	    return this.getToken(CPP14Parser.RightBrace, 0);
	};

	enumeratorList() {
	    return this.getTypedRuleContext(EnumeratorListContext,0);
	};

	Comma() {
	    return this.getToken(CPP14Parser.Comma, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterEnumSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitEnumSpecifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitEnumSpecifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumHeadContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_enumHead;
    }

	enumkey() {
	    return this.getTypedRuleContext(EnumkeyContext,0);
	};

	attributeSpecifierSeq() {
	    return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);
	};

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	enumbase() {
	    return this.getTypedRuleContext(EnumbaseContext,0);
	};

	nestedNameSpecifier() {
	    return this.getTypedRuleContext(NestedNameSpecifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterEnumHead(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitEnumHead(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitEnumHead(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OpaqueEnumDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_opaqueEnumDeclaration;
    }

	enumkey() {
	    return this.getTypedRuleContext(EnumkeyContext,0);
	};

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	Semi() {
	    return this.getToken(CPP14Parser.Semi, 0);
	};

	attributeSpecifierSeq() {
	    return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);
	};

	enumbase() {
	    return this.getTypedRuleContext(EnumbaseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterOpaqueEnumDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitOpaqueEnumDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitOpaqueEnumDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumkeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_enumkey;
    }

	Enum() {
	    return this.getToken(CPP14Parser.Enum, 0);
	};

	Class() {
	    return this.getToken(CPP14Parser.Class, 0);
	};

	Struct() {
	    return this.getToken(CPP14Parser.Struct, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterEnumkey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitEnumkey(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitEnumkey(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumbaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_enumbase;
    }

	Colon() {
	    return this.getToken(CPP14Parser.Colon, 0);
	};

	typeSpecifierSeq() {
	    return this.getTypedRuleContext(TypeSpecifierSeqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterEnumbase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitEnumbase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitEnumbase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumeratorListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_enumeratorList;
    }

	enumeratorDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumeratorDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(EnumeratorDefinitionContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Comma);
	    } else {
	        return this.getToken(CPP14Parser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterEnumeratorList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitEnumeratorList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitEnumeratorList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumeratorDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_enumeratorDefinition;
    }

	enumerator() {
	    return this.getTypedRuleContext(EnumeratorContext,0);
	};

	Assign() {
	    return this.getToken(CPP14Parser.Assign, 0);
	};

	constantExpression() {
	    return this.getTypedRuleContext(ConstantExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterEnumeratorDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitEnumeratorDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitEnumeratorDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumeratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_enumerator;
    }

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterEnumerator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitEnumerator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitEnumerator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NamespaceNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_namespaceName;
    }

	originalNamespaceName() {
	    return this.getTypedRuleContext(OriginalNamespaceNameContext,0);
	};

	namespaceAlias() {
	    return this.getTypedRuleContext(NamespaceAliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterNamespaceName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitNamespaceName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitNamespaceName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OriginalNamespaceNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_originalNamespaceName;
    }

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterOriginalNamespaceName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitOriginalNamespaceName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitOriginalNamespaceName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NamespaceDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_namespaceDefinition;
        this.namespaceBody = null;
    }

	Namespace() {
	    return this.getToken(CPP14Parser.Namespace, 0);
	};

	LeftBrace() {
	    return this.getToken(CPP14Parser.LeftBrace, 0);
	};

	RightBrace() {
	    return this.getToken(CPP14Parser.RightBrace, 0);
	};

	Inline() {
	    return this.getToken(CPP14Parser.Inline, 0);
	};

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	originalNamespaceName() {
	    return this.getTypedRuleContext(OriginalNamespaceNameContext,0);
	};

	declarationseq() {
	    return this.getTypedRuleContext(DeclarationseqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterNamespaceDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitNamespaceDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitNamespaceDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NamespaceAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_namespaceAlias;
    }

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterNamespaceAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitNamespaceAlias(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitNamespaceAlias(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NamespaceAliasDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_namespaceAliasDefinition;
    }

	Namespace() {
	    return this.getToken(CPP14Parser.Namespace, 0);
	};

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	Assign() {
	    return this.getToken(CPP14Parser.Assign, 0);
	};

	qualifiednamespacespecifier() {
	    return this.getTypedRuleContext(QualifiednamespacespecifierContext,0);
	};

	Semi() {
	    return this.getToken(CPP14Parser.Semi, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterNamespaceAliasDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitNamespaceAliasDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitNamespaceAliasDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QualifiednamespacespecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_qualifiednamespacespecifier;
    }

	namespaceName() {
	    return this.getTypedRuleContext(NamespaceNameContext,0);
	};

	nestedNameSpecifier() {
	    return this.getTypedRuleContext(NestedNameSpecifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterQualifiednamespacespecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitQualifiednamespacespecifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitQualifiednamespacespecifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UsingDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_usingDeclaration;
    }

	Using() {
	    return this.getToken(CPP14Parser.Using, 0);
	};

	unqualifiedId() {
	    return this.getTypedRuleContext(UnqualifiedIdContext,0);
	};

	Semi() {
	    return this.getToken(CPP14Parser.Semi, 0);
	};

	Doublecolon() {
	    return this.getToken(CPP14Parser.Doublecolon, 0);
	};

	nestedNameSpecifier() {
	    return this.getTypedRuleContext(NestedNameSpecifierContext,0);
	};

	Typename_() {
	    return this.getToken(CPP14Parser.Typename_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterUsingDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitUsingDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitUsingDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UsingDirectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_usingDirective;
    }

	Using() {
	    return this.getToken(CPP14Parser.Using, 0);
	};

	Namespace() {
	    return this.getToken(CPP14Parser.Namespace, 0);
	};

	namespaceName() {
	    return this.getTypedRuleContext(NamespaceNameContext,0);
	};

	Semi() {
	    return this.getToken(CPP14Parser.Semi, 0);
	};

	attributeSpecifierSeq() {
	    return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);
	};

	nestedNameSpecifier() {
	    return this.getTypedRuleContext(NestedNameSpecifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterUsingDirective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitUsingDirective(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitUsingDirective(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AsmDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_asmDefinition;
    }

	Asm() {
	    return this.getToken(CPP14Parser.Asm, 0);
	};

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	StringLiteral() {
	    return this.getToken(CPP14Parser.StringLiteral, 0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	Semi() {
	    return this.getToken(CPP14Parser.Semi, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterAsmDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitAsmDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitAsmDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LinkageSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_linkageSpecification;
    }

	Extern() {
	    return this.getToken(CPP14Parser.Extern, 0);
	};

	StringLiteral() {
	    return this.getToken(CPP14Parser.StringLiteral, 0);
	};

	LeftBrace() {
	    return this.getToken(CPP14Parser.LeftBrace, 0);
	};

	RightBrace() {
	    return this.getToken(CPP14Parser.RightBrace, 0);
	};

	declaration() {
	    return this.getTypedRuleContext(DeclarationContext,0);
	};

	declarationseq() {
	    return this.getTypedRuleContext(DeclarationseqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterLinkageSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitLinkageSpecification(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitLinkageSpecification(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AttributeSpecifierSeqContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_attributeSpecifierSeq;
    }

	attributeSpecifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AttributeSpecifierContext);
	    } else {
	        return this.getTypedRuleContext(AttributeSpecifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterAttributeSpecifierSeq(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitAttributeSpecifierSeq(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitAttributeSpecifierSeq(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AttributeSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_attributeSpecifier;
    }

	LeftBracket = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.LeftBracket);
	    } else {
	        return this.getToken(CPP14Parser.LeftBracket, i);
	    }
	};


	RightBracket = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.RightBracket);
	    } else {
	        return this.getToken(CPP14Parser.RightBracket, i);
	    }
	};


	attributeList() {
	    return this.getTypedRuleContext(AttributeListContext,0);
	};

	alignmentspecifier() {
	    return this.getTypedRuleContext(AlignmentspecifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterAttributeSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitAttributeSpecifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitAttributeSpecifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlignmentspecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_alignmentspecifier;
    }

	Alignas() {
	    return this.getToken(CPP14Parser.Alignas, 0);
	};

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	theTypeId() {
	    return this.getTypedRuleContext(TheTypeIdContext,0);
	};

	constantExpression() {
	    return this.getTypedRuleContext(ConstantExpressionContext,0);
	};

	Ellipsis() {
	    return this.getToken(CPP14Parser.Ellipsis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterAlignmentspecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitAlignmentspecifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitAlignmentspecifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AttributeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_attributeList;
    }

	attribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AttributeContext);
	    } else {
	        return this.getTypedRuleContext(AttributeContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Comma);
	    } else {
	        return this.getToken(CPP14Parser.Comma, i);
	    }
	};


	Ellipsis() {
	    return this.getToken(CPP14Parser.Ellipsis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterAttributeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitAttributeList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitAttributeList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AttributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_attribute;
    }

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	attributeNamespace() {
	    return this.getTypedRuleContext(AttributeNamespaceContext,0);
	};

	Doublecolon() {
	    return this.getToken(CPP14Parser.Doublecolon, 0);
	};

	attributeArgumentClause() {
	    return this.getTypedRuleContext(AttributeArgumentClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterAttribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitAttribute(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitAttribute(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AttributeNamespaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_attributeNamespace;
    }

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterAttributeNamespace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitAttributeNamespace(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitAttributeNamespace(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AttributeArgumentClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_attributeArgumentClause;
    }

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	balancedTokenSeq() {
	    return this.getTypedRuleContext(BalancedTokenSeqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterAttributeArgumentClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitAttributeArgumentClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitAttributeArgumentClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BalancedTokenSeqContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_balancedTokenSeq;
    }

	balancedtoken = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BalancedtokenContext);
	    } else {
	        return this.getTypedRuleContext(BalancedtokenContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterBalancedTokenSeq(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitBalancedTokenSeq(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitBalancedTokenSeq(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BalancedtokenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_balancedtoken;
    }

	LeftParen = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.LeftParen);
	    } else {
	        return this.getToken(CPP14Parser.LeftParen, i);
	    }
	};


	balancedTokenSeq() {
	    return this.getTypedRuleContext(BalancedTokenSeqContext,0);
	};

	RightParen = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.RightParen);
	    } else {
	        return this.getToken(CPP14Parser.RightParen, i);
	    }
	};


	LeftBracket = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.LeftBracket);
	    } else {
	        return this.getToken(CPP14Parser.LeftBracket, i);
	    }
	};


	RightBracket = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.RightBracket);
	    } else {
	        return this.getToken(CPP14Parser.RightBracket, i);
	    }
	};


	LeftBrace = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.LeftBrace);
	    } else {
	        return this.getToken(CPP14Parser.LeftBrace, i);
	    }
	};


	RightBrace = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.RightBrace);
	    } else {
	        return this.getToken(CPP14Parser.RightBrace, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterBalancedtoken(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitBalancedtoken(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitBalancedtoken(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InitDeclaratorListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_initDeclaratorList;
    }

	initDeclarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InitDeclaratorContext);
	    } else {
	        return this.getTypedRuleContext(InitDeclaratorContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Comma);
	    } else {
	        return this.getToken(CPP14Parser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterInitDeclaratorList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitInitDeclaratorList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitInitDeclaratorList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InitDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_initDeclarator;
    }

	declarator() {
	    return this.getTypedRuleContext(DeclaratorContext,0);
	};

	initializer() {
	    return this.getTypedRuleContext(InitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterInitDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitInitDeclarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitInitDeclarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_declarator;
    }

	pointerDeclarator() {
	    return this.getTypedRuleContext(PointerDeclaratorContext,0);
	};

	noPointerDeclarator() {
	    return this.getTypedRuleContext(NoPointerDeclaratorContext,0);
	};

	parametersAndQualifiers() {
	    return this.getTypedRuleContext(ParametersAndQualifiersContext,0);
	};

	trailingReturnType() {
	    return this.getTypedRuleContext(TrailingReturnTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitDeclarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitDeclarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PointerDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_pointerDeclarator;
    }

	noPointerDeclarator() {
	    return this.getTypedRuleContext(NoPointerDeclaratorContext,0);
	};

	pointerOperator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PointerOperatorContext);
	    } else {
	        return this.getTypedRuleContext(PointerOperatorContext,i);
	    }
	};

	Const = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Const);
	    } else {
	        return this.getToken(CPP14Parser.Const, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterPointerDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitPointerDeclarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitPointerDeclarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NoPointerDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_noPointerDeclarator;
    }

	declaratorid() {
	    return this.getTypedRuleContext(DeclaratoridContext,0);
	};

	attributeSpecifierSeq() {
	    return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);
	};

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	pointerDeclarator() {
	    return this.getTypedRuleContext(PointerDeclaratorContext,0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	noPointerDeclarator() {
	    return this.getTypedRuleContext(NoPointerDeclaratorContext,0);
	};

	parametersAndQualifiers() {
	    return this.getTypedRuleContext(ParametersAndQualifiersContext,0);
	};

	LeftBracket() {
	    return this.getToken(CPP14Parser.LeftBracket, 0);
	};

	RightBracket() {
	    return this.getToken(CPP14Parser.RightBracket, 0);
	};

	constantExpression() {
	    return this.getTypedRuleContext(ConstantExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterNoPointerDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitNoPointerDeclarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitNoPointerDeclarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParametersAndQualifiersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_parametersAndQualifiers;
    }

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	parameterDeclarationClause() {
	    return this.getTypedRuleContext(ParameterDeclarationClauseContext,0);
	};

	cvqualifierseq() {
	    return this.getTypedRuleContext(CvqualifierseqContext,0);
	};

	refqualifier() {
	    return this.getTypedRuleContext(RefqualifierContext,0);
	};

	exceptionSpecification() {
	    return this.getTypedRuleContext(ExceptionSpecificationContext,0);
	};

	attributeSpecifierSeq() {
	    return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterParametersAndQualifiers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitParametersAndQualifiers(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitParametersAndQualifiers(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TrailingReturnTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_trailingReturnType;
    }

	Arrow() {
	    return this.getToken(CPP14Parser.Arrow, 0);
	};

	trailingTypeSpecifierSeq() {
	    return this.getTypedRuleContext(TrailingTypeSpecifierSeqContext,0);
	};

	abstractDeclarator() {
	    return this.getTypedRuleContext(AbstractDeclaratorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterTrailingReturnType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitTrailingReturnType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitTrailingReturnType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PointerOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_pointerOperator;
    }

	And() {
	    return this.getToken(CPP14Parser.And, 0);
	};

	AndAnd() {
	    return this.getToken(CPP14Parser.AndAnd, 0);
	};

	attributeSpecifierSeq() {
	    return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);
	};

	Star() {
	    return this.getToken(CPP14Parser.Star, 0);
	};

	nestedNameSpecifier() {
	    return this.getTypedRuleContext(NestedNameSpecifierContext,0);
	};

	cvqualifierseq() {
	    return this.getTypedRuleContext(CvqualifierseqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterPointerOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitPointerOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitPointerOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CvqualifierseqContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_cvqualifierseq;
    }

	cvQualifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CvQualifierContext);
	    } else {
	        return this.getTypedRuleContext(CvQualifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterCvqualifierseq(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitCvqualifierseq(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitCvqualifierseq(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CvQualifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_cvQualifier;
    }

	Const() {
	    return this.getToken(CPP14Parser.Const, 0);
	};

	Volatile() {
	    return this.getToken(CPP14Parser.Volatile, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterCvQualifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitCvQualifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitCvQualifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RefqualifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_refqualifier;
    }

	And() {
	    return this.getToken(CPP14Parser.And, 0);
	};

	AndAnd() {
	    return this.getToken(CPP14Parser.AndAnd, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterRefqualifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitRefqualifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitRefqualifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeclaratoridContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_declaratorid;
    }

	idExpression() {
	    return this.getTypedRuleContext(IdExpressionContext,0);
	};

	Ellipsis() {
	    return this.getToken(CPP14Parser.Ellipsis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterDeclaratorid(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitDeclaratorid(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitDeclaratorid(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TheTypeIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_theTypeId;
    }

	typeSpecifierSeq() {
	    return this.getTypedRuleContext(TypeSpecifierSeqContext,0);
	};

	abstractDeclarator() {
	    return this.getTypedRuleContext(AbstractDeclaratorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterTheTypeId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitTheTypeId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitTheTypeId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AbstractDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_abstractDeclarator;
    }

	pointerAbstractDeclarator() {
	    return this.getTypedRuleContext(PointerAbstractDeclaratorContext,0);
	};

	parametersAndQualifiers() {
	    return this.getTypedRuleContext(ParametersAndQualifiersContext,0);
	};

	trailingReturnType() {
	    return this.getTypedRuleContext(TrailingReturnTypeContext,0);
	};

	noPointerAbstractDeclarator() {
	    return this.getTypedRuleContext(NoPointerAbstractDeclaratorContext,0);
	};

	abstractPackDeclarator() {
	    return this.getTypedRuleContext(AbstractPackDeclaratorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterAbstractDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitAbstractDeclarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitAbstractDeclarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PointerAbstractDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_pointerAbstractDeclarator;
    }

	noPointerAbstractDeclarator() {
	    return this.getTypedRuleContext(NoPointerAbstractDeclaratorContext,0);
	};

	pointerOperator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PointerOperatorContext);
	    } else {
	        return this.getTypedRuleContext(PointerOperatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterPointerAbstractDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitPointerAbstractDeclarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitPointerAbstractDeclarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NoPointerAbstractDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_noPointerAbstractDeclarator;
    }

	parametersAndQualifiers() {
	    return this.getTypedRuleContext(ParametersAndQualifiersContext,0);
	};

	LeftBracket() {
	    return this.getToken(CPP14Parser.LeftBracket, 0);
	};

	RightBracket() {
	    return this.getToken(CPP14Parser.RightBracket, 0);
	};

	constantExpression() {
	    return this.getTypedRuleContext(ConstantExpressionContext,0);
	};

	attributeSpecifierSeq() {
	    return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);
	};

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	pointerAbstractDeclarator() {
	    return this.getTypedRuleContext(PointerAbstractDeclaratorContext,0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	noPointerAbstractDeclarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NoPointerAbstractDeclaratorContext);
	    } else {
	        return this.getTypedRuleContext(NoPointerAbstractDeclaratorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterNoPointerAbstractDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitNoPointerAbstractDeclarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitNoPointerAbstractDeclarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AbstractPackDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_abstractPackDeclarator;
    }

	noPointerAbstractPackDeclarator() {
	    return this.getTypedRuleContext(NoPointerAbstractPackDeclaratorContext,0);
	};

	pointerOperator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PointerOperatorContext);
	    } else {
	        return this.getTypedRuleContext(PointerOperatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterAbstractPackDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitAbstractPackDeclarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitAbstractPackDeclarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NoPointerAbstractPackDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_noPointerAbstractPackDeclarator;
    }

	Ellipsis() {
	    return this.getToken(CPP14Parser.Ellipsis, 0);
	};

	noPointerAbstractPackDeclarator() {
	    return this.getTypedRuleContext(NoPointerAbstractPackDeclaratorContext,0);
	};

	parametersAndQualifiers() {
	    return this.getTypedRuleContext(ParametersAndQualifiersContext,0);
	};

	LeftBracket() {
	    return this.getToken(CPP14Parser.LeftBracket, 0);
	};

	RightBracket() {
	    return this.getToken(CPP14Parser.RightBracket, 0);
	};

	constantExpression() {
	    return this.getTypedRuleContext(ConstantExpressionContext,0);
	};

	attributeSpecifierSeq() {
	    return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterNoPointerAbstractPackDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitNoPointerAbstractPackDeclarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitNoPointerAbstractPackDeclarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParameterDeclarationClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_parameterDeclarationClause;
    }

	parameterDeclarationList() {
	    return this.getTypedRuleContext(ParameterDeclarationListContext,0);
	};

	Ellipsis() {
	    return this.getToken(CPP14Parser.Ellipsis, 0);
	};

	Comma() {
	    return this.getToken(CPP14Parser.Comma, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterParameterDeclarationClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitParameterDeclarationClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitParameterDeclarationClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParameterDeclarationListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_parameterDeclarationList;
    }

	parameterDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParameterDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ParameterDeclarationContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Comma);
	    } else {
	        return this.getToken(CPP14Parser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterParameterDeclarationList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitParameterDeclarationList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitParameterDeclarationList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParameterDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_parameterDeclaration;
    }

	declSpecifierSeq() {
	    return this.getTypedRuleContext(DeclSpecifierSeqContext,0);
	};

	attributeSpecifierSeq() {
	    return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);
	};

	declarator() {
	    return this.getTypedRuleContext(DeclaratorContext,0);
	};

	Assign() {
	    return this.getToken(CPP14Parser.Assign, 0);
	};

	initializerClause() {
	    return this.getTypedRuleContext(InitializerClauseContext,0);
	};

	abstractDeclarator() {
	    return this.getTypedRuleContext(AbstractDeclaratorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterParameterDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitParameterDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitParameterDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_functionDefinition;
    }

	declarator() {
	    return this.getTypedRuleContext(DeclaratorContext,0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	attributeSpecifierSeq() {
	    return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);
	};

	declSpecifierSeq() {
	    return this.getTypedRuleContext(DeclSpecifierSeqContext,0);
	};

	virtualSpecifierSeq() {
	    return this.getTypedRuleContext(VirtualSpecifierSeqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterFunctionDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitFunctionDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitFunctionDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_functionBody;
    }

	compoundStatement() {
	    return this.getTypedRuleContext(CompoundStatementContext,0);
	};

	constructorInitializer() {
	    return this.getTypedRuleContext(ConstructorInitializerContext,0);
	};

	functionTryBlock() {
	    return this.getTypedRuleContext(FunctionTryBlockContext,0);
	};

	Assign() {
	    return this.getToken(CPP14Parser.Assign, 0);
	};

	Semi() {
	    return this.getToken(CPP14Parser.Semi, 0);
	};

	Default() {
	    return this.getToken(CPP14Parser.Default, 0);
	};

	Delete() {
	    return this.getToken(CPP14Parser.Delete, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterFunctionBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitFunctionBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitFunctionBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_initializer;
    }

	braceOrEqualInitializer() {
	    return this.getTypedRuleContext(BraceOrEqualInitializerContext,0);
	};

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitInitializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitInitializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BraceOrEqualInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_braceOrEqualInitializer;
    }

	Assign() {
	    return this.getToken(CPP14Parser.Assign, 0);
	};

	initializerClause() {
	    return this.getTypedRuleContext(InitializerClauseContext,0);
	};

	bracedInitList() {
	    return this.getTypedRuleContext(BracedInitListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterBraceOrEqualInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitBraceOrEqualInitializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitBraceOrEqualInitializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InitializerClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_initializerClause;
    }

	assignmentExpression() {
	    return this.getTypedRuleContext(AssignmentExpressionContext,0);
	};

	bracedInitList() {
	    return this.getTypedRuleContext(BracedInitListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterInitializerClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitInitializerClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitInitializerClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InitializerListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_initializerList;
    }

	initializerClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InitializerClauseContext);
	    } else {
	        return this.getTypedRuleContext(InitializerClauseContext,i);
	    }
	};

	Ellipsis = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Ellipsis);
	    } else {
	        return this.getToken(CPP14Parser.Ellipsis, i);
	    }
	};


	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Comma);
	    } else {
	        return this.getToken(CPP14Parser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterInitializerList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitInitializerList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitInitializerList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BracedInitListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_bracedInitList;
    }

	LeftBrace() {
	    return this.getToken(CPP14Parser.LeftBrace, 0);
	};

	RightBrace() {
	    return this.getToken(CPP14Parser.RightBrace, 0);
	};

	initializerList() {
	    return this.getTypedRuleContext(InitializerListContext,0);
	};

	Comma() {
	    return this.getToken(CPP14Parser.Comma, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterBracedInitList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitBracedInitList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitBracedInitList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_className;
    }

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	simpleTemplateId() {
	    return this.getTypedRuleContext(SimpleTemplateIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterClassName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitClassName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitClassName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_classSpecifier;
    }

	classHead() {
	    return this.getTypedRuleContext(ClassHeadContext,0);
	};

	LeftBrace() {
	    return this.getToken(CPP14Parser.LeftBrace, 0);
	};

	RightBrace() {
	    return this.getToken(CPP14Parser.RightBrace, 0);
	};

	memberSpecification() {
	    return this.getTypedRuleContext(MemberSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterClassSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitClassSpecifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitClassSpecifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassHeadContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_classHead;
    }

	classKey() {
	    return this.getTypedRuleContext(ClassKeyContext,0);
	};

	attributeSpecifierSeq() {
	    return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);
	};

	classHeadName() {
	    return this.getTypedRuleContext(ClassHeadNameContext,0);
	};

	baseClause() {
	    return this.getTypedRuleContext(BaseClauseContext,0);
	};

	classVirtSpecifier() {
	    return this.getTypedRuleContext(ClassVirtSpecifierContext,0);
	};

	Union() {
	    return this.getToken(CPP14Parser.Union, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterClassHead(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitClassHead(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitClassHead(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassHeadNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_classHeadName;
    }

	className() {
	    return this.getTypedRuleContext(ClassNameContext,0);
	};

	nestedNameSpecifier() {
	    return this.getTypedRuleContext(NestedNameSpecifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterClassHeadName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitClassHeadName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitClassHeadName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassVirtSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_classVirtSpecifier;
    }

	Final() {
	    return this.getToken(CPP14Parser.Final, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterClassVirtSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitClassVirtSpecifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitClassVirtSpecifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassKeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_classKey;
    }

	Class() {
	    return this.getToken(CPP14Parser.Class, 0);
	};

	Struct() {
	    return this.getToken(CPP14Parser.Struct, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterClassKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitClassKey(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitClassKey(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MemberSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_memberSpecification;
    }

	memberdeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MemberdeclarationContext);
	    } else {
	        return this.getTypedRuleContext(MemberdeclarationContext,i);
	    }
	};

	accessSpecifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AccessSpecifierContext);
	    } else {
	        return this.getTypedRuleContext(AccessSpecifierContext,i);
	    }
	};

	Colon = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Colon);
	    } else {
	        return this.getToken(CPP14Parser.Colon, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterMemberSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitMemberSpecification(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitMemberSpecification(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MemberdeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_memberdeclaration;
    }

	Semi() {
	    return this.getToken(CPP14Parser.Semi, 0);
	};

	attributeSpecifierSeq() {
	    return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);
	};

	declSpecifierSeq() {
	    return this.getTypedRuleContext(DeclSpecifierSeqContext,0);
	};

	memberDeclaratorList() {
	    return this.getTypedRuleContext(MemberDeclaratorListContext,0);
	};

	functionDefinition() {
	    return this.getTypedRuleContext(FunctionDefinitionContext,0);
	};

	usingDeclaration() {
	    return this.getTypedRuleContext(UsingDeclarationContext,0);
	};

	staticAssertDeclaration() {
	    return this.getTypedRuleContext(StaticAssertDeclarationContext,0);
	};

	templateDeclaration() {
	    return this.getTypedRuleContext(TemplateDeclarationContext,0);
	};

	aliasDeclaration() {
	    return this.getTypedRuleContext(AliasDeclarationContext,0);
	};

	emptyDeclaration() {
	    return this.getTypedRuleContext(EmptyDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterMemberdeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitMemberdeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitMemberdeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MemberDeclaratorListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_memberDeclaratorList;
    }

	memberDeclarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MemberDeclaratorContext);
	    } else {
	        return this.getTypedRuleContext(MemberDeclaratorContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Comma);
	    } else {
	        return this.getToken(CPP14Parser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterMemberDeclaratorList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitMemberDeclaratorList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitMemberDeclaratorList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MemberDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_memberDeclarator;
    }

	declarator() {
	    return this.getTypedRuleContext(DeclaratorContext,0);
	};

	virtualSpecifierSeq() {
	    return this.getTypedRuleContext(VirtualSpecifierSeqContext,0);
	};

	pureSpecifier() {
	    return this.getTypedRuleContext(PureSpecifierContext,0);
	};

	braceOrEqualInitializer() {
	    return this.getTypedRuleContext(BraceOrEqualInitializerContext,0);
	};

	Colon() {
	    return this.getToken(CPP14Parser.Colon, 0);
	};

	constantExpression() {
	    return this.getTypedRuleContext(ConstantExpressionContext,0);
	};

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	attributeSpecifierSeq() {
	    return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterMemberDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitMemberDeclarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitMemberDeclarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VirtualSpecifierSeqContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_virtualSpecifierSeq;
    }

	virtualSpecifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VirtualSpecifierContext);
	    } else {
	        return this.getTypedRuleContext(VirtualSpecifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterVirtualSpecifierSeq(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitVirtualSpecifierSeq(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitVirtualSpecifierSeq(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VirtualSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_virtualSpecifier;
    }

	Override() {
	    return this.getToken(CPP14Parser.Override, 0);
	};

	Final() {
	    return this.getToken(CPP14Parser.Final, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterVirtualSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitVirtualSpecifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitVirtualSpecifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PureSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_pureSpecifier;
        this.val = null;
    }

	Assign() {
	    return this.getToken(CPP14Parser.Assign, 0);
	};

	OctalLiteral() {
	    return this.getToken(CPP14Parser.OctalLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterPureSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitPureSpecifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitPureSpecifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BaseClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_baseClause;
    }

	Colon() {
	    return this.getToken(CPP14Parser.Colon, 0);
	};

	baseSpecifierList() {
	    return this.getTypedRuleContext(BaseSpecifierListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterBaseClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitBaseClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitBaseClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BaseSpecifierListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_baseSpecifierList;
    }

	baseSpecifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BaseSpecifierContext);
	    } else {
	        return this.getTypedRuleContext(BaseSpecifierContext,i);
	    }
	};

	Ellipsis = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Ellipsis);
	    } else {
	        return this.getToken(CPP14Parser.Ellipsis, i);
	    }
	};


	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Comma);
	    } else {
	        return this.getToken(CPP14Parser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterBaseSpecifierList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitBaseSpecifierList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitBaseSpecifierList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BaseSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_baseSpecifier;
    }

	baseTypeSpecifier() {
	    return this.getTypedRuleContext(BaseTypeSpecifierContext,0);
	};

	Virtual() {
	    return this.getToken(CPP14Parser.Virtual, 0);
	};

	accessSpecifier() {
	    return this.getTypedRuleContext(AccessSpecifierContext,0);
	};

	attributeSpecifierSeq() {
	    return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterBaseSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitBaseSpecifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitBaseSpecifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassOrDeclTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_classOrDeclType;
    }

	className() {
	    return this.getTypedRuleContext(ClassNameContext,0);
	};

	nestedNameSpecifier() {
	    return this.getTypedRuleContext(NestedNameSpecifierContext,0);
	};

	decltypeSpecifier() {
	    return this.getTypedRuleContext(DecltypeSpecifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterClassOrDeclType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitClassOrDeclType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitClassOrDeclType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BaseTypeSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_baseTypeSpecifier;
    }

	classOrDeclType() {
	    return this.getTypedRuleContext(ClassOrDeclTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterBaseTypeSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitBaseTypeSpecifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitBaseTypeSpecifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AccessSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_accessSpecifier;
    }

	Private() {
	    return this.getToken(CPP14Parser.Private, 0);
	};

	Protected() {
	    return this.getToken(CPP14Parser.Protected, 0);
	};

	Public() {
	    return this.getToken(CPP14Parser.Public, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterAccessSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitAccessSpecifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitAccessSpecifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConversionFunctionIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_conversionFunctionId;
    }

	Operator() {
	    return this.getToken(CPP14Parser.Operator, 0);
	};

	conversionTypeId() {
	    return this.getTypedRuleContext(ConversionTypeIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterConversionFunctionId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitConversionFunctionId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitConversionFunctionId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConversionTypeIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_conversionTypeId;
    }

	typeSpecifierSeq() {
	    return this.getTypedRuleContext(TypeSpecifierSeqContext,0);
	};

	conversionDeclarator() {
	    return this.getTypedRuleContext(ConversionDeclaratorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterConversionTypeId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitConversionTypeId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitConversionTypeId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConversionDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_conversionDeclarator;
    }

	pointerOperator() {
	    return this.getTypedRuleContext(PointerOperatorContext,0);
	};

	conversionDeclarator() {
	    return this.getTypedRuleContext(ConversionDeclaratorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterConversionDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitConversionDeclarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitConversionDeclarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstructorInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_constructorInitializer;
    }

	Colon() {
	    return this.getToken(CPP14Parser.Colon, 0);
	};

	memInitializerList() {
	    return this.getTypedRuleContext(MemInitializerListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterConstructorInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitConstructorInitializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitConstructorInitializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MemInitializerListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_memInitializerList;
    }

	memInitializer = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MemInitializerContext);
	    } else {
	        return this.getTypedRuleContext(MemInitializerContext,i);
	    }
	};

	Ellipsis = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Ellipsis);
	    } else {
	        return this.getToken(CPP14Parser.Ellipsis, i);
	    }
	};


	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Comma);
	    } else {
	        return this.getToken(CPP14Parser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterMemInitializerList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitMemInitializerList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitMemInitializerList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MemInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_memInitializer;
    }

	meminitializerid() {
	    return this.getTypedRuleContext(MeminitializeridContext,0);
	};

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	bracedInitList() {
	    return this.getTypedRuleContext(BracedInitListContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterMemInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitMemInitializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitMemInitializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MeminitializeridContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_meminitializerid;
    }

	classOrDeclType() {
	    return this.getTypedRuleContext(ClassOrDeclTypeContext,0);
	};

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterMeminitializerid(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitMeminitializerid(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitMeminitializerid(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OperatorFunctionIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_operatorFunctionId;
    }

	Operator() {
	    return this.getToken(CPP14Parser.Operator, 0);
	};

	theOperator() {
	    return this.getTypedRuleContext(TheOperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterOperatorFunctionId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitOperatorFunctionId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitOperatorFunctionId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LiteralOperatorIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_literalOperatorId;
    }

	Operator() {
	    return this.getToken(CPP14Parser.Operator, 0);
	};

	StringLiteral() {
	    return this.getToken(CPP14Parser.StringLiteral, 0);
	};

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	UserDefinedStringLiteral() {
	    return this.getToken(CPP14Parser.UserDefinedStringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterLiteralOperatorId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitLiteralOperatorId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitLiteralOperatorId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TemplateDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_templateDeclaration;
    }

	Template() {
	    return this.getToken(CPP14Parser.Template, 0);
	};

	Less() {
	    return this.getToken(CPP14Parser.Less, 0);
	};

	templateparameterList() {
	    return this.getTypedRuleContext(TemplateparameterListContext,0);
	};

	Greater() {
	    return this.getToken(CPP14Parser.Greater, 0);
	};

	declaration() {
	    return this.getTypedRuleContext(DeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterTemplateDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitTemplateDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitTemplateDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TemplateparameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_templateparameterList;
    }

	templateParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TemplateParameterContext);
	    } else {
	        return this.getTypedRuleContext(TemplateParameterContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Comma);
	    } else {
	        return this.getToken(CPP14Parser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterTemplateparameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitTemplateparameterList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitTemplateparameterList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TemplateParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_templateParameter;
    }

	typeParameter() {
	    return this.getTypedRuleContext(TypeParameterContext,0);
	};

	parameterDeclaration() {
	    return this.getTypedRuleContext(ParameterDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterTemplateParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitTemplateParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitTemplateParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_typeParameter;
    }

	Class() {
	    return this.getToken(CPP14Parser.Class, 0);
	};

	Typename_() {
	    return this.getToken(CPP14Parser.Typename_, 0);
	};

	Assign() {
	    return this.getToken(CPP14Parser.Assign, 0);
	};

	theTypeId() {
	    return this.getTypedRuleContext(TheTypeIdContext,0);
	};

	Template() {
	    return this.getToken(CPP14Parser.Template, 0);
	};

	Less() {
	    return this.getToken(CPP14Parser.Less, 0);
	};

	templateparameterList() {
	    return this.getTypedRuleContext(TemplateparameterListContext,0);
	};

	Greater() {
	    return this.getToken(CPP14Parser.Greater, 0);
	};

	Ellipsis() {
	    return this.getToken(CPP14Parser.Ellipsis, 0);
	};

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterTypeParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitTypeParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitTypeParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleTemplateIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_simpleTemplateId;
    }

	templateName() {
	    return this.getTypedRuleContext(TemplateNameContext,0);
	};

	Less() {
	    return this.getToken(CPP14Parser.Less, 0);
	};

	Greater() {
	    return this.getToken(CPP14Parser.Greater, 0);
	};

	templateArgumentList() {
	    return this.getTypedRuleContext(TemplateArgumentListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterSimpleTemplateId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitSimpleTemplateId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitSimpleTemplateId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TemplateIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_templateId;
    }

	simpleTemplateId() {
	    return this.getTypedRuleContext(SimpleTemplateIdContext,0);
	};

	Less() {
	    return this.getToken(CPP14Parser.Less, 0);
	};

	Greater() {
	    return this.getToken(CPP14Parser.Greater, 0);
	};

	operatorFunctionId() {
	    return this.getTypedRuleContext(OperatorFunctionIdContext,0);
	};

	literalOperatorId() {
	    return this.getTypedRuleContext(LiteralOperatorIdContext,0);
	};

	templateArgumentList() {
	    return this.getTypedRuleContext(TemplateArgumentListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterTemplateId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitTemplateId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitTemplateId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TemplateNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_templateName;
    }

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterTemplateName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitTemplateName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitTemplateName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TemplateArgumentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_templateArgumentList;
    }

	templateArgument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TemplateArgumentContext);
	    } else {
	        return this.getTypedRuleContext(TemplateArgumentContext,i);
	    }
	};

	Ellipsis = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Ellipsis);
	    } else {
	        return this.getToken(CPP14Parser.Ellipsis, i);
	    }
	};


	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Comma);
	    } else {
	        return this.getToken(CPP14Parser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterTemplateArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitTemplateArgumentList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitTemplateArgumentList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TemplateArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_templateArgument;
    }

	theTypeId() {
	    return this.getTypedRuleContext(TheTypeIdContext,0);
	};

	constantExpression() {
	    return this.getTypedRuleContext(ConstantExpressionContext,0);
	};

	idExpression() {
	    return this.getTypedRuleContext(IdExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterTemplateArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitTemplateArgument(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitTemplateArgument(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeNameSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_typeNameSpecifier;
    }

	Typename_() {
	    return this.getToken(CPP14Parser.Typename_, 0);
	};

	nestedNameSpecifier() {
	    return this.getTypedRuleContext(NestedNameSpecifierContext,0);
	};

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	simpleTemplateId() {
	    return this.getTypedRuleContext(SimpleTemplateIdContext,0);
	};

	Template() {
	    return this.getToken(CPP14Parser.Template, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterTypeNameSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitTypeNameSpecifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitTypeNameSpecifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExplicitInstantiationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_explicitInstantiation;
    }

	Template() {
	    return this.getToken(CPP14Parser.Template, 0);
	};

	declaration() {
	    return this.getTypedRuleContext(DeclarationContext,0);
	};

	Extern() {
	    return this.getToken(CPP14Parser.Extern, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterExplicitInstantiation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitExplicitInstantiation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitExplicitInstantiation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExplicitSpecializationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_explicitSpecialization;
    }

	Template() {
	    return this.getToken(CPP14Parser.Template, 0);
	};

	Less() {
	    return this.getToken(CPP14Parser.Less, 0);
	};

	Greater() {
	    return this.getToken(CPP14Parser.Greater, 0);
	};

	declaration() {
	    return this.getTypedRuleContext(DeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterExplicitSpecialization(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitExplicitSpecialization(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitExplicitSpecialization(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TryBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_tryBlock;
    }

	Try() {
	    return this.getToken(CPP14Parser.Try, 0);
	};

	compoundStatement() {
	    return this.getTypedRuleContext(CompoundStatementContext,0);
	};

	handlerSeq() {
	    return this.getTypedRuleContext(HandlerSeqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterTryBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitTryBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitTryBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionTryBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_functionTryBlock;
    }

	Try() {
	    return this.getToken(CPP14Parser.Try, 0);
	};

	compoundStatement() {
	    return this.getTypedRuleContext(CompoundStatementContext,0);
	};

	handlerSeq() {
	    return this.getTypedRuleContext(HandlerSeqContext,0);
	};

	constructorInitializer() {
	    return this.getTypedRuleContext(ConstructorInitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterFunctionTryBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitFunctionTryBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitFunctionTryBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HandlerSeqContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_handlerSeq;
    }

	handler = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(HandlerContext);
	    } else {
	        return this.getTypedRuleContext(HandlerContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterHandlerSeq(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitHandlerSeq(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitHandlerSeq(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HandlerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_handler;
    }

	Catch() {
	    return this.getToken(CPP14Parser.Catch, 0);
	};

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	exceptionDeclaration() {
	    return this.getTypedRuleContext(ExceptionDeclarationContext,0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	compoundStatement() {
	    return this.getTypedRuleContext(CompoundStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterHandler(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitHandler(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitHandler(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExceptionDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_exceptionDeclaration;
    }

	typeSpecifierSeq() {
	    return this.getTypedRuleContext(TypeSpecifierSeqContext,0);
	};

	attributeSpecifierSeq() {
	    return this.getTypedRuleContext(AttributeSpecifierSeqContext,0);
	};

	declarator() {
	    return this.getTypedRuleContext(DeclaratorContext,0);
	};

	abstractDeclarator() {
	    return this.getTypedRuleContext(AbstractDeclaratorContext,0);
	};

	Ellipsis() {
	    return this.getToken(CPP14Parser.Ellipsis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterExceptionDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitExceptionDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitExceptionDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ThrowExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_throwExpression;
    }

	Throw() {
	    return this.getToken(CPP14Parser.Throw, 0);
	};

	assignmentExpression() {
	    return this.getTypedRuleContext(AssignmentExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterThrowExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitThrowExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitThrowExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExceptionSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_exceptionSpecification;
    }

	dynamicExceptionSpecification() {
	    return this.getTypedRuleContext(DynamicExceptionSpecificationContext,0);
	};

	noeExceptSpecification() {
	    return this.getTypedRuleContext(NoeExceptSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterExceptionSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitExceptionSpecification(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitExceptionSpecification(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DynamicExceptionSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_dynamicExceptionSpecification;
    }

	Throw() {
	    return this.getToken(CPP14Parser.Throw, 0);
	};

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	typeIdList() {
	    return this.getTypedRuleContext(TypeIdListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterDynamicExceptionSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitDynamicExceptionSpecification(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitDynamicExceptionSpecification(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeIdListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_typeIdList;
    }

	theTypeId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TheTypeIdContext);
	    } else {
	        return this.getTypedRuleContext(TheTypeIdContext,i);
	    }
	};

	Ellipsis = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Ellipsis);
	    } else {
	        return this.getToken(CPP14Parser.Ellipsis, i);
	    }
	};


	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Comma);
	    } else {
	        return this.getToken(CPP14Parser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterTypeIdList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitTypeIdList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitTypeIdList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NoeExceptSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_noeExceptSpecification;
    }

	Noexcept() {
	    return this.getToken(CPP14Parser.Noexcept, 0);
	};

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	constantExpression() {
	    return this.getTypedRuleContext(ConstantExpressionContext,0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterNoeExceptSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitNoeExceptSpecification(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitNoeExceptSpecification(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TheOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_theOperator;
    }

	New() {
	    return this.getToken(CPP14Parser.New, 0);
	};

	LeftBracket() {
	    return this.getToken(CPP14Parser.LeftBracket, 0);
	};

	RightBracket() {
	    return this.getToken(CPP14Parser.RightBracket, 0);
	};

	Delete() {
	    return this.getToken(CPP14Parser.Delete, 0);
	};

	Plus() {
	    return this.getToken(CPP14Parser.Plus, 0);
	};

	Minus() {
	    return this.getToken(CPP14Parser.Minus, 0);
	};

	Star() {
	    return this.getToken(CPP14Parser.Star, 0);
	};

	Div() {
	    return this.getToken(CPP14Parser.Div, 0);
	};

	Mod() {
	    return this.getToken(CPP14Parser.Mod, 0);
	};

	Caret() {
	    return this.getToken(CPP14Parser.Caret, 0);
	};

	And() {
	    return this.getToken(CPP14Parser.And, 0);
	};

	Or() {
	    return this.getToken(CPP14Parser.Or, 0);
	};

	Tilde() {
	    return this.getToken(CPP14Parser.Tilde, 0);
	};

	Not() {
	    return this.getToken(CPP14Parser.Not, 0);
	};

	Assign() {
	    return this.getToken(CPP14Parser.Assign, 0);
	};

	Greater = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Greater);
	    } else {
	        return this.getToken(CPP14Parser.Greater, i);
	    }
	};


	Less = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Less);
	    } else {
	        return this.getToken(CPP14Parser.Less, i);
	    }
	};


	GreaterEqual() {
	    return this.getToken(CPP14Parser.GreaterEqual, 0);
	};

	PlusAssign() {
	    return this.getToken(CPP14Parser.PlusAssign, 0);
	};

	MinusAssign() {
	    return this.getToken(CPP14Parser.MinusAssign, 0);
	};

	StarAssign() {
	    return this.getToken(CPP14Parser.StarAssign, 0);
	};

	ModAssign() {
	    return this.getToken(CPP14Parser.ModAssign, 0);
	};

	XorAssign() {
	    return this.getToken(CPP14Parser.XorAssign, 0);
	};

	AndAssign() {
	    return this.getToken(CPP14Parser.AndAssign, 0);
	};

	OrAssign() {
	    return this.getToken(CPP14Parser.OrAssign, 0);
	};

	RightShiftAssign() {
	    return this.getToken(CPP14Parser.RightShiftAssign, 0);
	};

	LeftShiftAssign() {
	    return this.getToken(CPP14Parser.LeftShiftAssign, 0);
	};

	Equal() {
	    return this.getToken(CPP14Parser.Equal, 0);
	};

	NotEqual() {
	    return this.getToken(CPP14Parser.NotEqual, 0);
	};

	LessEqual() {
	    return this.getToken(CPP14Parser.LessEqual, 0);
	};

	AndAnd() {
	    return this.getToken(CPP14Parser.AndAnd, 0);
	};

	OrOr() {
	    return this.getToken(CPP14Parser.OrOr, 0);
	};

	PlusPlus() {
	    return this.getToken(CPP14Parser.PlusPlus, 0);
	};

	MinusMinus() {
	    return this.getToken(CPP14Parser.MinusMinus, 0);
	};

	Comma() {
	    return this.getToken(CPP14Parser.Comma, 0);
	};

	ArrowStar() {
	    return this.getToken(CPP14Parser.ArrowStar, 0);
	};

	Arrow() {
	    return this.getToken(CPP14Parser.Arrow, 0);
	};

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterTheOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitTheOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitTheOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_literal;
    }

	IntegerLiteral() {
	    return this.getToken(CPP14Parser.IntegerLiteral, 0);
	};

	CharacterLiteral() {
	    return this.getToken(CPP14Parser.CharacterLiteral, 0);
	};

	FloatingLiteral() {
	    return this.getToken(CPP14Parser.FloatingLiteral, 0);
	};

	StringLiteral() {
	    return this.getToken(CPP14Parser.StringLiteral, 0);
	};

	BooleanLiteral() {
	    return this.getToken(CPP14Parser.BooleanLiteral, 0);
	};

	PointerLiteral() {
	    return this.getToken(CPP14Parser.PointerLiteral, 0);
	};

	UserDefinedLiteral() {
	    return this.getToken(CPP14Parser.UserDefinedLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




CPP14Parser.TranslationUnitContext = TranslationUnitContext; 
CPP14Parser.PrimaryExpressionContext = PrimaryExpressionContext; 
CPP14Parser.IdExpressionContext = IdExpressionContext; 
CPP14Parser.UnqualifiedIdContext = UnqualifiedIdContext; 
CPP14Parser.QualifiedIdContext = QualifiedIdContext; 
CPP14Parser.NestedNameSpecifierContext = NestedNameSpecifierContext; 
CPP14Parser.LambdaExpressionContext = LambdaExpressionContext; 
CPP14Parser.LambdaIntroducerContext = LambdaIntroducerContext; 
CPP14Parser.LambdaCaptureContext = LambdaCaptureContext; 
CPP14Parser.CaptureDefaultContext = CaptureDefaultContext; 
CPP14Parser.CaptureListContext = CaptureListContext; 
CPP14Parser.CaptureContext = CaptureContext; 
CPP14Parser.SimpleCaptureContext = SimpleCaptureContext; 
CPP14Parser.InitcaptureContext = InitcaptureContext; 
CPP14Parser.LambdaDeclaratorContext = LambdaDeclaratorContext; 
CPP14Parser.PostfixExpressionContext = PostfixExpressionContext; 
CPP14Parser.TypeIdOfTheTypeIdContext = TypeIdOfTheTypeIdContext; 
CPP14Parser.ExpressionListContext = ExpressionListContext; 
CPP14Parser.PseudoDestructorNameContext = PseudoDestructorNameContext; 
CPP14Parser.UnaryExpressionContext = UnaryExpressionContext; 
CPP14Parser.UnaryOperatorContext = UnaryOperatorContext; 
CPP14Parser.NewExpressionContext = NewExpressionContext; 
CPP14Parser.NewPlacementContext = NewPlacementContext; 
CPP14Parser.NewTypeIdContext = NewTypeIdContext; 
CPP14Parser.NewDeclaratorContext = NewDeclaratorContext; 
CPP14Parser.NoPointerNewDeclaratorContext = NoPointerNewDeclaratorContext; 
CPP14Parser.NewInitializerContext = NewInitializerContext; 
CPP14Parser.DeleteExpressionContext = DeleteExpressionContext; 
CPP14Parser.NoExceptExpressionContext = NoExceptExpressionContext; 
CPP14Parser.CastExpressionContext = CastExpressionContext; 
CPP14Parser.PointerMemberExpressionContext = PointerMemberExpressionContext; 
CPP14Parser.MultiplicativeExpressionContext = MultiplicativeExpressionContext; 
CPP14Parser.AdditiveExpressionContext = AdditiveExpressionContext; 
CPP14Parser.ShiftExpressionContext = ShiftExpressionContext; 
CPP14Parser.ShiftOperatorContext = ShiftOperatorContext; 
CPP14Parser.RelationalExpressionContext = RelationalExpressionContext; 
CPP14Parser.EqualityExpressionContext = EqualityExpressionContext; 
CPP14Parser.AndExpressionContext = AndExpressionContext; 
CPP14Parser.ExclusiveOrExpressionContext = ExclusiveOrExpressionContext; 
CPP14Parser.InclusiveOrExpressionContext = InclusiveOrExpressionContext; 
CPP14Parser.LogicalAndExpressionContext = LogicalAndExpressionContext; 
CPP14Parser.LogicalOrExpressionContext = LogicalOrExpressionContext; 
CPP14Parser.ConditionalExpressionContext = ConditionalExpressionContext; 
CPP14Parser.AssignmentExpressionContext = AssignmentExpressionContext; 
CPP14Parser.AssignmentOperatorContext = AssignmentOperatorContext; 
CPP14Parser.ExpressionContext = ExpressionContext; 
CPP14Parser.ConstantExpressionContext = ConstantExpressionContext; 
CPP14Parser.StatementContext = StatementContext; 
CPP14Parser.LabeledStatementContext = LabeledStatementContext; 
CPP14Parser.ExpressionStatementContext = ExpressionStatementContext; 
CPP14Parser.CompoundStatementContext = CompoundStatementContext; 
CPP14Parser.StatementSeqContext = StatementSeqContext; 
CPP14Parser.SelectionStatementContext = SelectionStatementContext; 
CPP14Parser.ConditionContext = ConditionContext; 
CPP14Parser.IterationStatementContext = IterationStatementContext; 
CPP14Parser.ForInitStatementContext = ForInitStatementContext; 
CPP14Parser.ForRangeDeclarationContext = ForRangeDeclarationContext; 
CPP14Parser.ForRangeInitializerContext = ForRangeInitializerContext; 
CPP14Parser.JumpStatementContext = JumpStatementContext; 
CPP14Parser.DeclarationStatementContext = DeclarationStatementContext; 
CPP14Parser.DeclarationseqContext = DeclarationseqContext; 
CPP14Parser.DeclarationContext = DeclarationContext; 
CPP14Parser.BlockDeclarationContext = BlockDeclarationContext; 
CPP14Parser.AliasDeclarationContext = AliasDeclarationContext; 
CPP14Parser.SimpleDeclarationContext = SimpleDeclarationContext; 
CPP14Parser.StaticAssertDeclarationContext = StaticAssertDeclarationContext; 
CPP14Parser.EmptyDeclarationContext = EmptyDeclarationContext; 
CPP14Parser.AttributeDeclarationContext = AttributeDeclarationContext; 
CPP14Parser.DeclSpecifierContext = DeclSpecifierContext; 
CPP14Parser.DeclSpecifierSeqContext = DeclSpecifierSeqContext; 
CPP14Parser.StorageClassSpecifierContext = StorageClassSpecifierContext; 
CPP14Parser.FunctionSpecifierContext = FunctionSpecifierContext; 
CPP14Parser.TypedefNameContext = TypedefNameContext; 
CPP14Parser.TypeSpecifierContext = TypeSpecifierContext; 
CPP14Parser.TrailingTypeSpecifierContext = TrailingTypeSpecifierContext; 
CPP14Parser.TypeSpecifierSeqContext = TypeSpecifierSeqContext; 
CPP14Parser.TrailingTypeSpecifierSeqContext = TrailingTypeSpecifierSeqContext; 
CPP14Parser.SimpleTypeLengthModifierContext = SimpleTypeLengthModifierContext; 
CPP14Parser.SimpleTypeSignednessModifierContext = SimpleTypeSignednessModifierContext; 
CPP14Parser.SimpleTypeSpecifierContext = SimpleTypeSpecifierContext; 
CPP14Parser.TheTypeNameContext = TheTypeNameContext; 
CPP14Parser.DecltypeSpecifierContext = DecltypeSpecifierContext; 
CPP14Parser.ElaboratedTypeSpecifierContext = ElaboratedTypeSpecifierContext; 
CPP14Parser.EnumNameContext = EnumNameContext; 
CPP14Parser.EnumSpecifierContext = EnumSpecifierContext; 
CPP14Parser.EnumHeadContext = EnumHeadContext; 
CPP14Parser.OpaqueEnumDeclarationContext = OpaqueEnumDeclarationContext; 
CPP14Parser.EnumkeyContext = EnumkeyContext; 
CPP14Parser.EnumbaseContext = EnumbaseContext; 
CPP14Parser.EnumeratorListContext = EnumeratorListContext; 
CPP14Parser.EnumeratorDefinitionContext = EnumeratorDefinitionContext; 
CPP14Parser.EnumeratorContext = EnumeratorContext; 
CPP14Parser.NamespaceNameContext = NamespaceNameContext; 
CPP14Parser.OriginalNamespaceNameContext = OriginalNamespaceNameContext; 
CPP14Parser.NamespaceDefinitionContext = NamespaceDefinitionContext; 
CPP14Parser.NamespaceAliasContext = NamespaceAliasContext; 
CPP14Parser.NamespaceAliasDefinitionContext = NamespaceAliasDefinitionContext; 
CPP14Parser.QualifiednamespacespecifierContext = QualifiednamespacespecifierContext; 
CPP14Parser.UsingDeclarationContext = UsingDeclarationContext; 
CPP14Parser.UsingDirectiveContext = UsingDirectiveContext; 
CPP14Parser.AsmDefinitionContext = AsmDefinitionContext; 
CPP14Parser.LinkageSpecificationContext = LinkageSpecificationContext; 
CPP14Parser.AttributeSpecifierSeqContext = AttributeSpecifierSeqContext; 
CPP14Parser.AttributeSpecifierContext = AttributeSpecifierContext; 
CPP14Parser.AlignmentspecifierContext = AlignmentspecifierContext; 
CPP14Parser.AttributeListContext = AttributeListContext; 
CPP14Parser.AttributeContext = AttributeContext; 
CPP14Parser.AttributeNamespaceContext = AttributeNamespaceContext; 
CPP14Parser.AttributeArgumentClauseContext = AttributeArgumentClauseContext; 
CPP14Parser.BalancedTokenSeqContext = BalancedTokenSeqContext; 
CPP14Parser.BalancedtokenContext = BalancedtokenContext; 
CPP14Parser.InitDeclaratorListContext = InitDeclaratorListContext; 
CPP14Parser.InitDeclaratorContext = InitDeclaratorContext; 
CPP14Parser.DeclaratorContext = DeclaratorContext; 
CPP14Parser.PointerDeclaratorContext = PointerDeclaratorContext; 
CPP14Parser.NoPointerDeclaratorContext = NoPointerDeclaratorContext; 
CPP14Parser.ParametersAndQualifiersContext = ParametersAndQualifiersContext; 
CPP14Parser.TrailingReturnTypeContext = TrailingReturnTypeContext; 
CPP14Parser.PointerOperatorContext = PointerOperatorContext; 
CPP14Parser.CvqualifierseqContext = CvqualifierseqContext; 
CPP14Parser.CvQualifierContext = CvQualifierContext; 
CPP14Parser.RefqualifierContext = RefqualifierContext; 
CPP14Parser.DeclaratoridContext = DeclaratoridContext; 
CPP14Parser.TheTypeIdContext = TheTypeIdContext; 
CPP14Parser.AbstractDeclaratorContext = AbstractDeclaratorContext; 
CPP14Parser.PointerAbstractDeclaratorContext = PointerAbstractDeclaratorContext; 
CPP14Parser.NoPointerAbstractDeclaratorContext = NoPointerAbstractDeclaratorContext; 
CPP14Parser.AbstractPackDeclaratorContext = AbstractPackDeclaratorContext; 
CPP14Parser.NoPointerAbstractPackDeclaratorContext = NoPointerAbstractPackDeclaratorContext; 
CPP14Parser.ParameterDeclarationClauseContext = ParameterDeclarationClauseContext; 
CPP14Parser.ParameterDeclarationListContext = ParameterDeclarationListContext; 
CPP14Parser.ParameterDeclarationContext = ParameterDeclarationContext; 
CPP14Parser.FunctionDefinitionContext = FunctionDefinitionContext; 
CPP14Parser.FunctionBodyContext = FunctionBodyContext; 
CPP14Parser.InitializerContext = InitializerContext; 
CPP14Parser.BraceOrEqualInitializerContext = BraceOrEqualInitializerContext; 
CPP14Parser.InitializerClauseContext = InitializerClauseContext; 
CPP14Parser.InitializerListContext = InitializerListContext; 
CPP14Parser.BracedInitListContext = BracedInitListContext; 
CPP14Parser.ClassNameContext = ClassNameContext; 
CPP14Parser.ClassSpecifierContext = ClassSpecifierContext; 
CPP14Parser.ClassHeadContext = ClassHeadContext; 
CPP14Parser.ClassHeadNameContext = ClassHeadNameContext; 
CPP14Parser.ClassVirtSpecifierContext = ClassVirtSpecifierContext; 
CPP14Parser.ClassKeyContext = ClassKeyContext; 
CPP14Parser.MemberSpecificationContext = MemberSpecificationContext; 
CPP14Parser.MemberdeclarationContext = MemberdeclarationContext; 
CPP14Parser.MemberDeclaratorListContext = MemberDeclaratorListContext; 
CPP14Parser.MemberDeclaratorContext = MemberDeclaratorContext; 
CPP14Parser.VirtualSpecifierSeqContext = VirtualSpecifierSeqContext; 
CPP14Parser.VirtualSpecifierContext = VirtualSpecifierContext; 
CPP14Parser.PureSpecifierContext = PureSpecifierContext; 
CPP14Parser.BaseClauseContext = BaseClauseContext; 
CPP14Parser.BaseSpecifierListContext = BaseSpecifierListContext; 
CPP14Parser.BaseSpecifierContext = BaseSpecifierContext; 
CPP14Parser.ClassOrDeclTypeContext = ClassOrDeclTypeContext; 
CPP14Parser.BaseTypeSpecifierContext = BaseTypeSpecifierContext; 
CPP14Parser.AccessSpecifierContext = AccessSpecifierContext; 
CPP14Parser.ConversionFunctionIdContext = ConversionFunctionIdContext; 
CPP14Parser.ConversionTypeIdContext = ConversionTypeIdContext; 
CPP14Parser.ConversionDeclaratorContext = ConversionDeclaratorContext; 
CPP14Parser.ConstructorInitializerContext = ConstructorInitializerContext; 
CPP14Parser.MemInitializerListContext = MemInitializerListContext; 
CPP14Parser.MemInitializerContext = MemInitializerContext; 
CPP14Parser.MeminitializeridContext = MeminitializeridContext; 
CPP14Parser.OperatorFunctionIdContext = OperatorFunctionIdContext; 
CPP14Parser.LiteralOperatorIdContext = LiteralOperatorIdContext; 
CPP14Parser.TemplateDeclarationContext = TemplateDeclarationContext; 
CPP14Parser.TemplateparameterListContext = TemplateparameterListContext; 
CPP14Parser.TemplateParameterContext = TemplateParameterContext; 
CPP14Parser.TypeParameterContext = TypeParameterContext; 
CPP14Parser.SimpleTemplateIdContext = SimpleTemplateIdContext; 
CPP14Parser.TemplateIdContext = TemplateIdContext; 
CPP14Parser.TemplateNameContext = TemplateNameContext; 
CPP14Parser.TemplateArgumentListContext = TemplateArgumentListContext; 
CPP14Parser.TemplateArgumentContext = TemplateArgumentContext; 
CPP14Parser.TypeNameSpecifierContext = TypeNameSpecifierContext; 
CPP14Parser.ExplicitInstantiationContext = ExplicitInstantiationContext; 
CPP14Parser.ExplicitSpecializationContext = ExplicitSpecializationContext; 
CPP14Parser.TryBlockContext = TryBlockContext; 
CPP14Parser.FunctionTryBlockContext = FunctionTryBlockContext; 
CPP14Parser.HandlerSeqContext = HandlerSeqContext; 
CPP14Parser.HandlerContext = HandlerContext; 
CPP14Parser.ExceptionDeclarationContext = ExceptionDeclarationContext; 
CPP14Parser.ThrowExpressionContext = ThrowExpressionContext; 
CPP14Parser.ExceptionSpecificationContext = ExceptionSpecificationContext; 
CPP14Parser.DynamicExceptionSpecificationContext = DynamicExceptionSpecificationContext; 
CPP14Parser.TypeIdListContext = TypeIdListContext; 
CPP14Parser.NoeExceptSpecificationContext = NoeExceptSpecificationContext; 
CPP14Parser.TheOperatorContext = TheOperatorContext; 
CPP14Parser.LiteralContext = LiteralContext; 
